# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024
# This file is distributed under the same license as the Low-Code platform
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Low-Code platform \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-29 12:48+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ru\n"
"Language-Team: ru <LL@li.org>\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && "
"n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../src/tutorials/tutorial3.md:2
msgid "Туториал №3"
msgstr ""

#: ../../src/tutorials/tutorial3.md:5
msgid "Используем Python"
msgstr ""

#: ../../src/tutorials/tutorial3.md:7
msgid "Введение"
msgstr ""

#: ../../src/tutorials/tutorial3.md:11
msgid ""
"Платформа предоставляет возможность использовать Python для различных "
"целей в качестве удобного широко известного языка "
"сценариев/программирования."
msgstr ""

#: ../../src/tutorials/tutorial3.md:13
msgid ""
"Сценарии Python, поддерживаемые платформой, должны использовать Python "
"версии 3.0, как описано здесь: https://docs.python.org/3/. Полное "
"руководство разработчика можно найти в разделе \"Использование Python\"."
msgstr ""

#: ../../src/tutorials/tutorial3.md:15
msgid ""
"Версия Python, которую использует платформа, называется Iron Python, "
"которая предоставляет интерфейс для кода C#. Он предоставляет две важные "
"библиотеки, которые необходимо импортировать в начале скрипта — `clr` и "
"`system`. Эти библиотеки предоставляют доступ к сущностям платформы, "
"которые можно запрашивать и контролировать из скрипта. <br>"
msgstr ""

#: ../../src/tutorials/tutorial3.md:18
msgid "Способы использования скриптов Python на платформе"
msgstr ""

#: ../../src/tutorials/tutorial3.md:22
msgid "Существует несколько способов использования Python на платформе:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:24
msgid ""
"Он позволяет контролировать формы приложений, разработанные и выполняемые"
" с помощью платформы, а также предоставлять настраиваемые индексы, "
"которые можно запускать в качестве реакции на какое-либо событие, "
"например нажатие кнопки клиентом. <br>"
msgstr ""

#: ../../src/tutorials/tutorial3.md:27
msgid "Вызов функции внутри \"Component script\", например, при нажатии кнопки:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:28
msgid ""
"Для этого вам нужно определить функцию внутри Component Script, а затем "
"перейти к элементу управления пользовательского интерфейса, такому как "
"Button, перейти в раздел «Actions» и установить для параметра «Command "
"Type» значение «Execute Script». Затем вам нужно ввести имя и параметры "
"вызова (если есть) вашего скрипта в предоставленные поля. <br>"
msgstr ""

#: ../../src/tutorials/tutorial3.md:31
msgid ""
"Использование функции внутри Component Script для событий изменения "
"значения:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:32
msgid ""
"Для этого вам нужно определить функцию внутри скрипта компонента, а затем"
" перейти к элементу управления пользовательского интерфейса, такому как "
"текстовое поле и т. д., затем перейти в раздел «Events» и ввести имя "
"вашего скрипта в поле «On value change»."
msgstr ""

#: ../../src/tutorials/tutorial3.md:33
msgid ""
"Обратите внимание, что эта функция будет вызываться только в том случае, "
"если данные поля изменились, и фокус элемента управления "
"пользовательского интерфейса в форме уйдет от этого элемента управления "
"пользовательского интерфейса."
msgstr ""

#: ../../src/tutorials/tutorial3.md:37
msgid ""
"Подписавшись на изменения данных с помощью метода "
"`context.DataModel.Model.Subscribe()`:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:38
msgid ""
"Самый простой способ сделать это — определить функцию перехвата всех "
"изменений (например, `def check_all_changes()`) в вашем компонентном "
"скрипте, а затем подписаться на нее."
msgstr ""

#: ../../src/tutorials/tutorial3.md:39
msgid ""
"Ваша функция будет вызываться каждый раз, когда происходит изменение "
"текущих данных элемента управления пользовательского интерфейса, в тот "
"момент, когда этот элемент управления пользовательского интерфейса теряет"
" фокус (например, пользователь переключается на другой элемент управления"
" пользовательского интерфейса или другое приложение)."
msgstr ""

#: ../../src/tutorials/tutorial3.md:43
msgid ""
"В рамках действия DataFlow выполните скрипт для определения логики "
"принятия решений и преобразования данных и установки внутренних "
"переменных, которые будут использоваться как часть сценариев DataFlow. Вы"
" можете увидеть примеры использования скрипта Python для DataFlow в "
"разделе \"Использование Python\"."
msgstr ""

#: ../../src/tutorials/tutorial3.md:47
msgid "Использование Python для доступа к компонентам платформы"
msgstr ""

#: ../../src/tutorials/tutorial3.md:51
msgid ""
"Чтобы получить доступ к компонентам платформы, сначала необходимо "
"импортировать clr библиотеки IronPython, как показано ниже."
msgstr ""

#: ../../src/tutorials/tutorial3.md:58
msgid ""
"После импорта к нескольким объектам можно получить доступ изнутри скрипта"
" Python через системную переменную «context»."
msgstr ""

#: ../../src/tutorials/tutorial3.md:62
msgid "Использование context.Model & context.DataModel"
msgstr ""

#: ../../src/tutorials/tutorial3.md:66
msgid ""
"`context.Model` & `context.DataModel` обеспечивают доступ к различным "
"полям данных модели платформы."
msgstr ""

#: ../../src/tutorials/tutorial3.md:68
msgid ""
"Для context.Model поля данных включают как поля компонента по умолчанию, "
"предоставляемые платформой, так и настраиваемые поля, добавленные "
"разработчиком компонента."
msgstr ""

#: ../../src/tutorials/tutorial3.md:70
msgid ""
"Для context.DataModel доступны только настраиваемые поля, добавленные "
"разработчиками компонентов."
msgstr ""

#: ../../src/tutorials/tutorial3.md:72
msgid ""
"Рекомендуется, чтобы context.DataModel использовался для доступа ко всем "
"настраиваемым полям, а context.Model использовался только для доступа к "
"внутренним полям компонента по умолчанию."
msgstr ""

#: ../../src/tutorials/tutorial3.md:74
msgid ""
"Если мы напишем скрипт компонента, обращающийся к этой модели, следующие "
"переменные системной модели будут доступны в нашем скрипте через "
"context.Model:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:76
msgid ""
"`Id` - внутренний идентификатор, автоматически сгенерированный платформой"
" для каждого компонента. Если Id == 0, это означает, что данные "
"компонента еще не были сохранены, это означает, что мы находимся в режиме"
" ввода данных для этого конкретного экземпляра данных компонента, "
"например, добавляем новый счет в наш Туториал №1"
msgstr ""

#: ../../src/tutorials/tutorial3.md:77
msgid ""
"`createDate` - внутренне установленная дата, когда экземпляр данных этого"
" компонента был впервые создан"
msgstr ""

#: ../../src/tutorials/tutorial3.md:78
msgid ""
"`name` (String) - системное user-friendly имя которое по умолчанию будет "
"браться для показа ссылок через поля типа Catalog"
msgstr ""

#: ../../src/tutorials/tutorial3.md:79
msgid ""
"`updateDate` - внутренне установленная дата последнего обновления "
"экземпляра данных этого компонента."
msgstr ""

#: ../../src/tutorials/tutorial3.md:80
msgid ""
"`CreatorSubject` - данные, которые показывают, какой пользователь добавил"
" экземпляр данных этого конкретного компонента."
msgstr ""

#: ../../src/tutorials/tutorial3.md:81
msgid ""
"`changeAuthor` - данные, которые показывают, какой пользователь последний"
" раз обновлял данный конкретный компонент"
msgstr ""

#: ../../src/tutorials/tutorial3.md:83
msgid ""
"Кроме того, следующие специфичные для компонента атрибуты будут доступны "
"для компонента нашего руководства №1 через context.DataModel "
"(рекомендуется) или context.Model:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:85
msgid "`InvoiceName` - уникальное имя для нашего нового счета"
msgstr ""

#: ../../src/tutorials/tutorial3.md:86
msgid "`InvoiceState` - текущий статус нашего нового инвойса"
msgstr ""

#: ../../src/tutorials/tutorial3.md:87
msgid "`InvoiceNumber` - уникальный идентификатор номера для нашего счета"
msgstr ""

#: ../../src/tutorials/tutorial3.md:88
msgid "`InvoiceDueDate` - срок оплаты нашего счета"
msgstr ""

#: ../../src/tutorials/tutorial3.md:89
msgid "`InvoiceTotalValue` - общая стоимость нашего счета"
msgstr ""

#: ../../src/tutorials/tutorial3.md:91
msgid ""
"Давайте теперь напишем пример сценария, который предварительно заполнит "
"некоторые поля для нового счета."
msgstr ""

#: ../../src/tutorials/tutorial3.md:117
msgid ""
"Теперь, если мы откроем приложение Tutorial #1 и нажмем кнопку "
"«Добавить», чтобы добавить новый счет, экран будет выглядеть следующим "
"образом:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:121
msgid "![Tutorial 3.1](tut3.1.png)"
msgstr ""

#: ../../src/tutorials/tutorial3.md:121
msgid "Tutorial 3.1"
msgstr ""

#: ../../src/tutorials/tutorial3.md:125
msgid "Использование context.Properties"
msgstr ""

#: ../../src/tutorials/tutorial3.md:129
msgid ""
"`context.Properties` позволяет получить доступ ко всем элементам "
"компонента и использовать, например, функции элементов управления формы "
"пользовательского интерфейса для управления конкретным элементом "
"управления пользовательского интерфейса."
msgstr ""

#: ../../src/tutorials/tutorial3.md:131
msgid ""
"Чтобы получить доступ к элементу управления пользовательского интерфейса,"
" используйте `context.Properties` следующим образом:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:137
msgid ""
"Здесь `<Internal_UI_Control_Name>` следует заменить именем вашего "
"элемента управления пользовательского интерфейса, который вы настроили во"
" время проектирования. Например, в случае туториала № 1 мы установили "
"внутреннее имя для элемента управления InvoiceState UI, как показано "
"ниже:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:141
msgid "![Tutorial 3.2](tut3.2.png)"
msgstr ""

#: ../../src/tutorials/tutorial3.md:141
msgid "Tutorial 3.2"
msgstr ""

#: ../../src/tutorials/tutorial3.md:145
msgid ""
"Теперь мы можем использовать это внутреннее имя, чтобы установить "
"следующую логику:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:147
msgid "При создании нового счета статус устанавливается на «На рассмотрении»."
msgstr ""

#: ../../src/tutorials/tutorial3.md:148
msgid ""
"Изменение поля статуса запрещено, то есть это поле должно быть отключено,"
" но видно"
msgstr ""

#: ../../src/tutorials/tutorial3.md:150
msgid ""
"Способ сделать это — использовать свойство `Disable` нашего элемента "
"управления пользовательского интерфейса, чтобы установить его в `True`. "
"Это приведет к тому, что поле появится, но не может быть изменено "
"пользователем, который создает новый счет. Это делается путем добавления "
"строки кода, как показано ниже:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:156
msgid ""
"Добавление этого в скрипт нашего компонента приведет к следующим "
"изменениям в нашей новой форме добавления счета."
msgstr ""

#: ../../src/tutorials/tutorial3.md:160
msgid "![Tutorial 3.3](tut3.3.png)"
msgstr ""

#: ../../src/tutorials/tutorial3.md:160
msgid "Tutorial 3.3"
msgstr ""

#: ../../src/tutorials/tutorial3.md:164
msgid "Как видите, поле «Статус счета» теперь отключено."
msgstr ""

#: ../../src/tutorials/tutorial3.md:166
msgid ""
"Другим часто используемым полем `context.Properties` для управления "
"элементами управления пользовательского интерфейса является `Visible`. "
"Если установлено значение `False`, этот конкретный элемент управления "
"пользовательского интерфейса не будет отображаться в форме. Затем его "
"можно снова включить, установив для него значение `True`. Это можно "
"сделать для любого элемента управления пользовательского интерфейса, "
"включая панели, содержащие несколько различных элементов управления "
"пользовательского интерфейса."
msgstr ""

#: ../../src/tutorials/tutorial3.md:168
msgid ""
"Пример того, как его можно использовать в контексте нашего туториала № 1 "
"для первоначального скрытия поля «Статус счета», показан ниже."
msgstr ""

#: ../../src/tutorials/tutorial3.md:181
msgid ""
"Также есть поле `Hidden` которое прячет/показывает элементы интерфейса "
"пользователя, аналогично полю `Visible`."
msgstr ""

#: ../../src/tutorials/tutorial3.md:183
msgid ""
"Другое часто используемое поле `context.Properties` это `Required`. Если "
"установлено значение `True`, конкретный элемент управления "
"пользовательского интерфейса станет обязательным (не может быть пустым), "
"а если установлено значение `False`, он станет необязательным. Обратите "
"внимание, что при этом изменяется только состояние элемента управления "
"пользовательского интерфейса для настраиваемого свойства в текущем "
"экземпляре формы, а не самого настраиваемого свойства, шаблона формы или "
"элементов управления пользовательского интерфейса для этого "
"настраиваемого свойства в других формах."
msgstr ""

#: ../../src/tutorials/tutorial3.md:187
msgid "Использование context.Form"
msgstr ""

#: ../../src/tutorials/tutorial3.md:191
msgid ""
"`context.Form` можно использовать для доступа к данным формы (например, "
"для целей проверки во время обработки формы, до того, как данные формы "
"будут сохранены во внутреннем хранилище) или для управления визуальным "
"представлением формы, например, путем настройки сообщения об ошибке."
msgstr ""

#: ../../src/tutorials/tutorial3.md:193
msgid ""
"Для этого следует использовать `context.Form.Get(<CustomFieldName>)` для "
"получения объекта, представляющего конкретное поле. Затем с этим объектом"
" можно использовать следующие функции."
msgstr ""

#: ../../src/tutorials/tutorial3.md:195
msgid ""
"`context.Form.Get(<CustomFieldName>).SetValue(<Value>)` — устанавливает "
"значение для определенного элемента управления пользовательского "
"интерфейса в текущей форме. — "
"`context.Form.Get(<CustomFieldName>).AddError(<StringValue>)` — "
"устанавливает сообщение об ошибке, отображаемое под определенным "
"элементом управления пользовательского интерфейса в текущей форме. — "
"`context.Form.Get(<CustomFieldName>).ClearError()` — очищает сообщение об"
" ошибке, показанное под конкретным элементом управления пользовательского"
" интерфейса в текущей форме."
msgstr ""

#: ../../src/tutorials/tutorial3.md:199
msgid ""
"Следующее расширение скрипта показывает, как проверить ситуацию, в "
"которой пользователь не изменил имя счета-фактуры по умолчанию, которое "
"мы установили выше в примерах для туториала №1."
msgstr ""

#: ../../src/tutorials/tutorial3.md:212
msgid ""
"Результат будет выглядеть как на следующем снимке экрана в случае, если "
"имя по умолчанию не было изменено:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:216
msgid "![Tutorial 3.4](tut3.4.png)"
msgstr ""

#: ../../src/tutorials/tutorial3.md:216
msgid "Tutorial 3.4"
msgstr ""

#: ../../src/tutorials/tutorial3.md:220
msgid "Использование context.Commands"
msgstr ""

#: ../../src/tutorials/tutorial3.md:224
msgid ""
"`context.Commands` можно использовать для управления пользовательским "
"интерфейсом исполняемого в данный момент компонента, изменения "
"содержимого текущей формы, открытия разных страниц, открытия новых "
"компонентов, возврата на предыдущую страницу или даже запуска новых "
"Workflows, Dataflows или Scripts."
msgstr ""

#: ../../src/tutorials/tutorial3.md:226
msgid ""
"Эти команды обычно используются внутри сценариев, вызываемых действием "
"ExecuteScript с помощью кнопок, и в подобных случаях. Например, в нашем "
"туториал № 1 кнопка Back to All Invoices может использовать следующий "
"скрипт для возвращения на предыдущую страницу:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:237
msgid ""
"Этот скрипт должен быть частью скрипта компонента и быть настроенным для "
"кнопки Back to All Invoices, в разделе `Actions` -> `Command Type`: "
"`Execute Script` -> `Method Name`: `navigate back`."
msgstr ""

#: ../../src/tutorials/tutorial3.md:241
msgid "Другие доступные функции context.Commands:"
msgstr ""

#: ../../src/tutorials/tutorial3.md:243
msgid ""
"``context.Commands.AddItem(GUID)`` - добавить элемент управления "
"пользовательским интерфейсом на страницу с помощью GUID."
msgstr ""

#: ../../src/tutorials/tutorial3.md:244
msgid ""
"``context.Commands.ChangePageAsync(GUID)`` - открыть страницу, используя "
"ее GUID"
msgstr ""

#: ../../src/tutorials/tutorial3.md:245
msgid ""
"``context.Commands.ChangePageByName(«ИмяСтраницы»)`` - измените текущую "
"страницу компонента на новую страницу, используя внутреннее имя"
msgstr ""

#: ../../src/tutorials/tutorial3.md:246
msgid ""
"``context.Commands.OpenComponent(GUID ComponentID, GUID PageID)`` - "
"открыть новый компонент и определенную страницу внутри компонента"
msgstr ""

#: ../../src/tutorials/tutorial3.md:247
msgid ""
"``context.Commands.EditItem(GUID UI_ControlID, EntityId)`` - смещение "
"фокуса пользовательского интерфейса на конкретный элемент управления "
"пользовательского интерфейса и определенные данные (используя его "
"внутренний идентификатор)"
msgstr ""

#: ../../src/tutorials/tutorial3.md:248
msgid ""
"``context.Commands.ExecuteWorkflow(GUID WorkflowID)`` - выполнить "
"workflow, используя его идентификатор. Кроме того, при необходимости "
"можно настроить WaitComplete на true или false."
msgstr ""

#: ../../src/tutorials/tutorial3.md:249
msgid ""
"``context.Commands.ExecuteDataflow(идентификатор потока данных GUID, "
"ContextID)`` - выполнить dataflow, используя его GUID и указанный "
"контекст данных."
msgstr ""

#: ../../src/tutorials/tutorial3.md:250
msgid ""
"``context.Commands.ExecuteScript(String ScriptName, StringParams "
"Script)`` - выполнить скрипт (функцию) из Component Script с некоторыми "
"параметрами"
msgstr ""

