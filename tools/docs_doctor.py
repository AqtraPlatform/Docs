#!/usr/bin/env python3
"""
MkDocs Doctor - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤—ã—Ö –ø–æ–ª–æ–º–æ–∫ MkDocs –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import yaml
import json
from pathlib import Path
from typing import Dict, List, Tuple, Any, Optional
import subprocess
import re

class MkDocsDoctor:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).resolve()
        self.docs_dir = self.project_root / "docs"
        self.config_file = None
        self.config = None
        self.issues = []
        self.warnings = []
        self.fixes = []
        
        # –ù–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª
        for config_name in ["mkdocs.yml", "mkdocs.yaml"]:
            config_path = self.project_root / config_name
            if config_path.exists():
                self.config_file = config_path
                break
    
    def run_diagnosis(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ MkDocs –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self._check_basic_structure()
        
        # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è YAML
        self._validate_yaml()
        
        if self.config:
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            self._check_navigation()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
            self._check_assets()
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
            self._check_plugins()
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            self._check_dependencies()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self._generate_report()
        self._save_report(report)
        
        return report
    
    def _check_basic_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print("  üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        if not self.config_file:
            self.issues.append({
                "type": "critical",
                "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª mkdocs.yml –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "fix": "–°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π mkdocs.yml"
            })
            return
        
        if not self.docs_dir.exists():
            self.issues.append({
                "type": "critical", 
                "message": "–ü–∞–ø–∫–∞ docs/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "fix": "–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É docs/ —Å —Ñ–∞–π–ª–æ–º index.md"
            })
        else:
            print(f"    ‚úÖ –ü–∞–ø–∫–∞ docs/ –Ω–∞–π–¥–µ–Ω–∞")
    
    def _validate_yaml(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("  üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        if not self.config_file:
            return
            
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.config = yaml.safe_load(f)
            print("    ‚úÖ YAML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        except yaml.YAMLError as e:
            self.issues.append({
                "type": "critical",
                "message": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}",
                "fix": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å YAML"
            })
        except Exception as e:
            self.issues.append({
                "type": "critical",
                "message": f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}",
                "fix": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"
            })
    
    def _check_navigation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        print("  üß≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        
        if not self.config or 'nav' not in self.config:
            self.issues.append({
                "type": "warning",
                "message": "–°–µ–∫—Ü–∏—è nav –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ",
                "fix": "–î–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é nav —Å –±–∞–∑–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"
            })
            return
        
        missing_files = []
        self._check_nav_recursive(self.config['nav'], missing_files)
        
        if missing_files:
            self.issues.append({
                "type": "error",
                "message": f"–ù–∞–π–¥–µ–Ω–æ {len(missing_files)} –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
                "files": missing_files[:50],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50
                "fix": "–ó–∞–ø—É—Å—Ç–∏—Ç—å tools/fix_nav.py –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            })
        else:
            print("    ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    
    def _check_nav_recursive(self, nav_items: List, missing_files: List):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        for item in nav_items:
            if isinstance(item, dict):
                for title, path in item.items():
                    if isinstance(path, str) and path.endswith(('.md', '.rst')):
                        file_path = self.docs_dir / path
                        if not file_path.exists():
                            missing_files.append({
                                "title": title,
                                "path": path,
                                "full_path": str(file_path)
                            })
                    elif isinstance(path, list):
                        self._check_nav_recursive(path, missing_files)
            elif isinstance(item, str) and item.endswith(('.md', '.rst')):
                file_path = self.docs_dir / item
                if not file_path.exists():
                    missing_files.append({
                        "title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "path": item,
                        "full_path": str(file_path)
                    })
    
    def _check_assets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤"""
        print("  üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤...")
        
        if not self.config:
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –∏–∫–æ–Ω–æ–∫
        theme_config = self.config.get('theme', {})
        asset_paths = []
        
        for key in ['logo', 'logo_dark', 'favicon']:
            if key in theme_config:
                asset_paths.append((key, theme_config[key]))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ extra_css –∏ extra_javascript
        for key in ['extra_css', 'extra_javascript']:
            if key in self.config:
                for path in self.config[key]:
                    asset_paths.append((key, path))
        
        for asset_type, path in asset_paths:
            if path.startswith('http'):
                print(f"    ‚ö†Ô∏è  {asset_type}: –≤–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ {path}")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ docs/ –∏ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            possible_paths = [
                self.docs_dir / path,
                self.project_root / path,
                self.docs_dir / "assets" / path.split('/')[-1] if '/' in path else path
            ]
            
            found = False
            for check_path in possible_paths:
                if check_path.exists():
                    found = True
                    break
            
            if not found:
                self.issues.append({
                    "type": "error",
                    "message": f"–ê—Å—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {asset_type} = {path}",
                    "fix": f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –≤ docs/{path}"
                })
            else:
                print(f"    ‚úÖ {asset_type}: {path}")
    
    def _check_plugins(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        print("  üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–≥–∏–Ω–æ–≤...")
        
        if not self.config or 'plugins' not in self.config:
            print("    ‚ö†Ô∏è  –°–µ–∫—Ü–∏—è plugins –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        plugins = self.config['plugins']
        for plugin in plugins:
            if isinstance(plugin, dict):
                plugin_name = list(plugin.keys())[0]
            else:
                plugin_name = plugin
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not self._is_plugin_installed(plugin_name):
                self.issues.append({
                    "type": "error",
                    "message": f"–ü–ª–∞–≥–∏–Ω {plugin_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    "fix": f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip install {self._get_plugin_package(plugin_name)}"
                })
            else:
                print(f"    ‚úÖ –ü–ª–∞–≥–∏–Ω {plugin_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _is_plugin_installed(self, plugin_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        try:
            result = subprocess.run([
                sys.executable, '-c', 
                f'import {plugin_name.replace("-", "_")}; print("installed")'
            ], capture_output=True, text=True, timeout=10)
            return result.returncode == 0
        except:
            return False
    
    def _get_plugin_package(self, plugin_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞"""
        plugin_packages = {
            'search': 'mkdocs',
            'glightbox': 'mkdocs-glightbox',
            'mermaid2': 'mkdocs-mermaid2-plugin',
            'i18n': 'mkdocs-static-i18n',
            'git-revision-date-localized': 'mkdocs-git-revision-date-localized-plugin',
            'mkdocstrings': 'mkdocstrings[python]',
            'redirects': 'mkdocs-redirects'
        }
        return plugin_packages.get(plugin_name, f'mkdocs-{plugin_name}')
    
    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("  üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
        req_file = self.project_root / "requirements.txt"
        if req_file.exists():
            print("    ‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω")
        else:
            self.warnings.append({
                "type": "warning",
                "message": "requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω",
                "fix": "–°–æ–∑–¥–∞—Ç—å requirements.txt —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pyproject.toml
        pyproject_file = self.project_root / "pyproject.toml"
        if pyproject_file.exists():
            print("    ‚úÖ pyproject.toml –Ω–∞–π–¥–µ–Ω")
    
    def _generate_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        report = {
            "timestamp": str(Path.cwd()),
            "project_root": str(self.project_root),
            "config_file": str(self.config_file) if self.config_file else None,
            "summary": {
                "total_issues": len(self.issues),
                "critical_issues": len([i for i in self.issues if i['type'] == 'critical']),
                "errors": len([i for i in self.issues if i['type'] == 'error']),
                "warnings": len(self.warnings)
            },
            "issues": self.issues,
            "warnings": self.warnings,
            "recommendations": self._generate_recommendations()
        }
        
        return report
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        if any(i['type'] == 'critical' for i in self.issues):
            recommendations.append("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        if any(i['type'] == 'error' for i in self.issues):
            recommendations.append("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ tools/fix_nav.py –¥–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        
        if not self.config:
            recommendations.append("üìù –°–æ–∑–¥–∞–π—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π mkdocs.yml –¥–ª—è –±–∞–∑–æ–≤–æ–π —Å–±–æ—Ä–∫–∏")
        
        recommendations.extend([
            "üìö –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt",
            "üî® –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–±–æ—Ä–∫—É: mkdocs build --strict",
            "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CI/CD pipeline –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏"
        ])
        
        return recommendations
    
    def _save_report(self, report: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É build –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        build_dir = self.project_root / "build"
        build_dir.mkdir(exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
        report_file = build_dir / "doctor_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Markdown –æ—Ç—á–µ—Ç
        md_report_file = build_dir / "doctor_report.md"
        with open(md_report_file, 'w', encoding='utf-8') as f:
            f.write(self._format_markdown_report(report))
        
        print(f"  üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {md_report_file}")
    
    def _format_markdown_report(self, report: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ Markdown"""
        md = f"""# MkDocs Doctor Report

**–í—Ä–µ–º—è:** {report['timestamp']}  
**–ü—Ä–æ–µ–∫—Ç:** {report['project_root']}  
**–ö–æ–Ω—Ñ–∏–≥:** {report['config_file'] or '–ù–µ –Ω–∞–π–¥–µ–Ω'}

## üìä –°–≤–æ–¥–∫–∞

- **–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º:** {report['summary']['total_issues']}
- **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ:** {report['summary']['critical_issues']}
- **–û—à–∏–±–∫–∏:** {report['summary']['errors']}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {report['summary']['warnings']}

## üö® –ü—Ä–æ–±–ª–µ–º—ã

"""
        
        if report['issues']:
            for i, issue in enumerate(report['issues'], 1):
                md += f"### {i}. {issue['type'].upper()}: {issue['message']}\n\n"
                if 'files' in issue:
                    md += "**–§–∞–π–ª—ã:**\n"
                    for file_info in issue['files'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                        md += f"- {file_info['title']}: `{file_info['path']}`\n"
                    if len(issue['files']) > 10:
                        md += f"- ... –∏ –µ—â–µ {len(issue['files']) - 10} —Ñ–∞–π–ª–æ–≤\n"
                    md += "\n"
                md += f"**–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:** {issue['fix']}\n\n"
        else:
            md += "‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n"
        
        if report['warnings']:
            md += "## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n\n"
            for warning in report['warnings']:
                md += f"- {warning['message']} ‚Üí {warning['fix']}\n"
            md += "\n"
        
        md += "## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        for rec in report['recommendations']:
            md += f"- {rec}\n"
        
        return md
    
    def print_summary(self, report: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üìã –°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        print("="*60)
        
        summary = report['summary']
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {summary['total_issues']}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {summary['critical_issues']}")
        print(f"–û—à–∏–±–∫–∏: {summary['errors']}")
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {summary['warnings']}")
        
        if summary['total_issues'] == 0:
            print("\nüéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            print(f"\nüìä –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: build/doctor_report.md")
            print(f"üîß –î–ª—è –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: python tools/fix_nav.py")
        
        print("="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = sys.argv[1] if len(sys.argv) > 1 else "."
    
    doctor = MkDocsDoctor(project_root)
    report = doctor.run_diagnosis()
    doctor.print_summary(report)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if report['summary']['critical_issues'] > 0:
        sys.exit(1)
    elif report['summary']['errors'] > 0:
        sys.exit(2)
    else:
        sys.exit(0)

if __name__ == "__main__":
    main()
