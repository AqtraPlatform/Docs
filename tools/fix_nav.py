#!/usr/bin/env python3
"""
MkDocs Nav Fixer - –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ MkDocs –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import yaml
import shutil
from pathlib import Path
from typing import Dict, List, Tuple, Any, Optional
import difflib

class MkDocsNavFixer:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root).resolve()
        self.docs_dir = self.project_root / "docs"
        self.config_file = None
        self.config = None
        self.fixes_applied = []
        self.broken_items = []
        
        # –ù–∞–π—Ç–∏ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª
        for config_name in ["mkdocs.yml", "mkdocs.yaml"]:
            config_path = self.project_root / config_name
            if config_path.exists():
                self.config_file = config_path
                break
    
    def fix_navigation(self) -> bool:
        """–ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        print("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
        
        if not self.config_file:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª mkdocs.yml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        if not self.docs_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ docs/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        if not self._load_config():
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        self._create_backup()
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
        available_files = self._scan_available_files()
        print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ {len(available_files)} —Ñ–∞–π–ª–æ–≤ –≤ docs/")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        if 'nav' in self.config:
            self._fix_nav_recursive(self.config['nav'], available_files)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        self._save_config()
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        self._print_report()
        
        return True
    
    def _load_config(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                self.config = yaml.safe_load(f)
            print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return False
    
    def _create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        backup_file = self.config_file.with_suffix('.yml.bak')
        shutil.copy2(self.config_file, backup_file)
        print(f"  üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_file}")
    
    def _scan_available_files(self) -> Dict[str, Path]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        available_files = {}
        
        for file_path in self.docs_dir.rglob('*.md'):
            relative_path = file_path.relative_to(self.docs_dir)
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            keys = [
                str(relative_path),
                str(relative_path).replace('\\', '/'),
                relative_path.stem,  # –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                relative_path.name,  # –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            ]
            
            for key in keys:
                available_files[key.lower()] = file_path
        
        # –¢–∞–∫–∂–µ —Å–∫–∞–Ω–∏—Ä—É–µ–º .rst —Ñ–∞–π–ª—ã
        for file_path in self.docs_dir.rglob('*.rst'):
            relative_path = file_path.relative_to(self.docs_dir)
            keys = [
                str(relative_path),
                str(relative_path).replace('\\', '/'),
                relative_path.stem,
                relative_path.name,
            ]
            
            for key in keys:
                available_files[key.lower()] = file_path
        
        return available_files
    
    def _fix_nav_recursive(self, nav_items: List, available_files: Dict[str, Path]):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        for i, item in enumerate(nav_items):
            if isinstance(item, dict):
                for title, path in item.items():
                    if isinstance(path, str) and (path.endswith('.md') or path.endswith('.rst')):
                        fixed_path = self._find_best_match(path, available_files)
                        if fixed_path:
                            if fixed_path != path:
                                nav_items[i][title] = fixed_path
                                self.fixes_applied.append({
                                    "title": title,
                                    "old_path": path,
                                    "new_path": fixed_path,
                                    "type": "fixed"
                                })
                                print(f"    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {title} ‚Üí {fixed_path}")
                        else:
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ —Å–µ–∫—Ü–∏—é –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫
                            self.broken_items.append({
                                "title": title,
                                "path": path,
                                "type": "broken"
                            })
                            print(f"    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {title} ({path})")
                    elif isinstance(path, list):
                        self._fix_nav_recursive(path, available_files)
            elif isinstance(item, str) and (item.endswith('.md') or item.endswith('.rst')):
                fixed_path = self._find_best_match(item, available_files)
                if fixed_path:
                    if fixed_path != item:
                        nav_items[i] = fixed_path
                        self.fixes_applied.append({
                            "title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                            "old_path": item,
                            "new_path": fixed_path,
                            "type": "fixed"
                        })
                        print(f"    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {item} ‚Üí {fixed_path}")
                else:
                    self.broken_items.append({
                        "title": "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "path": item,
                        "type": "broken"
                    })
                    print(f"    ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {item}")
    
    def _find_best_match(self, original_path: str, available_files: Dict[str, Path]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ñ–∞–π–ª–∞"""
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if original_path.lower() in available_files:
            return original_path
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
        normalized_path = original_path.replace('\\', '/').lower()
        if normalized_path in available_files:
            return original_path
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        filename = Path(original_path).name.lower()
        if filename in available_files:
            found_path = available_files[filename]
            return str(found_path.relative_to(self.docs_dir)).replace('\\', '/')
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        stem = Path(original_path).stem.lower()
        for key, file_path in available_files.items():
            if Path(key).stem.lower() == stem:
                return str(file_path.relative_to(self.docs_dir)).replace('\\', '/')
        
        # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫
        candidates = []
        for key, file_path in available_files.items():
            similarity = difflib.SequenceMatcher(None, original_path.lower(), key).ratio()
            if similarity > 0.6:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
                candidates.append((similarity, str(file_path.relative_to(self.docs_dir)).replace('\\', '/')))
        
        if candidates:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π
            candidates.sort(key=lambda x: x[0], reverse=True)
            return candidates[0][1]
        
        return None
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if self.broken_items:
            broken_section = {
                "‚ö†Ô∏è Broken (temp)": []
            }
            
            for item in self.broken_items:
                broken_section["‚ö†Ô∏è Broken (temp)"].append({
                    item["title"]: item["path"]
                })
            
            if 'nav' not in self.config:
                self.config['nav'] = []
            
            self.config['nav'].append(broken_section)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        with open(self.config_file, 'w', encoding='utf-8') as f:
            yaml.dump(self.config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
        
        print("  üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    
    def _print_report(self):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã –û–¢–ß–ï–¢ –û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ò –ù–ê–í–ò–ì–ê–¶–ò–ò")
        print("="*60)
        
        print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.fixes_applied)}")
        print(f"–ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: {len(self.broken_items)}")
        
        if self.fixes_applied:
            print("\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–ê–ô–õ–´:")
            for fix in self.fixes_applied:
                print(f"  {fix['title']}: {fix['old_path']} ‚Üí {fix['new_path']}")
        
        if self.broken_items:
            print("\n‚ùå –ë–ò–¢–´–ï –°–°–´–õ–ö–ò (–ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ —Å–µ–∫—Ü–∏—é 'Broken'):")
            for item in self.broken_items:
                print(f"  {item['title']}: {item['path']}")
        
        print(f"\nüíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {self.config_file}.bak")
        print("üî® –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å: mkdocs build --strict")
        print("="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = sys.argv[1] if len(sys.argv) > 1 else "."
    
    fixer = MkDocsNavFixer(project_root)
    success = fixer.fix_navigation()
    
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()
