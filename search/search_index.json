{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#aqtra-platform","title":"Aqtra Platform","text":"<p>Welcome to the Aqtra platform documentation! A modern low-code platform for creating enterprise applications with visual programming and business process automation support.</p> \ud83d\ude80 Quick Start \u2699\ufe0f Development \ud83d\udcda Tutorials <p>New in version 2.0</p> <p>Added support for Python modules, improved development interface and extended process automation capabilities.</p> <p>Language Support</p> <p>Documentation is available in Russian and English languages.</p>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<ul> <li>Getting Started - Learning Center</li> <li>Getting Started - First Login</li> <li>Configuration - Basic Settings</li> </ul>"},{"location":"index.html#user-interface","title":"User Interface","text":"<ul> <li>Home - Home Page</li> <li>Access - Access</li> <li>Applications - Applications</li> <li>Extensions - Extensions</li> <li>File Storage - File Storage</li> <li>Localizations - Localizations</li> <li>Maintenance - Maintenance</li> </ul>"},{"location":"index.html#application-development","title":"Application Development","text":"<ul> <li>Component - Components</li> <li>Publishing Applications - Publishing Applications</li> <li>Using Python - Using Python</li> <li>Data Flow Components - Data Flow Components</li> <li>UI Components - UI Components</li> <li>Workflow Components - Workflow Components</li> </ul>"},{"location":"index.html#tutorials","title":"Tutorials","text":"<ul> <li>01 - Basic Setup - Basic Setup</li> <li>02 - Data Flow - Data Flow</li> <li>03 - Workflow - Workflow</li> </ul>"},{"location":"index.html#additional-resources","title":"Additional Resources","text":"<ul> <li>Forum - Forum</li> <li>Release Notes - Release Notes</li> </ul>"},{"location":"architecture.html","title":"Aqtra Platform Architecture","text":""},{"location":"architecture.html#aqtra-platform-architecture","title":"Aqtra Platform Architecture","text":"<p>Overview of Aqtra platform architecture and main system components.</p>"},{"location":"architecture.html#general-scheme","title":"General Scheme","text":"Text Only<pre><code>graph TB\n    A[User] --&gt; B[Web Interface]\n    B --&gt; C[API Gateway]\n    C --&gt; D[Core Services]\n    D --&gt; E[Data Layer]\n    D --&gt; F[Workflow Engine]\n    D --&gt; G[Component Library]\n\n    E --&gt; H[(Database)]\n    E --&gt; I[File Storage]\n\n    F --&gt; J[Process Automation]\n    G --&gt; K[UI Components]\n    G --&gt; L[Data Flow Components]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n</code></pre>"},{"location":"architecture.html#system-components","title":"System Components","text":""},{"location":"architecture.html#core-modules","title":"Core Modules","text":"Module Description Status Core Engine Platform Core Active UI Builder Interface Constructor Active Workflow Engine Process Engine Active Data Flow Data Processing Active Python Runtime Python Code Execution In Development"},{"location":"architecture.html#technology-stack","title":"Technology Stack","text":"Backend <p><code>python     # Core Technologies     - Python 3.11+     - FastAPI     - PostgreSQL     - Redis     - Celery</code></p> Frontend <p><code>javascript     // Client Technologies     - React 18     - TypeScript     - Material-UI     - Redux Toolkit</code></p> DevOps <p><code>yaml     # Infrastructure     - Docker     - Kubernetes     - Nginx     - Prometheus</code></p>"},{"location":"architecture.html#development-process","title":"Development Process","text":"Text Only<pre><code>sequenceDiagram\n    participant U as User\n    participant UI as UI Builder\n    participant E as Engine\n    participant DB as Database\n\n    U-&gt;&gt;UI: Creates component\n    UI-&gt;&gt;E: Saves configuration\n    E-&gt;&gt;DB: Writes data\n    E--&gt;&gt;UI: Confirmation\n    UI--&gt;&gt;U: Ready component\n</code></pre>"},{"location":"architecture.html#security","title":"Security","text":"<p>Important</p> <p>All data is encrypted during transmission and storage. TLS 1.3 is used for all connections.</p> <p>Limitations</p> <p>Do not store passwords in plain text. Use the built-in authentication system.</p>"},{"location":"architecture.html#performance","title":"Performance","text":"<ul> <li>Response Time: &lt; 200ms for standard operations</li> <li>Throughput: up to 10,000 requests/sec</li> <li>Scalability: horizontal scaling</li> <li>Availability: 99.9% uptime</li> </ul>"},{"location":"architecture.html#monitoring","title":"Monitoring","text":"Text Only<pre><code>graph LR\n    A[Application] --&gt; B[Metrics]\n    B --&gt; C[Prometheus]\n    C --&gt; D[Grafana]\n    C --&gt; E[AlertManager]\n    E --&gt; F[Slack/Email]\n\n    style A fill:#e3f2fd\n    style B fill:#f1f8e9\n    style C fill:#fff8e1\n    style D fill:#fce4ec\n</code></pre> Start Development Explore Tutorials"},{"location":"forum.html","title":"Community forum","text":""},{"location":"forum.html#community-forum","title":"Community forum","text":"<p>We invite you to register on our forum, where you can exchange experiences</p> <p>Register here</p> <p></p> <p></p> <p></p>"},{"location":"forum.html#registration-steps","title":"Registration steps","text":"<ol> <li> <p>Registration on the forum: You need to click the Sign Up button in the top right corner of the screen, then enter your username, email address, and password.    </p> </li> <li> <p>Account verification: After registration, you need to verify your account. Please note that the confirmation email may end up in the \"Spam\" folder.    </p> </li> <li> <p>Participation in discussions: After verification, you can create discussions on various topics, reply to other participants, and interact.</p> </li> </ol>"},{"location":"release-notes.html","title":"Release Notes","text":""},{"location":"release-notes.html#release-descriptions","title":"Release descriptions","text":"<p>The Aqtra Platform is constantly evolving!</p> <p>New versions are normally released once a month for:</p> Text Only<pre><code>- Kubernetes cluster\n- Docker mini-image\n</code></pre> <p></p>"},{"location":"release-notes.html#version-013x","title":"Version 0.13.x","text":"<p>Functionality Added</p> <ul> <li>New Component Module: Within the component, the **Web parts** module has been added, which consists of two blocks: \u201cStyles\u201d and \u201cJavaScript\u201d. This module is similar to the \u201cComponent Script\u201d module, but instead of interacting with Python, you can describe CSS styles in the \u201cStyles\u201d block and interact in JavaScript in the \u201cJavaScript\u201d block;</li> <li>Setting up Global Modules in the Aplication domain: Setting up global CSS and JavaScript modules have been added in the Main settings** of Application domain**. More details **here**;</li> <li>New Tools in the Maintenance Menu: A setting has been added for the File storage** section. More details here**;</li> <li>New Object Model Settings for File Type Data: Now you can set validation by file type and limit on file size in bytes;</li> <li>XSRF/CSRF Support: The file upload component now eliminates binary data transfer via JS and adds XSRF sending. Requests for downloading files are now targeted and direct access to file-storage is excluded. Improvements have also been made to the work-place to receive an XSRF token when loading a page, and the OData controller has been improved to load files. Sending requests from work-place to download files is now also targeted, and direct access to file-storage is impossible.   </li> </ul> <p>Design Updated</p> <ul> <li>Export/Import Section: The design of the export/import section of the **Applications** menu has been updated.   </li> </ul>"},{"location":"release-notes.html#version-012x","title":"Version 0.12.x","text":"<p>Functionality Added</p> <ul> <li>Send Notification: A new step in Dataflow \u201cSend notification\u201d has been added. This step allows you to send simple notifications to the user, which enhances the way you interact with the user via the notification system. More details here: **Send notification**</li> <li>Pivot Grid: A new UI element \u201cPivot Grid\u201d has been added for data analysis and visualization. More details here: **Pivot grid**</li> <li>Changes to List view****:</li> <li>Ability to expand the component horizontally or vertically.</li> <li>The ability to enable Drag &amp; Drop has been added for all groups of a component or by choice.</li> <li>Enabling function has been added to Events after using Drag &amp; Drop.</li> <li>Changes to Data grid****:</li> <li>The multiselect mechanism has been changed. In the Data grid settings there is now a \u201cSelection Mode\u201d option with a choice: <code>None</code>, <code>Single</code>, <code>Multiple</code>, <code>Checkbox</code>.</li> <li>New events: <code>On Table Changed</code>, <code>On Header Changed</code>, <code>On Row Changed</code>, <code>On Cell Changed</code>.</li> <li>Ability to select the number of lines in the paginator at the front.</li> <li>Changes in Chart View****:</li> <li>Color Scheme setting has been removed.</li> <li>Min/Max settings have been added.</li> <li>SIP Client Integration:</li> <li>Ability to make calls from Workplace thanks to SIP client integration. More details **here**.</li> <li>Placeholder images for missing images in the settings of application domains and the UI \"Image\" element: More details in User Interface documentation and Image component.</li> <li>New methods for managing the state of UI elements. More details in **documentation**.</li> <li>Bulk Upload of Images Via http.client and File Storage in Dataflow scripts: A function for bulk upload of images has been added. More details in **documentation**.</li> <li>Optimization of the Publishing Mechanism: The publishing mechanism has been improved using a state machine, providing a stable process with the ability to roll back in case of errors. More details in **documentation**.</li> </ul> <p></p>"},{"location":"release-notes.html#version-010x","title":"Version 0.10.x","text":"<p>Functionality Added</p> <ul> <li>A new dataflow step \u201cGet file info\u201d has been created, allowing you to obtain information about a file by its identifier. More details in the documentation: **Get file info**</li> <li>Added a filter for the \u201cComponent\u201d field inside the \u201cGet entity by id\u201d dataflow step. More details here: **Get entity by id** </li> </ul> <p>Design Update</p> <ul> <li>\u201cDashboard\u201d main page. More details here: **Dashboard**</li> <li>\u201cNavigation menu\u201d has been removed from the \u201cApplications\u201d menu and is now located on the main page. More details here: **Navigation menu**</li> <li>Dataflow steps design has been updated. More details here: **Available Dataflow steps**</li> <li>\u201cFile storage\u201d design has been updated. More details here: **File storage**</li> <li>The \u201cSystem maintenance\u201d design has been updated. More details here: **System maintenance**   </li> </ul>"},{"location":"release-notes.html#version-09x","title":"Version 0.9.x","text":"<p>Functionality Added</p> <ul> <li>System-specific (Platform-specific) features</li> <li>User interface uploading: optimization of UI component compilation.</li> <li>Refactoring of the **Maintenance menu**. Moving control buttons to the \u201cSystem maintenance\u201d tab, and displaying logs with their settings in the \u201cSystem logs\u201d tab.</li> <li>Job queue storage generator in Redis.</li> <li>IronPython has been updated from version 2.7.12 to 3.4.1 on Workplace.</li> <li>User-specific (Studio-specific) features - Copy/paste elements in **interface builder** on the component page. - Adding files to the root of the file storage. - Ability to use the Data Model of the reference components (Catalog) in the component element ribbon bar for: <code>DataGrid</code>, <code>ListView</code>, <code>TreeView</code>.   </li> </ul> <p>Interface Changes</p> <ul> <li>Refactoring of the studio main menu:</li> <li>moving the following elements to the right corner of the top ribbon bar: localization switch and button to log out of the current account (logout),</li> <li>the Profile item of the main menu has been removed.</li> <li>The icon for the Python Modulesmenu item has been redesigned.</li> <li>Online help icons have been added in many sections of the Studio: dataflow steps, buttons for user interface elements (Toolbox UI), main application parameters, as well as in many other locations in the studio to ensure a faster access to online help on the documentation site. </li> </ul> <p>Key bugs fixed</p> <ul> <li>Correction of the <code>Cron</code> task scheduler operation during import/export of components.</li> <li>Elimination of the <code>changeAuthor</code> duplicate from the component data model.</li> <li>Stabilization of workflow step selection.</li> <li>Correction of the <code>Number</code> UI element from the component elements panel.</li> <li>Fixing the operation of the On focusevent for some of the UI elements: Day, Time, Signature.   </li> </ul>"},{"location":"release-notes.html#version-08x","title":"Version 0.8.x","text":"<p>Important and Improved Functionality Added</p> <ul> <li>In the dataflow Form Action step, the Open Sidebar and Open Modal parameters have been added, which allow you to open a sidebar &amp; modal window, respectively, similar to how this can be done via Python script.</li> <li>Transferring the required attributes for parameters transferred in the Get Action Model step.</li> <li>\u201cRemove assigned roles for user\u201d dataflow step has been added, which removes all current roles assigned to the user, allowing you to create a new set of roles from scratch.</li> <li>**Python modules** menu has been added to manage the shared library of Python modules.</li> <li>Background setting for UI controls has been added, which allows you to set an image in standard formats (for example, png, svg, jpeg, etc.) as a background for all controls that have a Brush settings section.</li> <li>Data model view icon on the dataflow step has been changed to the eye icon.</li> <li>\u201cSkip from Synchronize\u201d parameter has been replaced with Virtual Property. Fields marked \u201cVirtual Property\u201d are not saved to the database when the component is recorded.</li> <li>Settings for Power Web Application (PWA) in the Edit manifest section have been added.</li> <li>Additional Application Domain settings have been added - show breadcrumps, login, locale.   </li> </ul> <p>Important Fixed Errors</p> <ul> <li>The work of dynamic filters for Data Grid control has been fixed.</li> <li>The \u201cFirst line to ignore field\u201d in the Import File step is not reset to 0 after saving.</li> <li>The default color for the application domain applies to controls of the button type that do not have a default color set.</li> <li>Permissions for a multicomponent are not set in restrict access mode.   </li> </ul>"},{"location":"release-notes.html#version-070","title":"Version 0.7.0","text":"<p>Important and Improved Functionality Added</p> <ul> <li>When selecting a Default component for an application domain in the Main Settings section, you can select the page that will be opened for this component in the Default page field. If no page is selected, the first page of the component (main page) will be opened by default.</li> <li>A new \u201cExecute Dataflow\u201d step has been added to dataflow, which allows you to launch new dataflows, including dataflows from other components, within the current dataflow.</li> <li>The outdated \u201cGet Audience\u201d dataflow step has been removed, and the \u201cForm Action\u201d step has been moved to the \u201cModel Transformation\u201d group. The \u201cOther\u201d group has been removed completely.</li> <li>Search for configuring \u201cField mapping\u201d has been added for the \u201cApply Deferred update operations\u201d step.</li> <li>For the UI control **Text Area**, an Auto-size option has been added, which allows you to expand the size of the field if you need to enter a larger amount of text.</li> <li>The \u201cQuery Entity by Filter\u201d dataflow step has been optimized via automatic creation of indexes and database normalization.</li> <li>Notice of imminent license expiration has been added. The message appears 10 days before the expiration date of the current license.</li> <li>Swagger APIs generated for Dataflow now show the Dataflow name as the API name.</li> <li>The ability to request user geolocation from Component Script via the context.PlatformServices.GeolocationPosition function has been added.</li> <li>The ability to set the default locale setting for application domain has been added in the Main Settings section.</li> <li>The ability to set a favicon for the application domain has been added in the settings of the Home Menu: Domain: Main Settings.   </li> </ul> <p>Important Fixed Errors</p> <ul> <li>The work of dynamic filters for Data Grid control has been fixed.</li> <li>An issue where an error occurred when sorting fields retrieved from Catalog type links has been fixed.</li> <li>Data grid stability, including phantom errors when navigating through the Data grid, has been improved.</li> <li>An issue with the search form being cut off in the Data Grid when clicking on a filter has been fixed.</li> <li>Output of string values \u200b\u200bfor Enum has been added.</li> <li>Incorrect system operation with remote logout has been fixed.</li> <li>Incorrect operation of the timer in the \u201cApply deferred update operations\u201d step has been fixed.</li> <li>For UI controls of the Label type, bound to a field of the Catalog type, the Color setting is now processed correctly.   </li> </ul>"},{"location":"release-notes.html#version-06x","title":"Version 0.6.x","text":"<p>Important and Improved Functionality Added</p> <ul> <li>Advanced features for managing the main application menu - building hierarchical menus and setting menu icons.</li> <li>Improved work with Python scripts - highlight for Python syntax, auto-complete for Python system methods, as well as auto-complete and tips for methods of built-in platform libraries have been added (available via Ctrl-Space under Win10/11, and Option-Space under MacOS).</li> <li>The ability to build additional sidebar windows via Component Script has been added.</li> <li>The ability to build complex modal windows via Component Script with data transfer from modal windows to the calling script has been added.</li> <li>The Component Script call has been moved to the main menu.</li> <li>Localization of Studio into Russian has been completed.</li> <li>In the DataGrid control, it is now possible to select arbitrary fields of an external component when displaying reference fields of the Catalog type.</li> <li>Import-export now includes export and subsequent import of permissions and roles (exporting files created using version 0.6.x to previous versions will work, but will not import included roles and permissions).</li> <li>Import-export now checks for related components and warns the user if any related components were not included in the export list.</li> <li>At the platform level, the ability to mark entries (component instances) as available for physical deletion has been added via a flag in the dataflow \u201cUpdate Entry\u201d step.</li> <li>The ability for the Studio admin to get a list of entries marked for deletion and remove those that do not have links to entries that are not marked ready for deletion has been added.   </li> </ul>"},{"location":"release-notes.html#version-0524","title":"Version 0.5.24","text":"<p>Important and Improved Functionality Added</p> <ul> <li>Advanced capabilities for dynamic and static filters in advanced controls such as Data Grid, List View, Tree View, allowing on-the-fly filtering of data before display to the user (parameters have been added for filters of the contains type, etc.).</li> <li>Expanding the concept of utilizing Dataflow &amp; Workflow - now both can be created and used separately from UI controls such as buttons, which allows for a more flexible application structure and simplifies development.</li> <li>Many new methods available via Using Python in Component Script have been added, such as calling modal windows, checking screen resolution and device type to create a responsive UI layout.</li> <li>The ability to work with message queue systems (for example, RabbitMQ) from dataflow with a new step Subscribe to Connector has been added.</li> <li>The ability to batch data processing in Dataflow via new steps Deferred Update Entry &amp; Apply Deferred Update Operations has been added.   </li> </ul>"},{"location":"release-notes.html#version-044","title":"Version 0.4.4","text":"<p>Important and Improved Functionality Added</p> <ul> <li>New system storage field \u201cName\u201d has been added, used to display items from Catalogs.</li> <li>When showing a single element from Catalog (for example, using a UI control Select that references Catalog), the contents of the Name field will now always be shown. If the Name field is empty, the system Catalog name/sequence number of the Catalog entry will be shown.</li> <li>Default sorting settings for Datagrid and Listview have been added.</li> <li>Automatic replacement of Unicode special characters in Component Script for link generation has been added.   </li> </ul> <p>Mistakes Corrected</p> <ul> <li>Incorrect operation of the paginator concerning switching several tables on one page has been fixed.</li> <li>Not working Scrolling function in some parts of the Studio has been fixed.   </li> </ul>"},{"location":"release-notes.html#version-03223","title":"Version 0.3.223","text":"<p>Kubernetes cluster 0.3.223 | Docker mini-image 0.2.118</p> <p>Important and Improved Functionality Added</p> <ul> <li>New data-flow step \u201cSend templated notification\u201d has been added, which allows you to send a notification by email using a specified template.</li> <li>Transparency property for UI components.</li> <li>Support for OAuth2 authorization for HTTP requests has been added. You can now configure automatic token generation via OAuth to connect to the API.</li> <li>The \u201cStore response as file\u201d parameter has been added in the \u201cExecute API call\u201d step to allow you to download a file via the API upon request.</li> <li>The steps no longer generate a newsletter, they now generate a field in the model for later use, such as \u201cSend templated notification\u201d.   </li> </ul> <p>Mistakes Corrected</p> <ul> <li>Errors when working with the Datetime type in the calendar have been fixed.</li> <li>UI in the Studio and Workplace has been fixed.</li> <li>The Disabled state for the Radiobutton UI component has been fixed.</li> <li>Localization errors have been fixed.</li> <li>Search in Dropdown is now case insensitive.</li> <li>Authorization operation including log-out issues has been fixed. </li> </ul>"},{"location":"app-development/index.html","title":"Development of Applications","text":""},{"location":"app-development/index.html#development-of-applications","title":"Development of Applications","text":"<p>This section covers all aspects of building applications on the Aqtra platform:</p> <ul> <li>Component - Create and configure application components</li> <li>UI Components - Visual interface elements library</li> <li>Dataflow - Data processing and transformation flows</li> <li>Workflow - Business process automation</li> <li>Using Python - Python scripting in your applications</li> <li>Publications - Deploy and publish your applications</li> </ul>"},{"location":"app-development/component.html","title":"Component","text":""},{"location":"app-development/component.html#component","title":"Component","text":"<p>Components are the key building blocks in the platform, providing the basis for building applications. They are encapsulated units of functionality that can include data, user interface, business logic, and process automation.</p>"},{"location":"app-development/component.html#component-types","title":"Component Types","text":"<ol> <li> <p>Single Component:</p> </li> <li> <p>Contains the basic object model for storing data.</p> </li> <li>Includes a UI model with forms and controls.</li> <li>Has an automation model with dataflows and workflows.</li> <li>Supports Python scripts for additional behavior customization.</li> <li> <p>It has unique security options.</p> </li> <li> <p>Multi-Component:</p> </li> <li>Combines multiple Components to create complex applications.</li> <li>It is used to build a single user interface, for example, in mobile applications.</li> </ol>"},{"location":"app-development/component.html#creating-a-new-component","title":"Creating a New Component","text":"<ol> <li>Open Studio ('https:///studio').</li> <li>Go to Applications/Components menu.</li> <li>Click Add button to create a new component or multi-component.</li> </ol>"},{"location":"app-development/component.html#basic-component-settings","title":"Basic Component Settings","text":"Parameter Description <code>Title</code> The name of the component that is displayed to users. <code>Proxy Mode</code> Determines whether the component will act as a proxy. <code>Restrict Access</code> Restricts access to the component. <code>Maker</code> Identifies the creator or owner of the component. <code>Cron</code> Configuring the start time of a component using Cron. <code>Run as User</code> Specifies the user on whose behalf it will be executed. <code>Access Mode</code> Defines the mode of access to the component. <code>Description</code> A detailed description of the component, its purpose, and functions. <code>Domains</code> The domains or categories to which the component belongs."},{"location":"app-development/component.html#component-object-model-in-the-platform","title":"Component Object Model in the Platform","text":"<p>Each component in the platform automatically includes the following fields:</p> <ul> <li>'Id': A unique component identifier.</li> <li>'creatorSubject': The subject that has created the object.</li> <li>'updateSubject': The subject that has updated the object.</li> <li>'createdDate': Date when the object was created.</li> <li>'updateDate': Date when the object was last updated.</li> </ul> <p>Components can include additional elements, which can belong to one of eleven types: 'string', 'datetime', 'catalog', 'number', 'integer', 'array', 'file', 'boolean', 'time', 'date', 'uri'. Each of these elements has its own settings.</p> <p>Global settings for all types:</p> <ul> <li>'Name': System name of the property.</li> <li>'Title': Name of the property to be displayed in the interface.</li> <li>'Required': Specifies whether the field is required.</li> <li>'Primary Key': Determines whether a field is a unique identifier.</li> <li>'Query': Determines whether the field can be used in queries.</li> <li>'Virtual property': Excludes a field from synchronization processes.</li> </ul>"},{"location":"app-development/component.html#interface-builder","title":"Interface Builder","text":"<p>The platform offers a powerful tool for customizing the user interface for each component \u2013 the Interface Builder. It is a visual editor that allows you to create and customize multi-component user interfaces using drag-and-drop features. The Interface Builder is a workspace in the Definition section of the Component Creation Interface.</p> <p>In this section, you can:</p> <ul> <li>Create a multi-screen app interface using an intuitive drag-and-drop editor.</li> <li>Add UI elements from the Basic, Advanced, and Layout categories.</li> <li>Configure the object model for the Workflow and Dataflow of the application.</li> <li>Customize CSS styles for all UI elements.</li> </ul> <p>After you add UI elements to your app's page layout, you can do the following operations:</p> <ul> <li>Copy: Copies the current element to the clipboard.</li> <li>Paste: Pastes the copied item into a new location.</li> <li>Move: Changes the position of the element.</li> <li>Properties: Opens the properties panel to configure the element.</li> <li>Preview: Shows the layout in a format that is close to the user's application.</li> <li>Markup Preview: Displays the textual web markup of the page.</li> <li>Delete: Deletes the selected element.</li> <li>Data Field: Allows you to bind an element to a data field (database link).</li> </ul>"},{"location":"app-development/component.html#web-parts-module-styles-and-javascript","title":"Web parts module: \u201cStyles\u201d and \u201cJavaScript\u201d","text":"<p>The \u201cStyles\u201d block is designed to describe the CSS styles that are applied to the component, while the \u201cJavaScript\u201d block allows you to establish interaction with the user interface and provide additional functionality using the JavaScript language.</p> <p>In this way, the Web Parts module enables developers to create more complex and interactive components using different programming languages to describe styles and functionality.</p>"},{"location":"app-development/component.html#using-javascript","title":"Using \"JavaScript\"","text":"<p>Example of using JavaScript to implement functionality for creating buttons, pressing which takes a screenshot:</p> <ol> <li>To call JavaScript functions from the 'Web parts' block, it is necessary to use the method context.InvokeInterop(methodName, objects) within Componen script:</li> </ol> <p>````python def capturePage1():     context.InvokeInterop(\"callScreenshot\")</p> <ol> <li>Next, we move to the 'JavaScript' section of the 'Web parts' block and prepare function: ```javascript // Creating a </li></ol>"},{"location":"app-development/publishing-applications.html","title":"Publications","text":""},{"location":"app-development/publishing-applications.html#publications","title":"Publications","text":"<p>To create a component version, localization, extension, or other appropriate customization via the platform, you must publish it. And in order for a component version to be published, it must be marked as ready to publish. </p> <p>The publishing process is controlled through the state machine, which allows you to effectively control all stages and, in case of errors, return the system to the previous state. A global lock feature has been introduced to prevent multiple publications from being started at the same time. Users see the status of active publications, and after each publication is completed, the statuses of the objects that are ready to be published are updated automatically.</p> <p>Steps to publish a component:</p> <ul> <li>\u201cSave\u201d button: Used to save the current changes to the component.</li> <li>\u201cReady to Publish\u201d: Marks a component as ready to publish after all changes have been saved.</li> </ul> <p>Steps for publishing localizations and integrations: - Automatically become available for publishing after you make changes.</p> <p>Publishing Process: 1. Go to Publications: Located in \u2018Studio\u2192Applications\u2192Publication.\u2019 2. Selecting Items to Publish:     - Components, localizations, integrations, and Python modules are selected to be published. 3. Final publication:     - The procedure is completed by clicking the publish button.    - A notification appears when the publication is successful.</p> <p></p>"},{"location":"app-development/using-python.html","title":"Using Python","text":""},{"location":"app-development/using-python.html#using-python","title":"Using Python","text":""},{"location":"app-development/using-python.html#introduction","title":"Introduction","text":"<p>The platform provides the ability to use Python for various purposes, due to its convenience and wide adoption as a scripting and programming language. Python scripts on the platform must comply with version 3.0 as described in official Python documentation. The full Developer's Guide is available in Python Developer's Guide.</p> <p>Python on the platform is called IronPython, which enables interaction with C# code. It includes two main libraries - <code>clr</code> and <code>system</code>, which provide access to platform entities.</p>"},{"location":"app-development/using-python.html#python-library-menu","title":"Python Library Menu","text":"<p>In this menu, you can add common Python modules that become available on the front-end (in Component Script) and on the back-end (in the Execute Script step for dataflow).</p>"},{"location":"app-development/using-python.html#viewing-common-python-modules","title":"Viewing Common Python Modules","text":"<p>The Python Modules Menu displays a list of modules that have already been added, including information about whether the module is available for front-end, back-end, or both.</p> <p></p>"},{"location":"app-development/using-python.html#adding-a-new-module","title":"Adding a New Module","text":"<p>When you click on the Add button, the window for adding a new module opens.</p> <p></p> <p>In this window, you can:</p> <ul> <li>Select the availability type of the new module (front-end, back-end, or both).</li> <li>Specify the name of the new module to import.</li> <li>Insert and verify the module code through \"Compile\".</li> </ul>"},{"location":"app-development/using-python.html#platform-and-python","title":"Platform and Python","text":"<p>Python can be used as part of the Component Script for each component, allowing you to control the forms of applications, as well as part of the Dataflow via the Execute Script step.</p> <p>Functions can be called in a variety of ways, such as one of the UI controls when certain events occur.</p> <p>To access platform components, you need to import IronPython libraries (<code>clr</code> and <code>system</code>) and use the <code>context</code> system variable.</p>"},{"location":"app-development/using-python.html#contextmodel-contextdatamodel","title":"<code>context.Model</code> &amp; <code>context.DataModel</code>","text":"<ul> <li><code>context. Model</code> &amp; `context. DataModel' provide access to various data fields in the Platform model.</li> <li>It is recommended to use <code>context.DataModel</code> to access custom fields and <code>context.Model</code> to access the component's default internal fields.</li> </ul>"},{"location":"app-development/using-python.html#contextproperties","title":"<code>context.Properties</code>","text":"<p>`context. Properties' allows you to control UI controls, such as changing their visibility or availability. Example:</p> <p>context.Properties.. =</p>"},{"location":"app-development/using-python.html#contextform","title":"<code>context.Form</code>","text":"<p><code>context.Form</code> is used to access form data or manage the visual representation of the form, for example, to set error messages. Available functions:</p> <ul> <li>`context. Form.Get(). SetValue()' - Sets the value for a specific UI control in the current form.</li> <li>`context. Form.Get(). AddError()' - Sets the error message displayed below a specific UI control in the current form.</li> <li>`context. Form.Get(). ClearError()' - Clears the error message displayed under a specific UI control in the current form.</li> </ul> <p>Example:</p> Python<pre><code>if datamodel.InvoiceName == 'PLEASE_SET_A_UNIQUE_NAME':\n    context.Form.Get(\"InvoiceName\").AddError(\"Please set a unique invoice name\")\nelse:\n    context.Form.Get(\"InvoiceName\").ClearError()\n</code></pre>"},{"location":"app-development/using-python.html#contextcommands","title":"<code>context.Commands</code>","text":"<p>`context. Commands' can be used to control the user interface of a currently executable component, change the content of the current form, open different pages, open new components, return to the previous page, or even launch new Workflows, Dataflows, or Scripts.</p> <p>Examples of available functions of context.Commands:</p> <ul> <li>`context. Commands.AddItem (GUID)': Add a UI control to a page using a GUID.</li> <li>`context. Commands.ChangePageAsync (GUID)': Open the page using its GUID.</li> <li>`context. Commands.ChangePageByName(\"PageName\")': Change the current component page to a new page using the internal name.</li> <li>`context. Commands.OpenComponent (GUID ComponentID, GUID PageID)': Open a new component and a specific page inside the component.</li> <li>`context. Commands.EditItem (GUID UI_ControlID, EntityId)': Shifts the focus of the UI to a specific UI control and specific data (using its internal ID).</li> <li>`context. Commands.ExecuteWorkflow (GUID WorkflowID)': Execute a workflow using its ID.</li> <li>`context. Commands.ExecuteDataflow (GUID DataflowID, ContextID)': Execute dataflow using its GUID and the specified data context.</li> <li><code>context.Commands.ExecuteScript (\"ScriptName\", \"ScriptParams\")</code>: Execute a script (function) from Component Script with some parameters.</li> </ul>"},{"location":"app-development/using-python.html#contextlogger","title":"<code>context.Logger</code>","text":"<p>Functions from \u2018context. Logger\u2019 allow you to write information from the Component Script to the browser console.</p> <p>The current version of \u2018context. Logger\u2019 includes the following methods, which differ in how the corresponding messages are displayed in the browser console (e.g. Info - black, Error - red, etc.):</p> <ul> <li>'context.Logger.Info(String)': Writes an information message to the browser console.</li> <li>`context. Logger.Error(String)': Writes an error message to the browser console.</li> <li>`context. Logger.Trace(String)': Writes a trace message to the browser console.</li> <li>`context. Logger.Error(Exception, String)': Writes the error message and exception information to the browser console.</li> </ul> <p>Example of a function from Component Script that outputs the string \"Show model info\" and the field value 'Property_1':</p> Python<pre><code>def show_model_info(model):\n    context.Logger.Info(\"show_model_info\")\n    context.Logger.Info(\"Property Property_1=\" + model.Data.Property_1)\n</code></pre>"},{"location":"app-development/using-python.html#contextplatformservices","title":"<code>context.PlatformServices</code>","text":"<p>Updated to version 0.7.0</p> <p>The functions of 'context. PlatformServices' include a wide range of functions available on various platforms (web, mobile), as well as functions for building and displaying modal windows and sidebar windows.</p> <p>The following methods are available as part of 'context. PlatformServices`:</p> <ul> <li>`context. PlatformServices.Device()': Returns the device type (Browser, Android, iOS).</li> <li>`context. PlatformServices.FingerpintAvailible()': Returns \u2018True\u2019 if a fingerprint scanner is available.</li> <li>`context. PlatformServices.EnableFingerpint()': Enables the fingerprint scanner.</li> <li>`context. PlatformServices.DisableFingerpint()': Disables the fingerprint scanner.</li> <li>`context. PlatformServices.FingerpintEnabled()': Checks if the fingerprint scanner is enabled.</li> <li>`context. PlatformServices.SetAppLock()': Sets lock on the application.</li> <li>`context. PlatformServices.ChangeAppPinLock()': Sets PIN to lock on the application.</li> <li>`context. PlatformServices.AppLockEnabled()': Checks if lock is set on the application.</li> <li>`context. PlatformServices.ScanBarcode(BarcodeType)': Scans the barcode by the set type.</li> <li>`context. PlatformServices.OpenUrl(\"url\")': Opens a new bookmark in the browser at the provided URL.</li> <li>`context. PlatformServices.OpenFromBase64Url(url)': Opens a new bookmark in the browser at the provided Base64 URL.</li> <li>`context. PlatformServices.OpenApp(appUrl)': Opens the application at the provided URL.</li> <li>`context. PlatformServices.CanOpenApp(params string[] appUrls)': Checks if the app can be opened on the device.</li> <li>`context. PlatformServices.CanUsePayment()': Checks payment possibilities.</li> <li>`context. PlatformServices.StartPayment()': Starts the payment process.</li> <li>`context. PlatformServices.SMSRetriever()': Allows you to receive SMS.</li> <li>`context. PlatformServices.ShowDialog(string message, string title)': Shows a simple dialog with an OK button.</li> <li>`context. PlatformServices.ShowDialog(ComponentID, title, hSize, vSize, style)': Shows a simple dialog on component ID with specified dimensions, title, and CSS styles.</li> <li>`context. PlatformServices.Confirm(string message, string title = \"\")': Shows a dialog with Yes/No buttons.</li> <li>`context. PlatformServices.GeolocationPosition()': Returns the current geolocation.</li> </ul> <p>An example of using 'context. PlatformServices.GeolocationPosition`:</p> Python<pre><code>def Success(coords):\n    context.Logger.Error(\"Get coords complete\")\n    if (coords == None):\n        context.Logger.Error(\"Coords null\")\n        context.Logger.Error(\"Langitude \" + \"{:.2f}\".format(coords.Latitude))\n        context.Logger.Error(\"Longitude \" + \"{:.2f}\".format(coords.Longitude))\n\ndef Error(exception):\n    context.Logger.Error(exception, \"Get coords error\")\n\ndef GetCoords():\n    context.PlatformServices.GeolocationPosition().Subscribe(lambda coords: Success(coords), lambda ex: Error(ex))\n</code></pre> <p>An example of using 'context. PlatformServices.Confirm`:</p> Python<pre><code>def checkResponse(task):\n    if (task.Result == True):\n        context.Logger.Error(\"TRUE\")\n    else:\n        context.Logger.Error(\"FALSE\")\n\ndef show_modal():\n    explicitSystemAction = System.ActionSystem.Threading.Tasks.Task[System.Boolean]\n    result = context.PlatformServices.Confirm(\"Your Message\", \"Dialog Title\").ContinueWith(explicitSystemAction)\n</code></pre> <p>The following group of functions is used to determine on which device and at what resolution the current user has the interface open:</p> <ul> <li>`context. PlatformServices.IsDesktop()': Returns \u2018True\u2019 if the interface is open on the desktop.</li> <li>`context. PlatformServices.IsMobile()': Returns \u2018True\u2019 if the interface is open on a mobile device.</li> <li>`context. PlatformServices.IsExtraSmall()': Returns \u2018True\u2019 if the interface is open on a screen smaller than 576px.</li> <li>`context. PlatformServices.IsSmall()': Returns \u2018True\u2019 if the interface is open on a screen larger than 576px.</li> <li>`context. PlatformServices.IsMedium()': Returns \u2018True\u2019 if the interface is open on a screen larger than 768px.</li> <li>`context. PlatformServices.IsLarge()': Returns \u2018True\u2019 if the interface is open on a screen larger than 992px.</li> <li>`context. PlatformServices.IsExtraLarge()': Returns \u2018True\u2019 if the interface is open on a screen larger than 1200px.</li> </ul>"},{"location":"app-development/using-python.html#contextplatformservicessidebarbuilder","title":"<code>context.PlatformServices.Sidebar.Builder</code>","text":"<p>`context. PlatformServices.Sidebar.Builder' is used to create windows that open at one of the specified positions relative to the main window (form) of the application - at the top, bottom, on the right, or left.</p> <p>Before a sidebar can be called, it must be built as follows:</p> Python<pre><code>def open_sidebar(position):\n    dialog_builder = context.PlatformServices.SidebarBuilder('4b7675ae-406a-45bd-9bf9-526cc78ce476')\n    dialog_builder.WithEntryId(1).WithTitle(\"Open for test\").WithPageId('8bd5310a-b7ff-4f65-bc38-3f4c20058483')\n    dialog_builder.WithVSize(\"480px\").WithHSize(\"640px\").WithPosition(position)\n    dialog_builder.WithParameter(\"Property_1\", \"Incoming data for the property\")\n    dialog_builder.OnComplete(lambda model: show_model_info(model))\n    dialog_builder.OpenDialog()\n</code></pre> <p>Functions for opening sidebar in different positions:</p> Python<pre><code>def sidebar_top():\n    open_sidebar(\"Top\")\n\ndef sidebar_left():\n    open_sidebar(\"Left\")\n\ndef sidebar_right():\n    open_sidebar(\"Right\")\n\ndef sidebar_bottom():\n    open_sidebar(\"Bottom\")\n</code></pre>"},{"location":"app-development/using-python.html#contextplatformservicesdialogbuilder","title":"<code>context.PlatformServices.DialogBuilder</code>","text":"<p>The functions of 'context. PlatformServices.DialogBuilder' are used to create modal windows that open on top of the current application window (form).</p> <p>Example of a set of functions that create and display a modal window on top of the current window. It is important to change the ID of the component and the window (page) to be used:</p> Python<pre><code>def show_model_info(model):\n    context.Logger.Info(\"show_model_info\")\n    context.Logger.Info(\"Property Property_1=\" + model.Data.Property_1)\n\ndef open_custom_modal():\n    # Creating a modal window template using the GUID of a specific component\n    dialog_builder = context.PlatformServices.DialogBuilder('4b7675ae-406a-45bd-9bf9-526cc78ce476')\n    # Setting the title for the modal window and selecting a specific page from the component's settings\n    # Also setting the component instance ID to 1, so the first saved instance of component data will be used\n    dialog_builder.WithEntryId(1).WithTitle(\"Open for test\").WithPageId('8bd5310a-b7ff-4f65-bc38-3f4c20058483')\n    # Setting the size of the modal window\n    dialog_builder.WithVSize(\"480px\").WithHSize(\"640px\")\n    # Adding a value for the Property_1, which should be in the used component\n    dialog_builder.WithParameter(\"Property_1\", \"Incoming data for the property\")\n    # Configuring the callback function for the modal window's Ok button.\n    # If the window is closed or the cancel button is pressed, nothing is called\n    dialog_builder.OnComplete(lambda model: show_model_info(model))\n    # Opening the created modal window\n    dialog_builder.OpenDialog()\n</code></pre>"},{"location":"app-development/using-python.html#contextsessionmanager","title":"<code>context.SessionManager</code>","text":"<p>`context. SessionManager' can be used to retrieve data about a user's token, as well as to make the user leave the session.</p> <p>Available methods:</p> <ul> <li>`context. SessionManager.GetAccessToken()': Gets the current token.</li> <li>`context. SessionManager.UpdateToken(token)': Updates the token to a new one.</li> <li><code>context.SessionManager.LogOut()</code>: Terminates the current session for the user (user logout).</li> </ul>"},{"location":"app-development/using-python.html#contextruntime","title":"<code>context.Runtime</code>","text":"<p>`context. Runtime' can be used to call JavaScript functions. Void can be used to call functions without a return value. Async can be used for asynchronous call.</p> <p>Available methods:</p> <ul> <li>`context. Runtime.Invoke()': Calls the function.</li> <li>`context. Runtime.InvokeVoid()': Calls the function with no return value.</li> <li>`context. Runtime.InvokeAsync()': Calls the function asynchronously.</li> <li><code>context.Runtime.InvokeVoidAsync()</code>: Asynchronously calls a function with no return value.</li> </ul>"},{"location":"app-development/using-python.html#contextuserinfo","title":"<code>context.UserInfo</code>","text":"<p>`context. UserInfo' can be used to work with a user account.</p> <p>Available methods:</p> <ul> <li>`context. UserInfo.Identity()': Retrieves information about the current user.</li> <li><code>context.UserInfo.Identities()</code>: Retrieves a list of all user identifiers.</li> </ul>"},{"location":"app-development/using-python.html#contextconfirmationservices","title":"<code>context.ConfirmationServices</code>","text":"<p>`context. ConfirmationServices' can be used to open simple dialogs.</p> <p>Available methods:</p> <ul> <li>`context. ConfirmationServices.Confirm(message, header, icon)': A simple confirmation dialog with a specified message, header, and icon.</li> <li>`context. ConfirmationServices.ConfirmAsync(message, header, icon)': A simple modeless confirmation dialog with a specified message, header, and icon.</li> <li><code>context.ConfirmationServices.StateTheReason(header)</code>: Simple dialog with a header and OK button.</li> </ul>"},{"location":"app-development/using-python.html#smthbusyboolean-smtherrorboolean-string-smthgetdynamicfiltervaluestring","title":"<code>smth.Busy(boolean)</code>, <code>smth.Error(boolean, string)</code>, <code>smth.GetDynamicFilterValue(string)</code>","text":"<p>The <code>Busy(boolean)</code> method puts a UIElement into loading status, shows or hides the preloader. The <code>Error(boolean, string)</code> method puts a UIElement into error status, shows an error message. The <code>GetDynamicFilterValue(string)</code> method calculates the value of a Dynamic filter. If there are two filters on one field, the first one in the list will be calculated</p> <p>Examples:</p> Python<pre><code>def OnDataflowComplete(dataResult, dstList, srcList):\n    srcList.Busy(False)\n    dstList.Busy(False)\n    '''Update lists'''\n    srcList.Refresh()\n    dstList.Refresh()\n\ndef OnDataflowError(exception, dstList, srcList):\n    srcList.Error(True, \"An error occurred\")\n    dstList.Error(True)\n    context.Logger.Error(exception, \"An error occurred during data-flow call\")\n\ndef OnMove(dstList, srcList, dataObject, oldIdx, newIdx):\n    context.Logger.Info(\"Callback on move\")\n    srcList.Busy(True)\n    dstList.Busy(True)\n\n    stage = dstList.GetDynamicFilterValue(\"data.Stage\")\n\n    '''Creating a model to call data-flow'''\n    flowModel = { \"Stage\": stage, \"OrderId\": dataObject.Id }\n    '''Calling data-flow with new onComplete and onError overrides'''\n    context.ExecuteDataflow(\"783cf3e3-d8f8-4551-8447-13be4f738e41\", flowModel,\n    lambda res: OnDataflowComplete(res, dstList, srcList),\n    lambda ex: OnDataflowError(ex, dstList, srcList))\n\n#### Uploading images via http.client and file storage\n**Only available in \u2018Dataflow\u2019 scripts:**\n\n```python\nimport http.client\nimport file_storage\n\nhost = \"docs.scalaxi.ru\"\nconn = http.client.HTTPSConnection(host)\nconn.request(\"GET\", \"/ru/_images/main-dashboard-new.png\", headers={\"Host\": host})\nresponse = conn.getresponse()\n# Writing file\nfile_id = file_storage.upload_file(response.read(), \"test_blob.dat\")\nitem[\"uploaded_file@uuid\"] = file_id\n\n'Reading back'\ndata_bytes = file_storage.download_file(file_id)\n</code></pre>"},{"location":"app-development/using-python.html#sip-in-component-script","title":"SIP in Component Script","text":"<p>Checking SIP Availability: You can manage SIP availability by accessing the Enabled property.</p> Python<pre><code>    # SIP phone is available\ncontext.PlatformServices.SipPhone.Enabled = True\n    # SIP phone is unavailable\ncontext.PlatformServices.SipPhone.Enabled = False\n\n**Responding to Call Events**:\nYou can subscribe to various events, such as creating an outgoing call, receiving an incoming call, ending a call, and answering a call.\n\n```python\ncontext.PlatformServices.SipPhone.OutgoingCallCreated(lambda call_info: (\n    # Processing of outgoing call creation event\n))\n\ncontext.PlatformServices.SipPhone.CallReceived(lambda call_info: (\n    # Processing of incoming call reception event\n))\n\ncontext.PlatformServices.SipPhone.CallHangUp(lambda: (\n    # Processing of call termination event\n))\n\ncontext.PlatformServices.SipPhone.CallAnswered(lambda: (\n    # Processing of call answer event\n))\n</code></pre> <p>Making and Ending a Call: You can make a call and end a call using the following methods:</p> Python<pre><code>    # Initiating a call using the entered number.\ncontext.PlatformServices.SipPhone.Call(number)\n\n    # Ending the current call.\ncontext.PlatformServices.SipPhone.HangUp()\n\n**Creating a Phone Component**:\nYou can additionally create a component that will be displayed during a call event within a small technical area.\n\nphone_component_builder = context.PlatformServices.SipPhone.ShowComponent(\"phoneComponent\")\n\nYou can read about its setup below.\n\n**Configuring Component Parameters and Styles**:\nThese methods allow you to register parameters, page IDs and styles of phone components, as well as record IDs if necessary:\n\nWithParameter(key, value) - Description: Registers a component parameter;\nWithPageId(pageId) - Description: Registers the component's page identifier;\nWithEntryId(entryId) - Description: Registers the entry identifier;\nWithStyle(style) - Description: Registers the component style;\nDisplayValue() - Description: Used to retrieve call information, specifically, it outputs one of two fields:\nDisplayName or FriendlyName, depending on which one is populated with data.\nIf both fields are populated, the method can return the value of either DisplayName or FriendlyName,\ndepending on the logic of your application;\nShow() - Description: Displays the component;\nCloseComponent() - Description: Used to close the component if there is a need to open a new one.\n\n#### Requests to the catalogs service from data-flow script scenarios\n\nThis code utilizes a Python module called `catalogs`. It executes an SQL query to fetch data from a table with the identifier `\"f28ff85c-ddad-4704-bb80-407bc45315ab\"`. The query selects fields `\"Id\"`, `\"Name\"`, and `\"Data_Property_1\"`, where the value of the `\"Name\"` field equals a specific value (in this case `\"test name\"`). The query result is stored in the variable `query_result`.\n\n```python\nimport catalogs\n\nquery = catalogs.query('select \\\n                        test_cmp.\"Id\", \\\n                        test_cmp.\"Name\", \\\n                        test_cmp.\"Data_Property_1\", \\\n                        test_cmp.\"Data_Property_1\" \\\n                        from \"f28ff85c-ddad-4704-bb80-407bc45315ab\" as test_cmp \\\n                        where test_cmp.\"Name\" = @test_cmp_name')\nquery.add_parameter(\"@test_cmp_name\", \"test name\")\nitem[\"query_result\"] = query.execute()\n</code></pre>"},{"location":"app-development/using-python.html#adding-crud-methods-for-data-flow-script-scenarios","title":"Adding CRUD methods for data-flow script scenarios","text":"<p>Adding CRUD methods for entity manipulation: This code utilizes the <code>catalogs</code> library, which provides methods for working with entity sets. First, an entity_set instance is created with the corresponding identifier. Then, operations for creating, updating, and deleting records are formed using the <code>create()</code>, <code>update()</code>, and <code>delete()</code> methods respectively. Corresponding properties are set for each operation, and corresponding commands are executed.</p> Python<pre><code>import catalogs\nimport json_extensions\n\n# receive an entity set\nentity_set = catalogs.entity_set(\"9f73ef4f-ebe4-44e5-a64d-5c8a1244be92\")\n\n# create a 'create' task\ncreate_operation = entity_set.create()\n# set the name\ncreate_operation.set_name(json_extensions.select_token(item,\"data.Property_For_Name\"))\n# write the property value\ncreate_operation.data[\"Property_For_Name\"] = json_extensions.select_token(item,\"data.Property_For_Name\")\n# enable logging\ncreate_operation.no_tracking()\n# execute the command and obtain the record ID\nentry_id = create_operation.apply()\n\n# create an 'update' task\nupdate_operation = entity_set.update(entry_id)\n# enable logging\nupdate_operation.no_tracking()\n# set the name\nupdate_operation.set_name(\"new name\")\n# write the property value\nupdate_operation.data[\"Property_For_Name\"] = \"new value\"\n# execute the command\nupdate_operation.apply()\n\n# create a 'delete' task\ndelete_operation = entity_set.delete(entry_id)\n# execute the command\ndelete_operation.apply()\n\n#### Extension methods for working with JSON\n\nThis code utilizes the `json_extensions` library, which provides methods for working with JSON data. For example, the `select_token()` and `select_tokens()` methods are used to select elements based on a specified path or query. The `is_null()` and `is_undefined()` methods are used to check if an element is of type Null or undefined respectively.\n\n```python\nimport json_extensions\n# Get the item by path\njson_extensions.select_token(item,\"data.Property_For_Name\")\n# Select items by query\njson_extensions.select_tokens(item,\"data.Property_For_Name &lt;&gt; ''\")\n# Check the item type for Null\njson_extensions.is_null(item)\n# Check the item type for undefined\njson_extensions.is_undefined(item)\n</code></pre>"},{"location":"app-development/data-flow-components/index.html","title":"Dataflow","text":""},{"location":"app-development/data-flow-components/index.html#dataflow_1","title":"Dataflow","text":""},{"location":"app-development/data-flow-components/index.html#dataflow","title":"What is dataflow?","text":"<p>Dataflow, or data flow, in the platform is a key component that allows users to process and transform data within an application. This is a powerful tool for integrating data, processing events and automating business processes.</p> <p>Dataflow is built on the platform using a 'visual editor' of the data flow:</p> <p>The visual data flow editor is an intuitive designer for creating and managing data flows. This tool allows users to sequentially create a set of Stages and Steps to implement complex data processing scripts.</p> <ul> <li>Add Stage: This is done by pressing the \"+\" icon on the data flow control panel. You can add an unlimited number of stages depending on the needs of your script.</li> <li>Delete Stage: To delete a stage, use the \"X\" button on the selected stage block.</li> <li>Edit Stage: You can only edit the name of the selected stage.</li> <li>Add Step: A new step is added by pressing the \"ADD STEP\" button at the appropriate stage. Users can choose step types from the proposed activity groups.</li> <li>Delete Step: To delete a step, click on the \"X\" icon on the selected step block.</li> </ul>"},{"location":"app-development/data-flow-components/index.html#input-group","title":"Input Group","text":"<p>Components for retrieving and importing data:</p> <ul> <li>Input Steps - Overview of input steps</li> <li>Get Values from Connector - Retrieve data from connectors</li> <li>Subscribe to Connector - Subscribe to data updates</li> <li>Get Action Model - Retrieve action model</li> <li>Get Workflow Model - Retrieve workflow model</li> <li>Get Empty Model - Create empty data model</li> <li>Proxy Get Entry - Proxy entry retrieval</li> <li>Proxy Query Entry - Proxy query execution</li> <li>Get Raw Model - Retrieve raw data model</li> <li>Import File - Import data from files</li> </ul>"},{"location":"app-development/data-flow-components/index.html#model-transformation-group","title":"Model Transformation Group","text":"<p>Components for data transformation and processing:</p> <ul> <li>Model Transformation Steps - Overview of transformation steps</li> <li>Transform Model - Transform data models</li> <li>Join Models - Join multiple data models</li> <li>Extract Collections - Extract collection data</li> <li>Filter Source - Filter data sources</li> <li>Lookup Reference - Reference lookup</li> <li>Execute Script - Run custom scripts</li> <li>Query Entity by Filter - Filter-based queries</li> <li>Select Many - Multiple selection</li> <li>Get Entity by ID - Retrieve by identifier</li> <li>Load Catalogs by Key - Load catalog data</li> <li>Distinct - Get distinct values</li> <li>Group By - Group data</li> <li>Calculate Array - Array calculations</li> <li>Simple Math - Mathematical operations</li> <li>Execute Dataflow - Execute nested dataflow</li> <li>Get File Info - Retrieve file information</li> </ul>"},{"location":"app-development/data-flow-components/index.html#user-contexts-group","title":"User Contexts Group","text":"<p>Components for user management and authentication:</p> <ul> <li>User Contexts Steps - Overview of user context steps</li> <li>Register Context for Model - Register model context</li> <li>Register External User - External user registration</li> <li>Prepare External Keys - Prepare authentication keys</li> <li>Assign Context Role for Model - Assign roles</li> <li>Get One-Time Code for User - Generate OTP</li> <li>Confirm One-Time Code for User - Verify OTP</li> <li>Update or Create User Info - User information management</li> <li>Get User Info - Retrieve user data</li> <li>Login with Password - Password authentication</li> <li>Reset User Password Request - Password reset</li> <li>Confirm User Email Request - Email verification</li> <li>Send Templated Notification - Template-based notifications</li> <li>Send Notification - Send notifications</li> <li>Remove Assigned Roles for User - Remove user roles</li> </ul>"},{"location":"app-development/data-flow-components/index.html#output-group","title":"Output Group","text":"<p>Components for data output and actions:</p> <ul> <li>Output Steps - Overview of output steps</li> <li>Store Entry over Bus - Store data via message bus</li> <li>Update Entry - Update data entries</li> <li>Deferred Update Entry - Deferred updates</li> <li>Apply Deferred Update Operations - Apply deferred operations</li> <li>Execute API Call - External API calls</li> <li>Write Response - Write response data</li> <li>Form Action - Form submission actions</li> <li>Execute Workflow - Execute workflow</li> <li>Export to File - Export data to files</li> <li>Render Template - Template rendering</li> </ul>"},{"location":"app-development/data-flow-components/apply-deferred-update-operations.html","title":"Apply deferred update operations","text":""},{"location":"app-development/data-flow-components/apply-deferred-update-operations.html#apply-deferred-update-operations","title":"Apply deferred update operations","text":""},{"location":"app-development/data-flow-components/apply-deferred-update-operations.html#general-information","title":"General information","text":"<p>The \u201cApply Deferred Update Operations\u201d step is used for the bulk application of updates that have been prepared using the \u201cDeferred Update Entry\u201d series of steps. This step allows you to perform the accumulated update operations in an efficient manner by applying them all at once.</p>"},{"location":"app-development/data-flow-components/apply-deferred-update-operations.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Batch chunk size 1000 Size of the data batch to be processed Batch idle timeout in ms - Idle timeout in milliseconds between batches Parallel number of batches 0 Number of data batches processed in parallel"},{"location":"app-development/data-flow-components/apply-deferred-update-operations.html#cases","title":"Cases","text":"<ul> <li>Bulk Update Application: Ideal for scenarios where you need to update data in bulk, such as when you synchronize a large amount of data or when you need to quickly make changes to multiple system components.</li> <li>Performance Optimization: Improves performance for bulk updates via parallel processing and efficient management of data batches.</li> </ul>"},{"location":"app-development/data-flow-components/apply-deferred-update-operations.html#exceptions","title":"Exceptions","text":"<ul> <li>Update Sequence Management: It is important to ensure that updates are sequenced correctly, especially if the data in the different steps of the \u201cDeferred Update Entry\u201d are interrelated.</li> <li>Configuring Batch Processing Parameters: Parameters such as batch size and number of parallel batches must be carefully configured to avoid overloading the system and ensure that updates are performed efficiently.</li> </ul>"},{"location":"app-development/data-flow-components/apply-deferred-update-operations.html#application-scenario","title":"Application scenario","text":"<p>The component with a custom definition configures a data flow for updating records. Users start by extracting the action model using the \"Get action model\" step. Then, the \"Deferred update entry\" step is used for deferred updates of records, where users can specify the component, component ID, and field mappings. The \"Apply deferred update\" step allows configuring batch processing and parallel execution parameters. After completing these steps, the component is ready for updating, creating, or deleting records, which occurs on the frontend when interacting with the corresponding interface elements.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/assign-context-role-for-model.html","title":"Assign context role for model","text":""},{"location":"app-development/data-flow-components/assign-context-role-for-model.html#assign-context-role-for-model","title":"Assign context role for model","text":""},{"location":"app-development/data-flow-components/assign-context-role-for-model.html#general-information","title":"General information","text":"<p>The \u201cAssign Context Role for Model\u201d step is used to link a user or group of users to a specific role and context. This process requires that at least one role should be configured in the \u201cRoles\u201d section of the \u201cAccess\u201d menu. This step allows you to establish relations between users and roles in the context of a specific data model, thereby providing control over user access and permissions.</p>"},{"location":"app-development/data-flow-components/assign-context-role-for-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step UserId field - User ID field ContextId field - Context ID field Select contexts - Selecting the contexts to which the role will be linked"},{"location":"app-development/data-flow-components/assign-context-role-for-model.html#cases","title":"Cases","text":"<ul> <li>User Access Management: Used to assign roles to users determining their access and permissions within the system.</li> <li>Dynamic role management when interacting with UI: This step is effectively used to change or update users\u2019 roles in real time based on their actions and interactions with user interface elements. This makes it possible to adapt user access and permissions depending on specific actions or scenarios of using the system.</li> </ul>"},{"location":"app-development/data-flow-components/assign-context-role-for-model.html#exceptions","title":"Exceptions","text":"<ul> <li>Requirement for configured roles: For successful linking, the system must have the appropriate roles pre-configured.</li> <li>Dependence on ID accuracy: Accurate identification of user IDs and contexts is critical for the step to work correctly.</li> </ul>"},{"location":"app-development/data-flow-components/calculate-array.html","title":"Calculate array","text":""},{"location":"app-development/data-flow-components/calculate-array.html#calculate-array","title":"Calculate array","text":""},{"location":"app-development/data-flow-components/calculate-array.html#general-information","title":"General information","text":"<p>The \u201cCalculate Array\u201d step is designed to perform simple mathematical operations on arrays. This step is often used in conjunction with the \u201cGroup By\u201d step or to process data presented as arrays.</p> <p>This step allows you to perform various mathematical operations, such as minimum (min), maximum (max), sum, and average, on one or more fields in an array.</p>"},{"location":"app-development/data-flow-components/calculate-array.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Add operation min, max, sum, average The type of mathematical operation to perform on an array"},{"location":"app-development/data-flow-components/calculate-array.html#cases","title":"Cases","text":"<ul> <li>Mathematical processing of arrays: It is used to calculate key statistical indicators of a data array.</li> <li>Data analysis and processing: Suitable for scenarios where data arrays need to be aggregated or summarized.</li> </ul>"},{"location":"app-development/data-flow-components/calculate-array.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the type of data in the array: Requires that the data in the array be suitable for performing the selected mathematical operation.</li> <li>Restrictions on processing complex data: May not be suitable for complex operations that require advanced data analysis or processing.</li> </ul>"},{"location":"app-development/data-flow-components/confirm-one-time-code-for-user.html","title":"Confirm one-time code for user","text":""},{"location":"app-development/data-flow-components/confirm-one-time-code-for-user.html#confirm-one-time-code-for-user","title":"Confirm one-time code for user","text":""},{"location":"app-development/data-flow-components/confirm-one-time-code-for-user.html#general-information","title":"General information","text":"<p>The \u201cConfirm One-Time Code for User\u201d step is used to confirm the one-time code that was generated for the user in the previous \u201cGet One-Time Code for User\u201d step. This step is the key one in the two-factor authentication process, allowing you to verify the correctness of the code entered by the user to access the system.</p>"},{"location":"app-development/data-flow-components/confirm-one-time-code-for-user.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User code field - The field in which the user enters the received code for confirmation"},{"location":"app-development/data-flow-components/confirm-one-time-code-for-user.html#cases","title":"Cases","text":"<ul> <li>Two-Factor Authentication Confirmation: Applied to complete the two-factor authentication process by requiring the users to enter the code that was sent to them in the previous step.</li> <li>Enhancing Access Security: Used in scenarios where enhanced system access control is required to prevent unauthorized logins.</li> </ul>"},{"location":"app-development/data-flow-components/confirm-one-time-code-for-user.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the correctness of the code entered: The effectiveness of the step depends on the accuracy of entering the code by the user.</li> <li>Limited Code Validity: If the code expires, it must be re-issued, which may result in delays in authentication.</li> </ul>"},{"location":"app-development/data-flow-components/confirm-one-time-code-for-user.html#application-scenario","title":"Application scenario","text":"<p>The component creates a dataflow to confirm the user's one-time code. The Get action model step is used to retrieve the model data. Then, the code from the ForTestCode variable is cleaned of unnecessary characters and stored in the _code variable using the Execute script step. The Confirm one-time code for user step is utilized to confirm the one-time code using the _code value as the user's code. Finally, the result is passed through the Write response step.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/confirm-user-email-request.html","title":"Confirm user email request","text":""},{"location":"app-development/data-flow-components/confirm-user-email-request.html#confirm-user-email-request","title":"Confirm user email request","text":""},{"location":"app-development/data-flow-components/confirm-user-email-request.html#general-information","title":"General information","text":"<p>The \u201cConfirm User Email Request\u201d step is used to enable the user that was originally created with the \u201cDisabled\u201d flag. This process involves verifying the user via email using the \u201cSend Templated Notification\u201d step. The step requires an application domain with a public URI and a configured SMTP server to send email notifications.</p>"},{"location":"app-development/data-flow-components/confirm-user-email-request.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User info field - A field that contains information about the user User name - Name of the user whose confirmation is to be obtained Client for request - The client or application that initiates the confirmation request"},{"location":"app-development/data-flow-components/confirm-user-email-request.html#cases","title":"Cases","text":"<ul> <li>Enabling New Users: This step is used to enable users who have been registered as disabled by verifying their email. This provides an additional layer of verification and security.</li> <li>User Access Management: Suitable for systems that require user email verification before full access to system functionality can be granted.</li> </ul>"},{"location":"app-development/data-flow-components/confirm-user-email-request.html#exceptions","title":"Exceptions","text":"<ul> <li>Requirement of a configured SMTP server: A configured SMTP server is required for confirmation email notifications to be sent successfully.</li> <li>Dependency on application domain and public URI: This step requires an application domain with a public URI to ensure that the operation is correct and that the verification process is available to the user.</li> </ul>"},{"location":"app-development/data-flow-components/deferred-update-entry.html","title":"Deferred update entry","text":""},{"location":"app-development/data-flow-components/deferred-update-entry.html#deferred-update-entry","title":"Deferred update entry","text":""},{"location":"app-development/data-flow-components/deferred-update-entry.html#general-information","title":"General information","text":"<p>The \u201cDeferred Update Entry\u201d step is used to organize the deferred update of entries in a specific component. This step allows you to accumulate actions to create, update, or delete entries, which are then executed after the \u201cApply Deferred Update Operations\u201d step is enabled. In this way, multiple update operations can be collected.</p>"},{"location":"app-development/data-flow-components/deferred-update-entry.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Component - Component to be updated Field component key - Field with the component key to update Mark entry for deletion true, false Entry deletion mark Name field - Name of the field to be updated Fields mapping - Mapping fields between data flow and component"},{"location":"app-development/data-flow-components/deferred-update-entry.html#cases","title":"Cases","text":"<ul> <li>Data Batch Processing: Used to collect multiple data update operations and then execute them in a single transaction, improving performance and reducing the load on the system.</li> <li>Complex data management: Suitable for scenarios that require complex data update logic, including creating, modifying, and deleting entries within a single workflow.</li> </ul>"},{"location":"app-development/data-flow-components/deferred-update-entry.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for Subsequent Updates: All update operations accumulated by this step need to be enabled via the \u201cApply Deferred Update Operations\u201d step in order to perform them.</li> </ul>"},{"location":"app-development/data-flow-components/deferred-update-entry.html#application-scenario","title":"Application scenario","text":"<p>The component with a custom definition configures a data flow for updating records. Users start by extracting the action model using the \"Get action model\" step. Then, the \"Deferred update entry\" step is used for deferred updates of records, where users can specify the component, component ID, and field mappings. The \"Apply deferred update\" step allows configuring batch processing and parallel execution parameters. After completing these steps, the component is ready for updating, creating, or deleting records, which occurs on the frontend when interacting with the corresponding interface elements.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/distinct.html","title":"Distinct","text":""},{"location":"app-development/data-flow-components/distinct.html#distinct","title":"Distinct","text":""},{"location":"app-development/data-flow-components/distinct.html#general-information","title":"General information","text":"<p>The Distinct step is used to eliminate duplicate entries from the data stream, leaving only unique values. This process helps in optimizing data processing by eliminating duplicates and reducing the amount of data analyzed.</p>"},{"location":"app-development/data-flow-components/distinct.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step in the data flow Source step - Selecting the previous step Keys - Keys for checking uniqueness"},{"location":"app-development/data-flow-components/distinct.html#cases","title":"Cases","text":"<ul> <li>Data Cleaning: Removing of duplicate entries to simplify analysis.</li> <li>Preparation for aggregation: Pre-cleaning of data before performing aggregation operations.</li> </ul>"},{"location":"app-development/data-flow-components/distinct.html#exceptions","title":"Exceptions","text":"<ul> <li>Selection of keys: Incorrect selection of keys may result in the loss of important data.</li> <li>Loss of information: Risk of losing part of the data if the step is configured incorrectly.</li> </ul>"},{"location":"app-development/data-flow-components/distinct.html#application-scenario","title":"Application scenario","text":"<p>This component checks the availability of fields in the Distinct step. The \"Distinct\" button is clicked on the frontend. If the step works correctly, a \"execute\" line with a preview of the HTTP response should appear in the Network tab, containing data for three records.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/execute-api-call.html","title":"Execute API call","text":""},{"location":"app-development/data-flow-components/execute-api-call.html#execute-api-call","title":"Execute API call","text":""},{"location":"app-development/data-flow-components/execute-api-call.html#general-information","title":"General information","text":"<p>The \u201cExecute API Call\u201d step is used to interact with external systems via the API. This step can be configured for various types of requests, including receiving data (GET), sending data (POST/PUT), or deleting data (DELETE) in an external system. Depending on the context of use, this step may be one of the first steps in Dataflow to obtain data or one of the last steps to update data in external systems.</p>"},{"location":"app-development/data-flow-components/execute-api-call.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Result store field - A field for storing the ID of a created or processed entry System - Choosing an integration system Connector - Selecting a connector in the integration system Query path - EndPoint for the request Method name Get, Post, Put, Delete Type of request to complete Parameters mapping - Dynamic configuration for query filtering"},{"location":"app-development/data-flow-components/execute-api-call.html#cases","title":"Cases","text":"<ul> <li>Getting data from external sources: It is used to download data from external systems, which can be especially useful when integrating with external services or databases.</li> <li>Sending or updating data: Suitable for sending data to external systems or updating existing data, for example, when synchronizing changes made to dataflow.</li> <li>Deleting data: It can be used to delete data from external systems, which helps maintain the relevance and integrity of data in integrated systems.</li> </ul>"},{"location":"app-development/data-flow-components/execute-api-call.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for asynchronous processing: The step is performed asynchronously, which requires taking into account the response time of external systems and the potential impact on the data processing sequence.</li> <li>Connector configuration requirement: The effectiveness of the step depends on correctly configured integration systems and connectors, as well as on the accuracy of determining EndPoint and request parameters.</li> </ul>"},{"location":"app-development/data-flow-components/execute-api-call.html#application-scenario","title":"Application scenario","text":"<p>The component creates a simple integration for retrieving data, such as weather, through an API. In the data flow, steps are used to configure the API request, including executing a script to create API variables, calling the API, and saving the results. Then, the integration is selected and configured in the system, and the results are displayed on the frontend using a form linked to the script execution. The function in the component processes the retrieved data for user display.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/execute-dataflow.html","title":"Execute dataflow","text":""},{"location":"app-development/data-flow-components/execute-dataflow.html#execute-dataflow","title":"Execute dataflow","text":""},{"location":"app-development/data-flow-components/execute-dataflow.html#general-information","title":"General information","text":"<p>The Execute Dataflow step is used to call Dataflow from any published component. This step allows you to run an additional Dataflow in the context of the current data processing process.</p> <p>When used with an array field obtained from an external source or from an array field (property), the step parses this array and starts parallel processing of each record or object contained in the array.</p>"},{"location":"app-development/data-flow-components/execute-dataflow.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Component - The component from which Dataflow is called Dataflow - Dataflow name to be executed Result store field - Field for saving the Dataflow execution result"},{"location":"app-development/data-flow-components/execute-dataflow.html#cases","title":"Cases","text":"<ul> <li>Updating data from other dataflows: The \u201cExecute Dataflow\u201d step is ideal for situations where you want to update fields in the current model with data collected or processed in other dataflows. This makes it possible to effectively integrate and synchronize data between different processes and components.</li> <li>External Dataflow call: Used to integrate and launch additional Dataflows as part of the current data processing process.</li> </ul>"},{"location":"app-development/data-flow-components/execute-dataflow.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the correctness of other dataflows: The effectiveness of the \u201cExecute Dataflow\u201d step directly depends on the accuracy and reliability of data obtained from other dataflows. All related dataflows should be carefully configured and tested to ensure that the updated data is correct and up to date.</li> </ul>"},{"location":"app-development/data-flow-components/execute-dataflow.html#application-scenario","title":"Application scenario","text":"<p>This component creates a dataflow to perform operations on the data of the current component. It includes Get action model steps to retrieve the dataflow model and Execute dataflow steps to execute the dataflow with appropriate parameters such as selecting the current component, choosing the dataflow to execute, configuring result fields, and displaying definitions from the data component. This component allows data operations on the component directly from the application interface.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/execute-script.html","title":"Execute script","text":""},{"location":"app-development/data-flow-components/execute-script.html#execute-script","title":"Execute script","text":""},{"location":"app-development/data-flow-components/execute-script.html#general-information","title":"General information","text":"<p>The \u201cExecute Script\u201d step is designed to execute Python scripts using standard Python libraries. </p> <p>This step allows you to execute Python scripts of any complexity while working with the current dataflow model. Using the script, you can change the model by adding new variables or changing the values of existing ones.</p> <p>Examples of use: - To get a variable value from the \u201cget action model\u201d step: <code>item ['data'] ['Property_name']</code> - To create a new variable in the script: <code>item ['Property_name']</code></p>"},{"location":"app-development/data-flow-components/execute-script.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step"},{"location":"app-development/data-flow-components/execute-script.html#cases","title":"Cases","text":"<ul> <li>Customization of data processing: Suitable for complex data processing logic that cannot be implemented with standard dataflow tools.</li> <li>Adding and modifying data: Suitable for scenarios that require adding new data or modifying existing data in the model.</li> </ul>"},{"location":"app-development/data-flow-components/execute-script.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for Python proficiency: Requires knowledge of Python and an understanding of the logic of working with dataflow.</li> <li>Variable typing: Strict typing of variables may require additional attention when writing scripts. Supported types: <code>@number</code>, <code>@integer</code>, <code>@string</code>, <code>@uuid</code>, <code>@boolean</code>, <code>@uri</code>, <code>@date</code>, <code>@date-time</code>, <code>@time</code>, <code>@catalog</code>, <code>@array</code>.</li> </ul>"},{"location":"app-development/data-flow-components/execute-script.html#application-scenario","title":"Application scenario","text":"<p>This component showcases various usage scenarios of the Execute Script step within a data flow, including creating new variables of different types and modifying values of available fields in the data model.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/execute-workflow.html","title":"Execute Workflow","text":""},{"location":"app-development/data-flow-components/execute-workflow.html#execute-workflow","title":"Execute Workflow","text":""},{"location":"app-development/data-flow-components/execute-workflow.html#general-information","title":"General information","text":"<p>The \u201cExecute Workflow\u201d step is used to activate and execute a specific workflow in the system.</p>"},{"location":"app-development/data-flow-components/execute-workflow.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Component - The component within which the workflow is performed Workflow - Name of the workflow to be completed Component entry field - The field in the component used to transfer data to workflow"},{"location":"app-development/data-flow-components/execute-workflow.html#cases","title":"Cases","text":"<ul> <li>Dynamic data flow control: It can be used to launch specific workflows based on data obtained from previous Dataflow steps, which allows you to create flexible and adaptive data management systems.</li> </ul>"},{"location":"app-development/data-flow-components/execute-workflow.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on data correctness: To avoid errors in workflow execution, it is necessary to ensure that the data sent to the workflow is accurate and complete.</li> <li>Coordination between Dataflow and Workflow: It is important to carefully configure the interaction between Dataflow and Workflow to ensure a smooth and correct transfer of data and commands between them.</li> </ul>"},{"location":"app-development/data-flow-components/execute-workflow.html#application-scenario","title":"Application scenario","text":"<p>The created component serves as an interface for interacting with the data model containing a field \"user_name\" of type string. This component includes functionality for updating the data model using the Update model step within the Workflow. To interact with the component, the user can input their name, click a button, after which the data will be sent, and the name will be displayed in the data grid after refreshing the page.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/export-to-file.html","title":"Export to File","text":""},{"location":"app-development/data-flow-components/export-to-file.html#export-to-file","title":"Export to File","text":""},{"location":"app-development/data-flow-components/export-to-file.html#general-information","title":"General information","text":"<p>The \u201cExport to File\u201d step is used to export data from the internal Dataflow model to a structured file. This step supports the creation of files in CSV, Excel and JSON formats, allowing you to efficiently transfer and distribute processed data.</p>"},{"location":"app-development/data-flow-components/export-to-file.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source Step - Selecting from previous steps for data source Output file type Csv, Excel, JSON Export file format File name - Export file name Column separator ; (default) CSV file separator (default \";\") Worksheet name (If Iput file type = Excel) - Sheet name in Excel file Fields mapping - Mapping Dataflow model fields and file structure"},{"location":"app-development/data-flow-components/export-to-file.html#cases","title":"Cases","text":"<ul> <li>Data Distribution: Ideal for creating reports, distributing information to clients or partners, and transferring data between different systems or departments.</li> <li>Data Archiving: Can be used to store important information in a structured and easily accessible format.</li> <li>Integration with other systems: Allows you to prepare data for subsequent integration or processing by other systems that support CSV, Excel or JSON formats.</li> </ul>"},{"location":"app-development/data-flow-components/export-to-file.html#exceptions","title":"Exceptions","text":"<ul> <li>File format compatibility: It is important to fine-tune export settings to ensure that the generated files are compatible with the expectations and requirements of end users or systems.</li> <li>Optimizing performance for large volumes of data: When exporting large volumes of data, you need to consider performance and possible file size restrictions (default 1 MB).</li> </ul>"},{"location":"app-development/data-flow-components/export-to-file.html#application-scenario","title":"Application scenario","text":"<p>The created component serves as a tool for exporting data from the system. It includes several steps such as fetching the data model, filtering, and exporting to an Excel file. The user can customize data filtering before exporting and download the results in a convenient format using the button on the user interface.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/extract-collections.html","title":"Extract collection","text":""},{"location":"app-development/data-flow-components/extract-collections.html#extract-collection","title":"Extract collection","text":""},{"location":"app-development/data-flow-components/extract-collections.html#general-information","title":"General information","text":"<p>The \u201cExtract Collection\u201d step is used to convert an array field to a flat list. This field can be obtained either from an external source or from a field (property) of an array component.</p> <p>On this step, the array is parsed and the processing of each array element (entry or object) is started as a separate internal dataflow. Each such thread is executed independently of each other. Data flows parsed using the \u201cExtract Collection\u201d step can be reassembled via the \u201cGroup by\u201d step.</p>"},{"location":"app-development/data-flow-components/extract-collections.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Model path - Path to an array field in the data model"},{"location":"app-development/data-flow-components/extract-collections.html#cases","title":"Cases","text":"<ul> <li>Data Array Processing: Used to extract and process each element of the data array independently.</li> <li>Splitting and Subsequent Grouping: Suitable for scenarios where you need to split complex data structures into simpler elements for further processing and analysis.</li> </ul>"},{"location":"app-development/data-flow-components/extract-collections.html#exceptions","title":"Exceptions","text":"<ul> <li>Need to specify the exact source and path: Incorrect indication of the source or path to the array field can lead to errors in data processing.</li> </ul>"},{"location":"app-development/data-flow-components/extract-collections.html#application-scenario","title":"Application scenario","text":"<p>This component allows processing client warehouse data by adding new records using extract collection and execute script steps. After the data flow execution, each record receives additional field data. </p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/filter-source.html","title":"Filter source","text":""},{"location":"app-development/data-flow-components/filter-source.html#filter-source","title":"Filter source","text":""},{"location":"app-development/data-flow-components/filter-source.html#general-information","title":"General information","text":"<p>The \u201cFilter Source\u201d step is used to filter the data stream in dataflow. It allows you to branch data streams based on the value of the selected field and the specified test operator, such as equal, not equal, greater, and less.</p>"},{"location":"app-development/data-flow-components/filter-source.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Src field - Field to be filtered Operator equal, not equal, greater, less Operator for comparing field values Compare with null true, false Indicates whether to compare with null Filter value - Value to be filtered"},{"location":"app-development/data-flow-components/filter-source.html#cases","title":"Cases","text":"<ul> <li>Data Stream Branching: Used to split a data stream based on specific conditions defined in the filter.</li> <li>Data Segmentation: Suitable for situations where you need to treat different segments of data differently depending on specified criteria.</li> </ul>"},{"location":"app-development/data-flow-components/filter-source.html#exceptions","title":"Exceptions","text":"<ul> <li>Filter Setting Accuracy: An incorrectly set filter can result in the loss of important data or the inclusion of unnecessary data in processing.</li> <li>Dependency on the selected field: The effectiveness of filtering depends on the correct choice of field and the appropriate comparison operator.</li> </ul>"},{"location":"app-development/data-flow-components/filter-source.html#application-scenario","title":"Application scenario","text":"<p>This component is an interface with three buttons: <code>ExecuteFilterSource</code>, <code>ExecuteFilterSourceNotEqual</code>, and <code>ExecuteFilterSourceGreat</code>, each of which triggers a data flow depending on the input in the <code>First</code> field. Different test scenarios include checking conditions for equality, inequality, and greater/less than the specified value.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/form-action.html","title":"Form action","text":""},{"location":"app-development/data-flow-components/form-action.html#form-action","title":"Form action","text":""},{"location":"app-development/data-flow-components/form-action.html#general-information","title":"General information","text":"<p>The \u201cForm Action\u201d step is used for performing various actions in the user interface (UI) in the frontend of the application, such as opening pages, executing scripts, opening modal windows, etc. The step is the link between the server logic and the user interface allowing you to dynamically control the behavior of the UI.</p>"},{"location":"app-development/data-flow-components/form-action.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step Multiselect of Catalog Selection from the previous steps Form action Execute script, Open page, Open component, Open Sidebar, Open Modal, Open file in new tab UI command type Method name (If \u2018Execute script\u2019 is selected) Name of the script function to execute Open page (If \u2018Open page\u2019 is selected) List of pages to open File info field (If \u2018Open file\u2019 in new tab is selected) File information field to open Open sidebar Settings for the sidebar Configuring to open the sidebar Open modal Settings for modal windows Configuring to open a modal window"},{"location":"app-development/data-flow-components/form-action.html#cases","title":"Cases","text":"<ul> <li>Dynamic UI Element Management: Using an \u201cOpen Sidebar\u201d or \u201cOpen Modal\u201d allows you to dynamically display sidebars or modals with additional information, forms, or other content, which increases the interactivity and usability of the interface.</li> <li>Data Grid Update: In a script where the user loads some new data, you can add a refresh function to the form and the datagrid will be updated without refreshing the page.</li> </ul>"},{"location":"app-development/data-flow-components/form-action.html#exceptions","title":"Exceptions","text":"<ul> <li>Write Response Step Required: After performing actions such as opening a page or file, you need to add a \u201cWrite Response\u201d step to complete the Dataflow correctly.</li> <li>Dependency on Previous Steps: When using certain actions, such as \u201cOpen file in new tab\u201d, you need to have an appropriate file prepared by the previous steps.</li> </ul>"},{"location":"app-development/data-flow-components/form-action.html#application-scenario","title":"Application scenario","text":"<p>This component employs various methods in the Form action step to interact with the user interface on the frontend. Users can perform different actions such as executing a script (Execute Script), opening a page (Open page) or a component (Open component), downloading a file (Download file), and opening a file in a new tab (Open file in new tab). After these actions are executed, the data is processed and sent back to the frontend using the Write response step.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/get-action-model.html","title":"Get Action Model","text":""},{"location":"app-development/data-flow-components/get-action-model.html#get-action-model","title":"Get Action Model","text":""},{"location":"app-development/data-flow-components/get-action-model.html#general-information","title":"General information","text":"<p>The \u201cGet Action Model\u201d step is designed to extract an action model from a specific source or system. This step can be used to obtain data about specific actions or processes that are required for further processing or analysis within the dataflow.</p>"},{"location":"app-development/data-flow-components/get-action-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Validate input values true, false Specifies whether the input values should be checked for correctness before processing"},{"location":"app-development/data-flow-components/get-action-model.html#cases","title":"Cases","text":"<ul> <li>UI Integration: Often used as an initial step in dataflow, especially when dataflow is enabled from the UI, e.g. via pressing a button. Allows you to get the current state of the component data at the time of enabling.</li> <li>Automatic Data Transfer from UI: When data transfer enabled from UI elements such as buttons, the platform automatically transmits the current data of the component, including changes made by the user.</li> </ul>"},{"location":"app-development/data-flow-components/get-action-model.html#exceptions","title":"Exceptions","text":"<ul> <li>Data Retrieval Limitations: The step retrieves only the fields (properties) data of the component. To get the variables set in the Component Script, you need to use other steps, such as \u201cGet raw model\u201d.</li> </ul>"},{"location":"app-development/data-flow-components/get-action-model.html#application-scenario","title":"Application scenario","text":"<p>The component is a system for adding and displaying data using various field types. It includes the capability to add fields of different types in the definition and provides a front-end interface for inputting values, as well as displaying data in a datagrid with the ability to refresh the page. This component utilizes the following data flow steps: Get action model, Update entry, Write response.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/get-empty-model.html","title":"Get Empty Model","text":""},{"location":"app-development/data-flow-components/get-empty-model.html#get-empty-model","title":"Get Empty Model","text":""},{"location":"app-development/data-flow-components/get-empty-model.html#general-information","title":"General information","text":"<p>The \u201cGet Empty Model\u201d step is used in dataflow scripts that do not require data model retrieval at the input. It is often used when dataflow is called to run regular operations, such as generating reports, especially if they are scheduled (for example, by cron).</p>"},{"location":"app-development/data-flow-components/get-empty-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Validate input values true, false Indicates that input values should be checked for correctness before processing"},{"location":"app-development/data-flow-components/get-empty-model.html#cases","title":"Cases","text":"<ul> <li>Regular Operations: Ideal for dataflow scheduled to run regularly without the need for input data.</li> <li>Dataflow Initial State: Used to initialize dataflow without pre-set data, allowing developers to create and populate the data model themselves using subsequent steps.</li> </ul>"},{"location":"app-development/data-flow-components/get-empty-model.html#exceptions","title":"Exceptions","text":"<ul> <li>No Input Data: When using this step, the input data are not provided in the dataflow. It means that the developer has to initialize and populate the data model in subsequent steps.</li> </ul>"},{"location":"app-development/data-flow-components/get-empty-model.html#application-scenario","title":"Application scenario","text":"<p>This component is an interface for adding a new name via an input field on the front end, then updating the data model and displaying the result in a datagrid. The data flow in the component allows adding a new name to the model and updating the record in the datagrid.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/get-entity-by-id.html","title":"Get entity by id","text":""},{"location":"app-development/data-flow-components/get-entity-by-id.html#get-entity-by-id","title":"Get entity by id","text":""},{"location":"app-development/data-flow-components/get-entity-by-id.html#general-information","title":"General information","text":"<p>The \u201cGet Entity by ID\u201d step is used to get a component item by its unique identifier (ID). This step is usually used in combination with other steps, such as \u201cLookup\u201d or \u201cUpdate Entry\u201d, which return an ID that is suitable for this step.</p>"},{"location":"app-development/data-flow-components/get-entity-by-id.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Src field - Field containing the ID to be searched Dst field name - Field where the result will be recorded Component - Component that is being searched"},{"location":"app-development/data-flow-components/get-entity-by-id.html#cases","title":"Cases","text":"<ul> <li>Data Search by ID: Used to accurately retrieve a specific entry by using the ID from the component.</li> </ul>"},{"location":"app-development/data-flow-components/get-entity-by-id.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on ID Accuracy: The exact ID must be specified and available in the source data in order for the query to be successful.</li> <li>Handling Inconsistencies: If there is no entry with the specified ID, the step may return an empty result.</li> </ul>"},{"location":"app-development/data-flow-components/get-entity-by-id.html#application-scenario","title":"Application scenario","text":"<p>This component allows adding a catalog-type field and creating a data flow to retrieve an entity by its identifier. The catalog-type field is placed on the page for selecting the corresponding value from the catalog. The data flow includes a 'Get action model' step for initialization, a 'Get entity by id' step for retrieving the entity by identifier using the selected value from the catalog, and a 'Write response' step for outputting the result.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/get-file-info.html","title":"Get file info","text":""},{"location":"app-development/data-flow-components/get-file-info.html#get-file-info","title":"Get file info","text":""},{"location":"app-development/data-flow-components/get-file-info.html#general-information","title":"General information","text":"<p>The \u201cGet File Info\u201d step in Dataflow is used to retrieve information about a file by its ID. This step provides access to various properties of the file, including its name, extension (type), size, date of updating, creation, author of the initial and updated file.</p>"},{"location":"app-development/data-flow-components/get-file-info.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Src field - Field containing the file ID Dst field name - Field where the information about the file will be recorded"},{"location":"app-development/data-flow-components/get-file-info.html#cases","title":"Cases","text":"<ul> <li>File Information Extraction: Used to obtain detailed information about a file, which can be useful for subsequent data processing or analysis.</li> <li>Preparing Data for Additional Processing: The obtained information about the file can be used in subsequent steps, such as \u201cExecute Script\u201d or \u201cFilter Source\u201d, to perform specific operations depending on the properties of the file.</li> </ul>"},{"location":"app-development/data-flow-components/get-file-info.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the Accuracy of the Data Source: The accuracy of the information obtained depends on the accuracy and relevance of the data in the source.</li> <li>Limited Information: The step provides only basic information about the file, and may not include some specific or additional data.</li> </ul>"},{"location":"app-development/data-flow-components/get-one-time-code-for-user.html","title":"Get one-time code for user","text":""},{"location":"app-development/data-flow-components/get-one-time-code-for-user.html#get-one-time-code-for-user","title":"Get one-time code for user","text":""},{"location":"app-development/data-flow-components/get-one-time-code-for-user.html#general-information","title":"General information","text":"<p>The \u201cGet One-Time Code for User\u201d step is used to generate and send a one-time code for logging in as part of two-factor authentication. This step works in conjunction with the \u201cConfirm One-Time Code for User\u201d step and is usually applied using the \u201cSend Templated Notification\u201d functionality.</p>"},{"location":"app-development/data-flow-components/get-one-time-code-for-user.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User name - Name or ID of the user for whom the code is generated Client for request - Client or application that initiates the confirmation request Code life time - The lifetime of a code"},{"location":"app-development/data-flow-components/get-one-time-code-for-user.html#cases","title":"Cases","text":"<ul> <li>Two-Factor Authentication: Used to provide an extra layer of security when logging in by generating a temporary code that the user must confirm.</li> <li>Enhanced Login Security: Suitable for scenarios where enhanced security measures are required to prevent unauthorized access to the system.</li> </ul>"},{"location":"app-development/data-flow-components/get-one-time-code-for-user.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on Accuracy of User Data: The accuracy and relevance of user information is critical for the successful generation and sending of a one-time code.</li> <li>Code Lifetime Management: You must configure the code lifetime correctly to ensure that your code is up-to-date and avoid user access issues.</li> </ul>"},{"location":"app-development/data-flow-components/get-one-time-code-for-user.html#application-scenario","title":"Application scenario","text":"<p>The component adds a new string definition ForTestCode. A dataflow is created where a one-time code for the user is obtained through Get action model and Get user info steps. The Execute script step is used to pass this code into the new_code variable, which is then stored in the ForTestCode definition of the component and displayed in a modal window.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/get-raw-model.html","title":"Get raw model","text":""},{"location":"app-development/data-flow-components/get-raw-model.html#get-raw-model","title":"Get raw model","text":""},{"location":"app-development/data-flow-components/get-raw-model.html#general-information","title":"General information","text":"<p>The \u201cGet Raw Model\u201d step is used in a dataflow, which requires processing a custom data model that does not correspond to the standard component model, workflow, or other standard options. Typical use cases include dataflow called from a Component Script with variables defined within the script, as well as processing form data within a multi-component structure.</p>"},{"location":"app-development/data-flow-components/get-raw-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Validate input values true, false Indicates that input values should be checked for correctness prior to processing"},{"location":"app-development/data-flow-components/get-raw-model.html#cases","title":"Cases","text":"<ul> <li>Integration with Component Script: Used for dataflow called from Component Script when specific variables or data are required.</li> <li>Processing of Multi-Component Form Data: Suitable for scripts where dataflows work with data obtained from forms in a multi-component structure.</li> </ul>"},{"location":"app-development/data-flow-components/get-raw-model.html#exceptions","title":"Exceptions","text":"<ul> <li>Model Configuration Requirement: You must preconfigure the data model in JSON format.</li> <li>Model Format Features: Improper model configuration may result in incorrect data processing or dataflow errors.</li> </ul>"},{"location":"app-development/data-flow-components/get-user-info.html","title":"Get user info","text":""},{"location":"app-development/data-flow-components/get-user-info.html#get-user-info","title":"Get user info","text":""},{"location":"app-development/data-flow-components/get-user-info.html#general-information","title":"General information","text":"<p>The \u201cGet User Info\u201d step is used to obtain data about the platform user, such as email, first and last name, for further processing in the current dataflow. This step is required for most user operations except creating a new user.</p> <p>Obtaining User Information 1. Using the \u2018Get user info from request\u2019 flag: The step will attempt to retrieve data about the current user. For it to work correctly, it is necessary that the dataflow is called on behalf of a specific user (for example, from a request form or via a Proxy request). If called on behalf of the platform (e.g. in Input dataflow), the result will be null. 2. Without the \u2018Get user info from request\u2019 flag: The user can be defined:    - Via the system name, using a String parameter of the current dataflow model.    - Via a link to the user info directory, for example, creatorSubject or changeAuthor fields.</p>"},{"location":"app-development/data-flow-components/get-user-info.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Get user info from request - Flag to get information about the current user User info field - User identification field User name - Name of the user Result store field - Field for saving the obtained information about the user"},{"location":"app-development/data-flow-components/get-user-info.html#cases","title":"Cases","text":"<ul> <li>Retrieving User Data for Processing: Used to extract user information for subsequent use in dataflow.</li> <li>Send Personalized Notifications: In cases where you need to send personalized email notifications to users, the \u201cGet User Info\u201d step is used to get their email addresses. This information is then passed to the step designed for sending notifications.</li> </ul>"},{"location":"app-development/data-flow-components/get-user-info.html#exceptions","title":"Exceptions","text":"<ul> <li>User Not Found Handling: In cases when the user cannot be identified, the result will be null, which requires additional processing in the dataflow.</li> </ul>"},{"location":"app-development/data-flow-components/get-user-info.html#application-scenario","title":"Application scenario","text":"<p>The \"Get user info\" component is designed to retrieve information about a user. Within a dataflow, this step is used to query user data based on specified criteria, such as a username or other identifying information. For example, within a dataflow, you can specify a user's name to retrieve information about them and then use this information for further actions, such as displaying it on a screen or updating a database.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/get-values-from-connector.html","title":"Get values from connector","text":""},{"location":"app-development/data-flow-components/get-values-from-connector.html#get-values-from-connector","title":"Get values from connector","text":""},{"location":"app-development/data-flow-components/get-values-from-connector.html#general-information","title":"General information","text":"<p>The \u201cGet values from the connector\u201d step allows you to retrieve data via a query to external systems using the configured connectors. The step can be called by schedule or on behalf of the user.</p>"},{"location":"app-development/data-flow-components/get-values-from-connector.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step System Multiselect of Catalog Contains preconfigured integration systems Connector Multiselect of Catalog Contains pre-configured connectors in the integration system Query path Multiselect of Catalog Contains the \u201cEndPoint\u201d to be accessed Method name Get, Post, Put, Delete Type of request to be executed Parameters mapping - A dynamic entity that allows you to filter a request via a selected API"},{"location":"app-development/data-flow-components/get-values-from-connector.html#cases","title":"Cases","text":"<ul> <li>Scheduled Updating of Data: The step is used to automatically update data in the Input dataflow on a scheduled basis via cron ensuring getting timely and up-to-date information.</li> <li>Individual Query Customization: The step is configured to send specific queries to different external systems, allowing for flexible integration and processing of data from multiple sources.</li> <li>Dataflow Optimization: The step is efficiently used to extract data from external systems minimizing the need for manual processing and improving dataflow performance.</li> </ul>"},{"location":"app-development/data-flow-components/get-values-from-connector.html#exceptions","title":"Exceptions","text":"<ul> <li>Query Methods: Although various query methods (Get, Post, Put, Delete) are supported, careful customization is required on a case-by-case basis, taking into account the specific features of the external system and data type.</li> <li>Automation with Limitations: The ability to automatically call a scheduled step provides convenience, but requires fine-tuning of parameters and checking the accessibility of external systems.</li> </ul>"},{"location":"app-development/data-flow-components/get-values-from-connector.html#application-scenario","title":"Application scenario","text":"<p>This component handles character data. We create five data models for their attributes: character_id, character_name, character_species, character_status, and gender. Then, we select an integration, for example, Rick and Morty, and add the following steps: Get values from connector, Extract collection, Store entry over bus, and Write response.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/get-workflow-model.html","title":"Get workflow model","text":""},{"location":"app-development/data-flow-components/get-workflow-model.html#get-workflow-model","title":"Get workflow model","text":""},{"location":"app-development/data-flow-components/get-workflow-model.html#general-information","title":"General information","text":"<p>The \u201cGet Workflow Model\u201d step is used exclusively in dataflows that are called from a workflow. It allows you to get the model and data from the calling workflow within the current dataflow.</p>"},{"location":"app-development/data-flow-components/get-workflow-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Validate input values true, false Indicates that input values should be checked for correctness before processing"},{"location":"app-development/data-flow-components/get-workflow-model.html#cases","title":"Cases","text":"<ul> <li>Dataflow and Workflow Integration: Allows you to integrate dataflow with workflow providing access to the model and data of the calling workflow.</li> </ul>"},{"location":"app-development/data-flow-components/get-workflow-model.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Use: The step is not intended for use in Input dataflow.</li> </ul>"},{"location":"app-development/data-flow-components/get-workflow-model.html#application-scenario","title":"Application scenario","text":"<p>The component allows you to create a data flow for updating a record in the source data component. It includes steps such as Get workflow model to obtain the workflow model, Update entry to update the record with the appropriate parameters set, and Write response to output the result. This component can be used to update data in the source component using workflows and UI elements.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/group-by.html","title":"Group By","text":""},{"location":"app-development/data-flow-components/group-by.html#group-by","title":"Group By","text":""},{"location":"app-development/data-flow-components/group-by.html#general-information","title":"General information","text":"<p>The \u201cGroup By\u201d step is used to collect and group data split in previous steps, for example, using the \u201cExtract Collection\u201d. The main function of this step is to group data by specific keys specified by the user. The step collects the split data and combines only the entries that match the specified keys.</p>"},{"location":"app-development/data-flow-components/group-by.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Keys - Keys used to group data"},{"location":"app-development/data-flow-components/group-by.html#cases","title":"Cases","text":"<ul> <li>Combining Split Data: Used to combine data split in the previous steps, such as the \u201cExtract Collection\u201d, using specific keys.</li> <li>Data Segmentation and Analysis: Suitable for cases where it is necessary to analyze data according to specific categories or criteria.</li> </ul>"},{"location":"app-development/data-flow-components/group-by.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on Grouping Keys: The accuracy and relevance of the keys are critical to properly grouping the data.</li> <li>Difficulty in Data Processing and Analysis: Grouping can be difficult if the data structure is varied or the keys do not identify groups uniquely.</li> </ul>"},{"location":"app-development/data-flow-components/group-by.html#application-scenario","title":"Application scenario","text":"<p>This component checks the availability of fields in the Group By step. In the dataflow, first, a Get action model step and Group By step are added. Then, on the frontend, the imported component is opened, and the \"Network\" tab in the browser developer tools is opened. After that, the \"Group by\" button is clicked on the frontend. If the step works correctly, a \"execute\" line with a preview of the HTTP response should appear in the Network tab, containing data with the key \"ETO test123\" and their aggregation.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/import-file.html","title":"Import file","text":""},{"location":"app-development/data-flow-components/import-file.html#import-file","title":"Import file","text":""},{"location":"app-development/data-flow-components/import-file.html#general-information","title":"General information","text":"<p>The \u201cImport File\u201d step is used to import data from .csv, Excel or JSON files. The data is imported line by line, mapping to the format described in \u201cFields Mapping\u201d. To import a file, you should load the file into the File type field and specify this field in the \"File Info Field\" parameter.</p>"},{"location":"app-development/data-flow-components/import-file.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step File info field - Field containing the file to import Input file type .csv, .xlsx, .json File format for import Column separator ; Column separator for CSV file First lines to ignore 0 Number of first lines to ignore in the file Fields mapping - Mapping component fields to file columns"},{"location":"app-development/data-flow-components/import-file.html#cases","title":"Cases","text":"<ul> <li>Import Tabular Data: Used to load data from CSV or Excel files, customizing the mapping between file columns and component fields.</li> <li>Import Structured Data: Suitable for importing JSON files containing structured data.</li> </ul>"},{"location":"app-development/data-flow-components/import-file.html#exceptions","title":"Exceptions","text":"<ul> <li>Incorrect Fields Mapping: Errors in the \u201cFields Mapping\u201d setting may result in incorrect data import.</li> <li>Ignore Uninformative Rows: You must specify exactly the number of rows to ignore before you start importing data.</li> </ul>"},{"location":"app-development/data-flow-components/import-file.html#application-scenario","title":"Application scenario","text":"<p>This component is an interface for uploading files in CSV and XLSX formats. It includes fields for three CSV data model fields and three XLSX data model fields, as well as one field for file upload. Two data flows are used for file import, script execution, and data storage.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/input-steps.html","title":"Input Steps","text":""},{"location":"app-development/data-flow-components/input-steps.html#input-groupseparator","title":"INPUT GROUP|separator","text":"<ul> <li>Get values from connector</li> <li>Subscribe to connector</li> <li>Get action model</li> <li>Get workflow model</li> <li>Get empty model</li> <li>Proxy get entry</li> <li>Proxy query entry</li> <li>Get raw model</li> <li>Import file</li> </ul>"},{"location":"app-development/data-flow-components/join-modes.html","title":"Join models","text":""},{"location":"app-development/data-flow-components/join-modes.html#join-models","title":"Join models","text":""},{"location":"app-development/data-flow-components/join-modes.html#general-information","title":"General information","text":"<p>The \u201cJoin Models\u201d step is designed to merge data from two different sources. It adds data from the \u201cRight step\u201d source to data from a \u201cLeft step\u201d source if matching entries are found in both sources.</p> <p>The step creates a new data model by merging the data flows defined in the \u201cLeft step\u201d and \u201cRight step\u201d parameters. The step waits for both flows to finish processing, and then sorts and merges the data.</p>"},{"location":"app-development/data-flow-components/join-modes.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Left step - Data source for the left side of the merged flows Right step - Data source for the right side of the merged flows Left key - Key to merging data from the left source Right key - Key to merging data from the right source Map - Mapping fields between left and right sources"},{"location":"app-development/data-flow-components/join-modes.html#cases","title":"Cases","text":"<ul> <li>Merging Data Flows: Used to merge two different data flows into one model, allowing you to analyze and process the merged data.</li> <li>Data Enrichment: It is used to add additional information from one data set to another, thereby improving the completeness of the information.</li> </ul>"},{"location":"app-development/data-flow-components/join-modes.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for an Exact Merging Key: Errors in defining the \u201cLeft key\u201d and \u201cRight key\u201d can lead to incorrect or inefficient data merging.</li> </ul>"},{"location":"app-development/data-flow-components/join-modes.html#application-scenario","title":"Application scenario","text":"<p>This component allows testing and verifying the functionality of a data flow where data is merged from different sources. It provides field mapping and data merge verification on the frontend and in the HTTP response preview. </p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/load-catalogs-by-key.html","title":"Load catalogs by key","text":""},{"location":"app-development/data-flow-components/load-catalogs-by-key.html#load-catalogs-by-key","title":"Load catalogs by key","text":""},{"location":"app-development/data-flow-components/load-catalogs-by-key.html#general-information","title":"General information","text":"<p>The \u201cLoad Catalogs by Key\u201d step works similar to the \u201cGet Entity by ID\u201d step, but instead of requiring a specific component ID, it automatically identifies any Catalog type field in the data model. Depending on the user's choice, the step retrieves the full entry linked with the selected Catalog type field. Thus, it allows you to get complete information from any link in the data without having to specify a specific ID.</p>"},{"location":"app-development/data-flow-components/load-catalogs-by-key.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step"},{"location":"app-development/data-flow-components/load-catalogs-by-key.html#cases","title":"Cases","text":"<ul> <li>Automatic Identification and Downloading of the Linked Data: Used to identify and automatically load data linked with Catalog fields.</li> <li>Flexible Data Extraction: Suitable for scripts that require flexibility in selecting and extracting data from various related components.</li> </ul>"},{"location":"app-development/data-flow-components/load-catalogs-by-key.html#exceptions","title":"Exceptions","text":"<ul> <li>Excessive Load When Working with a Large Number of Catalogs: If there is a large number of catalogs being opened, it may take additional time to process them.</li> <li>Unjustified Replacement of the \u201cGet entity by ID\u201d step with the \u201cLoad catalogs by key\u201d step: If the number of linked catalogs does not exceed a few, it is better to use the \u201cGet entity by ID\u201d step for better performance.</li> </ul>"},{"location":"app-development/data-flow-components/load-catalogs-by-key.html#application-scenario","title":"Application scenario","text":"<p>This component allows you to create a data flow starting from obtaining an empty data model. Then, it is used to retrieve the record identifier with catalogs, after which it loads these catalogs and outputs their data on the frontend.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/login-with-password.html","title":"Login with password","text":""},{"location":"app-development/data-flow-components/login-with-password.html#login-with-password","title":"Login with password","text":""},{"location":"app-development/data-flow-components/login-with-password.html#general-information","title":"General information","text":"<p>The \u201cLogin with Password\u201d step is used to create a user session based on his username and password. This step allows the user to be authorized into the system by verifying the provided credentials and, if verified successfully, creating a user session.</p>"},{"location":"app-development/data-flow-components/login-with-password.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User name - Login username User password - User password Client for request - Client or application that initiates the authentication request"},{"location":"app-development/data-flow-components/login-with-password.html#cases","title":"Cases","text":"<ul> <li>User Authentication: Step used in authentication processes where users enter their credentials to access the system or its features.</li> <li>Access Control: Suitable for systems that require user credentials to be verified before granting access to certain resources or functionality.</li> </ul>"},{"location":"app-development/data-flow-components/login-with-password.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for Accuracy of Credentials: The effectiveness of the step depends on the accuracy of the credentials entered (username and password).</li> <li>Handling Failed Login Attempts: It is important to properly handle failed login attempts to avoid potential security risks such as brute-force attacks. This requires implementing mechanisms to limit the number of login attempts or temporarily block access after several unsuccessful attempts.</li> </ul>"},{"location":"app-development/data-flow-components/login-with-password.html#application-scenario","title":"Application scenario","text":"<p>The scenario implements user login to the system using a username and password. After initiating the dataflow and entering the login and password into the corresponding fields of the user interface, the \"Login with password\" step authenticates the user. Then, using the \"Form action\" step, the selected component is opened.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/lookup-reference.html","title":"Lookup reference","text":""},{"location":"app-development/data-flow-components/lookup-reference.html#lookup-reference","title":"Lookup reference","text":""},{"location":"app-development/data-flow-components/lookup-reference.html#general-information","title":"General information","text":"<p>The \u201cLookup Reference\u201d step is used to search for references to component instances by external keys. This process requires that at least one property with the \u201cPrimary key\u201d flag be configured in the component to be searched.</p> <p>The search is performed by this property, and the result of the search in the form of Id (integer) of the found record will be recorded to the variable specified in the \u201cField name.\u201d If no instance of a component with such a key is found, the variable will be null.</p>"},{"location":"app-development/data-flow-components/lookup-reference.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Component - Component that is being searched Field name - Name of the field where the search result will be recorded"},{"location":"app-development/data-flow-components/lookup-reference.html#cases","title":"Cases","text":"<ul> <li>Primary Key Search: Used to determine the availability and identify instances of components by unique identifiers.</li> <li>Component Data Linking: Suitable for scripts where you want to link data from different components based on unique keys.</li> </ul>"},{"location":"app-development/data-flow-components/lookup-reference.html#exceptions","title":"Exceptions","text":"<ul> <li>Primary Key Requirement: The component must have a primary key configured to ensure a successful search.</li> <li>Handling Missing Records: If there is no instance with the specified key, the value of the variable will be null, which may require additional processing.</li> </ul>"},{"location":"app-development/data-flow-components/lookup-reference.html#application-scenario","title":"Application scenario","text":"<p>This component utilizes the Lookup Reference step to find the record ID in the \"Sorting Task\" table based on the entered sorting number. After entering the sorting number and executing the data flow, the corresponding record ID is displayed on the frontend.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/model-transformation-steps.html","title":"Model Transformation Steps","text":""},{"location":"app-development/data-flow-components/model-transformation-steps.html#model-transformation-groupseparator","title":"MODEL TRANSFORMATION GROUP|separator","text":"<ul> <li>Transform model</li> <li>Join models</li> <li>Extract collections</li> <li>Filter source</li> <li>Lookup reference</li> <li>Execute script</li> <li>Query entity by filter</li> <li>Select many</li> <li>Get entity by id</li> <li>Load catalogs by key</li> <li>Distinct</li> <li>Group by</li> <li>Calculate array</li> <li>Simple math</li> <li>Execute dataflow</li> <li>Get file info</li> </ul>"},{"location":"app-development/data-flow-components/output-steps.html","title":"Output Steps","text":""},{"location":"app-development/data-flow-components/output-steps.html#output-groupseparator","title":"OUTPUT GROUP|separator","text":"<ul> <li>Store entry over bus</li> <li>Update entry</li> <li>Deferred update entry</li> <li>Apply deferred update operations</li> <li>Execute api call</li> <li>Write response</li> <li>Form action</li> <li>Execute workflow</li> <li>Export to file</li> <li>Render template</li> </ul>"},{"location":"app-development/data-flow-components/prepare-external-keys.html","title":"Prepare external keys","text":""},{"location":"app-development/data-flow-components/prepare-external-keys.html#prepare-external-keys","title":"Prepare external keys","text":""},{"location":"app-development/data-flow-components/prepare-external-keys.html#general-information","title":"General information","text":"<p>The \u201cPrepare External Keys\u201d step is used to convert the internal identifiers of the component into external system keys. This step is widely used to prepare and send data to external systems, including integration with LDAP. It facilitates the process of transferring user information to an external system, including the relevant context.</p> <p>In the course of the step, the internal IDs of the component are replaced with the primary keys that are specified for this component, which ensures the correct mapping of data between the internal and external systems.</p>"},{"location":"app-development/data-flow-components/prepare-external-keys.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Key conversion data source"},{"location":"app-development/data-flow-components/prepare-external-keys.html#cases","title":"Cases","text":"<ul> <li>Integration with External Systems: Used to adapt internal data for their proper integration and sending to external systems such as LDAP.</li> <li>Prepare Data for Export: Suitable for scripts where internal IDs need to be transformed to meet the standards and requirements of external systems.</li> </ul>"},{"location":"app-development/data-flow-components/prepare-external-keys.html#exceptions","title":"Exceptions","text":"<ul> <li>Data Relevance and Accuracy Requirement: The effectiveness of the step depends on the accuracy and relevance of the internal data and their compliance with the structure of the external system.</li> <li>Data Mapping Management: You need to ensure that all internal IDs are correctly mapped to the primary keys of the external system to avoid integration errors.</li> </ul>"},{"location":"app-development/data-flow-components/proxy-get-entry.html","title":"Proxy get entry","text":""},{"location":"app-development/data-flow-components/proxy-get-entry.html#proxy-get-entry","title":"Proxy get entry","text":""},{"location":"app-development/data-flow-components/proxy-get-entry.html#general-information","title":"General information","text":"<p>The \u201cProxy Get Entry\u201d step is used to generate a model of a proxy request in order to obtain a single entry. This step is closely related to the \u201cProxy mode\u201d setting, which can be found in the \u201cSettings\u201d section.</p>"},{"location":"app-development/data-flow-components/proxy-get-entry.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Validate input values true, false Indicates that input values should be checked for correctness prior to processing"},{"location":"app-development/data-flow-components/proxy-get-entry.html#cases","title":"Cases","text":"<ul> <li>Single Entry Retrieval: Used to generate and send requests for a specific entry via a proxy server.</li> <li>Integration with external systems: Provides communication with external systems and services to obtain data using query proxying.</li> </ul>"},{"location":"app-development/data-flow-components/proxy-get-entry.html#exceptions","title":"Exceptions","text":"<ul> <li>Proxy Settings Dependency: The correct operation of the step depends on the correct \u201cProxy mode\u201d setting in the \u201cSettings\u201d section.</li> <li>Limited Functionality: The step is specialized in retrieving single records and is not designed to handle multiple queries or data.</li> </ul>"},{"location":"app-development/data-flow-components/proxy-query-entry.html","title":"Proxy query entry","text":""},{"location":"app-development/data-flow-components/proxy-query-entry.html#proxy-query-entry","title":"Proxy query entry","text":""},{"location":"app-development/data-flow-components/proxy-query-entry.html#general-information","title":"General information","text":"<p>The \u201cProxy Query Entry\u201d step is used to generate a proxy query model using a filter (Query) to retrieve single or multiple entries. This step works in conjunction with the \u201cProxy mode\u201d setting in the \u201cSettings\u201d section. In order for the component data model to work correctly, properties with the Query flag must be defined.</p>"},{"location":"app-development/data-flow-components/proxy-query-entry.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Query Filter - Filter to define a specific entry for a query Proxy mode settings - Reference to proxy mode settings defined in \u201cSettings\u201d"},{"location":"app-development/data-flow-components/proxy-query-entry.html#cases","title":"Cases","text":"<ul> <li>Filtered Queries in Proxy: Used in input dataflow for components marked as proxy to run queries with data filtering.</li> <li>Retrieving Specific Data: Retrieves a specific entry based on certain filter criteria.</li> </ul>"},{"location":"app-development/data-flow-components/proxy-query-entry.html#exceptions","title":"Exceptions","text":"<ul> <li>Component Configuration Dependency: Requires certain properties with the Query flag in the component datamodel.</li> <li>Limited Use: The step is designed to retrieve data based on filters and is not suitable for general queries without specification.</li> </ul>"},{"location":"app-development/data-flow-components/query-entity-by-filter.html","title":"Query entity by filter","text":""},{"location":"app-development/data-flow-components/query-entity-by-filter.html#query-entity-by-filter","title":"Query entity by filter","text":""},{"location":"app-development/data-flow-components/query-entity-by-filter.html#general-information","title":"General information","text":"<p>The \u201cQuery Entity by Filter\u201d step is used to search for entries in a specific component. Unlike steps, which use filters or identifiers to search, this step is designed to directly search for entries in a component.</p>"},{"location":"app-development/data-flow-components/query-entity-by-filter.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Component - Component that is being searched Dst field name - Name of the field in which the query result will be saved"},{"location":"app-development/data-flow-components/query-entity-by-filter.html#cases","title":"Cases","text":"<ul> <li>Direct Component Search: Used to directly search for entries in a specific component.</li> </ul>"},{"location":"app-development/data-flow-components/query-entity-by-filter.html#exceptions","title":"Exceptions","text":"<ul> <li>Component Dependency: The effectiveness of the step is directly related to the structure and content of the data in the selected component.</li> </ul>"},{"location":"app-development/data-flow-components/query-entity-by-filter.html#application-scenario","title":"Application scenario","text":"<p>The data flow demonstrates various usage scenarios of Query Entity by Filter for data filtering. Each scenario includes adding Get Action Model and Query Entity by Filter steps, filling in fields and applying filters, as well as a Write Response step for outputting results.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/register-context-for-model.html","title":"Register context for model","text":""},{"location":"app-development/data-flow-components/register-context-for-model.html#register-context-for-model","title":"Register context for model","text":""},{"location":"app-development/data-flow-components/register-context-for-model.html#general-information","title":"General information","text":"<p>The \u201cRegister context for model\u201d step is used in the context of LDAP integration to register the security context of users registered in an external system. This step ensures that data about users and their roles are synchronized between the external system and the current system, using keys to identify and register the context.</p>"},{"location":"app-development/data-flow-components/register-context-for-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Component - Component for which the context is being registered Name field - Field that indicates the entity's name or identifier Keys - Keys used to uniquely identify an entity"},{"location":"app-development/data-flow-components/register-context-for-model.html#cases","title":"Cases","text":"<ul> <li>LDAP Integration: Used to synchronize and register user data from LDAP in the current system.</li> <li>Role and Access Management: Suitable for scripts that require accurate matching and tracking of the roles of users registered in external systems.</li> </ul>"},{"location":"app-development/data-flow-components/register-context-for-model.html#exceptions","title":"Exceptions","text":"<ul> <li>Key Accuracy Requirements: The keys must be accurately matched to correctly identify and register users in the system.</li> <li>Managing Changes in External Systems: Changes in user roles or statuses in an external system require an appropriate update in the current system, which can be a challenge in the face of dynamically changing data.</li> </ul>"},{"location":"app-development/data-flow-components/register-external-user.html","title":"Register external user","text":""},{"location":"app-development/data-flow-components/register-external-user.html#register-external-user","title":"Register external user","text":""},{"location":"app-development/data-flow-components/register-external-user.html#general-information","title":"General information","text":"<p>The \u201cRegister External User\u201d step is intended for registering individual users or groups of users. This step is designed in the context of LDAP integration and is used for integration with external systems, facilitating the process of swapping out of users from those systems and then logging them into the current system.</p>"},{"location":"app-development/data-flow-components/register-external-user.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User name - Registration name or user ID Key field - Field containing key information to identify the user Auth provider - Authentication provider used to register the user"},{"location":"app-development/data-flow-components/register-external-user.html#cases","title":"Cases","text":"<ul> <li>Integration of Users from External Systems: Used to swap out and register users from LDAP or other external systems, ensuring their correct integration into the current system.</li> <li>Automation of the Registration Process: Suitable for scripts where it is necessary to automate the registration process of a large number of users, minimizing manual labor and possible errors.</li> </ul>"},{"location":"app-development/data-flow-components/register-external-user.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the Accuracy of the Input Data: The effectiveness of the step depends on the accuracy and completeness of the data received from the external system.</li> </ul>"},{"location":"app-development/data-flow-components/remove-assigned-roles-for-user.html","title":"Remove assigned roles for user","text":""},{"location":"app-development/data-flow-components/remove-assigned-roles-for-user.html#remove-assigned-roles-for-user","title":"Remove assigned roles for user","text":""},{"location":"app-development/data-flow-components/remove-assigned-roles-for-user.html#general-information","title":"General information","text":"<p>The \u201cRemove Assigned Roles for User\u201d step is used to reset all roles assigned for a particular user. This allows system administrators and process managers to remove user roles simplifying the management of permissions and security controls.</p>"},{"location":"app-development/data-flow-components/remove-assigned-roles-for-user.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User id field Name of a variable of user info type Field that contains the user ID for role reset"},{"location":"app-development/data-flow-components/remove-assigned-roles-for-user.html#cases","title":"Cases","text":"<ul> <li>Management of Access and Roles: This step is ideal for scripts where you want to quickly change or reset user roles, such as when job responsibilities change or when an employee leaves.</li> <li>Ensuring System Security: Used to prevent unauthorized access to sensitive data or system features by removing roles from users who no longer need such access permissions.</li> </ul>"},{"location":"app-development/data-flow-components/remove-assigned-roles-for-user.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the Accuracy of User Identification: The effectiveness of the step depends on the precise identification of the user whose roles you want to reset.</li> <li>Need to Get User ID First: The step requires you to first get an internal user id, which can be done via the \u201cGet User Info\u201d step or other authentication methods.</li> </ul>"},{"location":"app-development/data-flow-components/render-template.html","title":"Render template","text":""},{"location":"app-development/data-flow-components/render-template.html#render-template","title":"Render template","text":""},{"location":"app-development/data-flow-components/render-template.html#general-information","title":"General information","text":"<p>The \u201cRender Template\u201d step is used to create documents, especially in PDF format, using data from Dataflow and templates available in the system. The step allows you to convert data into professionally designed documents, which is widely used in the generation of reports, contracts, invoices, and other official documents.</p>"},{"location":"app-development/data-flow-components/render-template.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting from previous steps for data source Template - Selection from the available templates to create a document Render type text, HTML, Docx, Xlsx, PDF Format of the document to be generated File name - Name of the generated file Fields mapping - Mapping fields between a template and a data model"},{"location":"app-development/data-flow-components/render-template.html#cases","title":"Cases","text":"<ul> <li>Generation of Formalized Documents: Especially useful for automated generation of official documents such as reports, invoices, and contracts, by applying preset templates.</li> <li>Content Personalization: Allows you to create personalized documents for customers or users using data specific to each case, such as personalized offers or customized reports.</li> <li>Preparation for Document Distribution: Used to create documents that can then be made available to users for downloading or sent via email.</li> </ul>"},{"location":"app-development/data-flow-components/render-template.html#exceptions","title":"Exceptions","text":"<ul> <li>Requirement for the Quality and Accuracy of Templates: The quality of the resulting documents is directly related to the accuracy and professionalism of the templates used.</li> <li>Need for Follow-Up to Distribute Documents: Once a document is generated, a follow-up step, such as \u201cForm Action\u201d with \u201cDownload file\u201d option, is often required to make the document available to users.</li> </ul>"},{"location":"app-development/data-flow-components/render-template.html#application-scenario","title":"Application scenario","text":"<p>This component utilizes several steps to create and download a PDF file. First, the data model is fetched, then the PDF template is rendered. The Form action step is configured to download the file, specifying the data field containing file information. After the Write Response step, the generated file is sent to the frontend for downloading.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/reset-user-password-request.html","title":"Reset user password request","text":""},{"location":"app-development/data-flow-components/reset-user-password-request.html#reset-user-password-request","title":"Reset user password request","text":""},{"location":"app-development/data-flow-components/reset-user-password-request.html#general-information","title":"General information","text":"<p>The \u201cReset User Password Request\u201d step is designed for generating a new password for the user. The step works in conjunction with the \u201cSend Templated Notification\u201d to ensure that users receive a new password. The step only works if you have an application domain with a configured public URI.</p>"},{"location":"app-development/data-flow-components/reset-user-password-request.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User info field - A field that contains information about the user User name - Username for whom the password is being reset Client for request - Client or application that initiates the authentication request"},{"location":"app-development/data-flow-components/reset-user-password-request.html#cases","title":"Cases","text":"<ul> <li>User Access Recovery: Used in scripts where a user has forgotten their password and needs to reset it to re-access the system.</li> </ul>"},{"location":"app-development/data-flow-components/reset-user-password-request.html#exceptions","title":"Exceptions","text":"<ul> <li>Requirement for an Application Domain with a Public URI: The step requires a configured application domain with a public URI for it to work correctly.</li> <li>Dependency on User Notification Method: The effectiveness of the step depends on the reliability and availability of the user notification method, such as email, used for sending a new password.</li> </ul>"},{"location":"app-development/data-flow-components/select-many.html","title":"Select many","text":""},{"location":"app-development/data-flow-components/select-many.html#select-many","title":"Select many","text":""},{"location":"app-development/data-flow-components/select-many.html#general-information","title":"General information","text":"<p>The \u201cSelect Many\u201d step is used to convert an array type field into a flat list. Unlike the \u201cExtract Collection\u201d step, \u201cSelect Many\u201d preserves the model data from the previous step and adds \u201cparent\u201d values with a <code>$parent</code> prefix for each array element. This does not only expand the array, but also preserves the context of the parent entry.</p>"},{"location":"app-development/data-flow-components/select-many.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Model path - Path to an array field in the data model"},{"location":"app-development/data-flow-components/select-many.html#cases","title":"Cases","text":"<ul> <li>Context Expansion and Preservation: Used to convert arrays of data into a flat list while preserving the relationship with the parent data.</li> <li>Processing of Hierarchical Structures: Suitable for scripts where you need to process data from arrays without losing connection with \u201cparent\u201d data elements.</li> </ul>"},{"location":"app-development/data-flow-components/select-many.html#exceptions","title":"Exceptions","text":"<ul> <li>Processing Large Arrays: Processing large arrays can be more resource intensive due to the need to preserve the context of the parent data.</li> </ul>"},{"location":"app-development/data-flow-components/select-many.html#application-scenario","title":"Application scenario","text":"<p>This component is a tool for creating and managing data flows within the application. The 'Select many' step in this component is used to choose multiple items from an array of data obtained in the previous stage of the data flow. The component enables users to define selection and data processing conditions according to their requirements.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/data-flow-components/send-notification.html","title":"Send notification","text":""},{"location":"app-development/data-flow-components/send-notification.html#send-notification","title":"Send notification","text":""},{"location":"app-development/data-flow-components/send-notification.html#general-information","title":"General information","text":"<p>The \u201cSend Notification\u201d step is designed to send customized notifications to users or groups of users. This step offers a high degree of flexibility, allowing you to directly set the text and subject of each notification, making it ideal for situations that require personalized messages.</p>"},{"location":"app-development/data-flow-components/send-notification.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Source of the data for sending the notification User info field - Field that contains information about the recipients of the notification User name - Name of the user to whom the notification will be sent Message body field - Field for the body of the message Message theme Text Notification subject Message body Text Customizable text of the notification Notification type Smtp, Mail, SignalR Notification type"},{"location":"app-development/data-flow-components/send-notification.html#cases","title":"Cases","text":"<ul> <li>Personalized Notifications: Used to create unique messages for each user or situation ensuring maximum relevance and engagement of recipients.</li> <li>Flexible Communication: Suitable for scripts where special messages are required, such as special offers, individual reminders or personalized newsletters.</li> </ul>"},{"location":"app-development/data-flow-components/send-notification.html#exceptions","title":"Exceptions","text":"<ul> <li>**Message Detail Requirement: Attention to detail and precision should be paid when formulating the text of each notification.</li> <li>Need for Careful Notification Management: Because each message is individually customizable, it's important to carefully manage the process of creating and sending notifications to avoid errors and inconsistencies.</li> </ul>"},{"location":"app-development/data-flow-components/send-templated-notification.html","title":"Send templated notification","text":""},{"location":"app-development/data-flow-components/send-templated-notification.html#send-templated-notification","title":"Send templated notification","text":""},{"location":"app-development/data-flow-components/send-templated-notification.html#general-information","title":"General information","text":"<p>The \u201cSend Templated Notification\u201d step is designed to send notifications to users or groups of users using pre-configured templates. This step provides flexibility in choosing the delivery method and the recipients of the notification.</p>"},{"location":"app-development/data-flow-components/send-templated-notification.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Notification type Smtp, Mail, SignalR Type of notification delivery channel User info field - List of users to be notified User routing - Routing the user to deliver the notification User name - Specific user to be notified Template - Selection from pre-configured notification templates Render type Text, Html, Docx, Xlsx, Pdf Type of notification template rendering Message theme Text Subject line for email notifications"},{"location":"app-development/data-flow-components/send-templated-notification.html#cases","title":"Cases","text":"<ul> <li>Automated Notifications: Used to send notifications to users using preset templates to ensure consistent and accurate messages.</li> <li>Flexibility of Message Delivery: Allows you to choose between different delivery channels (e.g., SMTP, Mail, SignalR) which increases the coverage and efficiency of communications.</li> <li>Notification Personalization: Supports customizing notifications for specific users or groups, as well as various content formats (text, HTML, Docx, Xlsx).</li> </ul>"},{"location":"app-development/data-flow-components/send-templated-notification.html#exceptions","title":"Exceptions","text":"<ul> <li>Requirement of a Configured Delivery Channel: In order for notifications to be sent successfully, you must have a functioning delivery channel, such as an SMTP server for email notifications.</li> </ul>"},{"location":"app-development/data-flow-components/simple-math.html","title":"Simple math","text":""},{"location":"app-development/data-flow-components/simple-math.html#simple-math","title":"Simple math","text":""},{"location":"app-development/data-flow-components/simple-math.html#general-information","title":"General information","text":"<p>The \u201cSimple Math\u201d step is used to perform simple mathematical operations on string data. This step allows you to select two fields from the data model and apply one of the specified mathematical operations to them, and then write the result to the third field of the model.</p>"},{"location":"app-development/data-flow-components/simple-math.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step Multiselect of Catalog Selecting the previous step Add Operation +, -, *, /, AND, OR, XOR Operations to perform on the selected fields"},{"location":"app-development/data-flow-components/simple-math.html#cases","title":"Cases","text":"<ul> <li>Mathematical Data Processing: Used to perform basic mathematical operations such as addition, subtraction, multiplication, and division, as well as logical operations.</li> <li>Data Aggregation and Modification: Suitable for changing values in a data model by aggregating or modifying the source data using simple calculations.</li> </ul>"},{"location":"app-development/data-flow-components/simple-math.html#exceptions","title":"Exceptions","text":"<ul> <li>Accuracy of Field and Operation Selection: Fields and operations must be precisely selected to achieve the expected result.</li> </ul>"},{"location":"app-development/data-flow-components/store-entry-over-bus.html","title":"Store entry over bus","text":""},{"location":"app-development/data-flow-components/store-entry-over-bus.html#store-entry-over-bus","title":"Store entry over bus","text":""},{"location":"app-development/data-flow-components/store-entry-over-bus.html#general-information","title":"General information","text":"<p>The \u201cStore Entry Over Bus\u201d step is designed for storing the model in the component data (fields) via the bus. This step always creates a new instance of the specified component and is used to work dynamically with the data in the system. The step is called asynchronously.</p>"},{"location":"app-development/data-flow-components/store-entry-over-bus.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selection of the previous step Component - Selection from the available components to save the entry Name String System name of the entry to be displayed using links of the Catalog type Keys ADD KEY For components with the Restrict access flag, specifying the keys to map the fields Key field Multiselect of Catalog Fields containing the primary keys of the selected component Fields mapping - Dynamically configuring the mapping of component models to the data flow model"},{"location":"app-development/data-flow-components/store-entry-over-bus.html#cases","title":"Cases","text":"<ul> <li>Creating New Component Instances: Used to automatically create new entries in components based on data in data flow.</li> </ul>"},{"location":"app-development/data-flow-components/store-entry-over-bus.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the Availability of Primary Keys in the Component: The effectiveness of the step depends on the availability and correctness of primary keys in the target component, especially if the component has the Restrict access flag.</li> <li>Asynchronous Processing Requirement: The step is performed asynchronously, which can affect the sequence and processing time of the system.</li> </ul>"},{"location":"app-development/data-flow-components/store-entry-over-bus.html#application-scenario","title":"Application scenario","text":"<p>This component allows retrieving data from the selected integration and storing it in the corresponding fields of created data models. The retrieved data can then be used in other parts of the system for further processing or display.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/subscribe-to-connector.html","title":"Subscribe to connector","text":""},{"location":"app-development/data-flow-components/subscribe-to-connector.html#subscribe-to-connector","title":"Subscribe to connector","text":""},{"location":"app-development/data-flow-components/subscribe-to-connector.html#general-information","title":"General information","text":"<p>The \u201cSubscribe to connector\u201d step is for subscribing to receive messages from various messaging systems, such as RabbitMQ or Kafka.</p>"},{"location":"app-development/data-flow-components/subscribe-to-connector.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step System Multiselect of Catalog Contains preconfigured integration systems Connector Multiselect of Catalog Contains pre-configured connectors in the integration system Query path Multiselect of Catalog Contains the \u201cEndPoint\u201d to be accessed Method name Get, Post, Put, Delete Type of request to be executed"},{"location":"app-development/data-flow-components/subscribe-to-connector.html#cases","title":"Cases","text":"<ul> <li>Response to Events: Automatic receiving of notifications about events or changes in data from external sources.</li> <li>Integration with Messaging Systems: Interaction with various messaging platforms to ensure a continuous dataflow.</li> </ul>"},{"location":"app-development/data-flow-components/subscribe-to-connector.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Functionality: The step is limited to subscribing to messages and does not support other types of interactions with external systems.</li> <li>Dependency on External Systems: Requires reliable configuration and support from the messaging systems used.</li> </ul>"},{"location":"app-development/data-flow-components/subscribe-to-connector.html#application-scenario","title":"Application scenario","text":"<p>The component is configured to subscribe to a RabbitMQ queue and save the received messages in a database. Steps such as \"Subscribe to connector\", \"Execute script\" for data processing, and \"Update entry\" for saving messages are utilized in this process.</p> <ul> <li>Component configuration will be available later</li> </ul>"},{"location":"app-development/data-flow-components/transform-model.html","title":"Transform model","text":""},{"location":"app-development/data-flow-components/transform-model.html#transform-model","title":"Transform model","text":""},{"location":"app-development/data-flow-components/transform-model.html#general-information","title":"General information","text":"<p>The \u201cTransform Model\u201d step is used for mapping and transforming fields in the data model. This involves changing field names and removing unnecessary fields from the model. The step creates a new copy of the dataflow model, allowing you to modify its structure, which is often used to minimize the response as a data model. It can also be used to optimize the data model after performing multiple grouping operations (Group by).</p>"},{"location":"app-development/data-flow-components/transform-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Fields mapping - Mapping and changing fields in the data model"},{"location":"app-development/data-flow-components/transform-model.html#cases","title":"Cases","text":"<ul> <li>Data Model Optimization: Used to change the structure of the data model, including renaming or deleting fields.</li> </ul>"},{"location":"app-development/data-flow-components/transform-model.html#exceptions","title":"Exceptions","text":"<ul> <li>Importance of Accurate Mapping: Errors in the \u201cFields Mapping\u201d setting may result in unwanted changes to the data model.</li> <li>Dependency on the Source Data: Correct application of the step requires an accurate understanding of the structure of the source data.</li> </ul>"},{"location":"app-development/data-flow-components/transform-model.html#application-scenario","title":"Application scenario","text":"<p>This component contains a data flow used for data transformation according to specified rules. The data flow includes steps such as Extract Collection and Execute Script, which allow adding new records to client data arrays.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/update-entry.html","title":"Update entry","text":""},{"location":"app-development/data-flow-components/update-entry.html#update-entry","title":"Update entry","text":""},{"location":"app-development/data-flow-components/update-entry.html#general-information","title":"General information","text":"<p>The \u201cUpdate Entry\u201d step is used to create, update or delete an existing entry in the system. This step is executed directly, and the system waits for it to be completed. If an error occurs during execution, further execution of the data flow will be stopped.</p>"},{"location":"app-development/data-flow-components/update-entry.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step Component - Component to be updated Field component key - Field with the component key to update Mark entry for deletion true, false Entry deletion mark Name field - Name of the field to be updated Result store field - Field for saving the result of the operation Fields mapping - Mapping fields between data flow and component"},{"location":"app-development/data-flow-components/update-entry.html#cases","title":"Cases","text":"<ul> <li>Data Update: Used to update information in the existing entries of the system components to ensure data is accurate and up-to-date.</li> <li>Deleting an Entry: The \u201cUpdate Entry\u201d step can be used to delete existing entries in the system. This is especially relevant in scripts where you need to remove outdated or incorrect information to keep the data in the system accurate and up-to-date. For example, this can be deleting the account of a user who has left the organization or removing unavailable items from inventory. It is important to note that the step can be configured to mark entry for deletion, which allows you to manage the deletion process more flexibly.</li> </ul>"},{"location":"app-development/data-flow-components/update-entry.html#exceptions","title":"Exceptions","text":"<ul> <li>Dependency on the Presence of an Instance ID: To successfully update data, the component instance ID must first be received and transmitted.</li> <li>Managing Runtime Errors: Any error during the data update process will stop the data flow, which requires the careful monitoring of error and exception handling.</li> </ul>"},{"location":"app-development/data-flow-components/update-entry.html#application-scenario","title":"Application scenario","text":"<p>The component presents a scenario for adding, editing, and deleting component records using the \"Update entry\" step.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/update-or-create-user-info.html","title":"Update or create user info","text":""},{"location":"app-development/data-flow-components/update-or-create-user-info.html#update-or-create-user-info","title":"Update or create user info","text":""},{"location":"app-development/data-flow-components/update-or-create-user-info.html#general-information","title":"General information","text":"<p>The \u201cUpdate or Create User Info\u201d step is used to update existing user information or create a new user. This step works exclusively with the \u201cUser Info\u201d component. When user information is updated, if the password is not specified, it will remain unchanged.</p>"},{"location":"app-development/data-flow-components/update-or-create-user-info.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step User info field - A field that contains information about the user User name - Name of the user User password - User password (required) User disabled true, false User activity status Update fields name, email, lastName, userName, firstName, middleName Fields for updating or creating user information"},{"location":"app-development/data-flow-components/update-or-create-user-info.html#cases","title":"Cases","text":"<ul> <li>Updating User Information: Used to change data about existing users, including their contact information, username, and other personal information.</li> <li>Creating New Users: Suitable for adding new users to the system, allowing you to quickly and efficiently expand the user database.</li> </ul>"},{"location":"app-development/data-flow-components/update-or-create-user-info.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for Data Accuracy: The step requires accurate and up-to-date data entry, especially when creating new users.</li> <li>Password Management: When user information is updated, if the password is not specified, it will remain unchanged. When creating a user, specifying a password is mandatory.</li> </ul>"},{"location":"app-development/data-flow-components/update-or-create-user-info.html#application-scenario","title":"Application scenario","text":"<p>The component is designed to manage user information. It involves retrieving user information, updating their data, and creating a new user record with specified parameters.</p> <ul> <li>You can download the component configuration here</li> </ul>"},{"location":"app-development/data-flow-components/user-contexts-steps.html","title":"User Contexts Steps","text":""},{"location":"app-development/data-flow-components/user-contexts-steps.html#user-contexts-groupseparator","title":"\"USER CONTEXTS\" GROUP|separator","text":"<ul> <li>Register context for model</li> <li>Register external user</li> <li>Prepare external keys</li> <li>Assign context role for model</li> <li>Get one time code for user</li> <li>Confirm one time code for user</li> <li>Update or create user info</li> <li>Get user info</li> <li>Login with password</li> <li>Reset user password request</li> <li>Confirm user email request</li> <li>Send templated norification</li> <li>Remove assigned roles for user</li> </ul>"},{"location":"app-development/data-flow-components/write-response.html","title":"Write response","text":""},{"location":"app-development/data-flow-components/write-response.html#write-response","title":"Write response","text":""},{"location":"app-development/data-flow-components/write-response.html#general-information","title":"General information","text":"<p>The \u201cWrite Response\u201d step plays a key role in Dataflow, as it is designed for returning the final result to the caller. This step is usually the last step in any Dataflow, summarizing and sending the received data back to the requesting source.</p>"},{"location":"app-development/data-flow-components/write-response.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Source step - Selecting the previous step"},{"location":"app-development/data-flow-components/write-response.html#cases","title":"Cases","text":"<ul> <li>Returning Dataflow Results: Used to send the results of the Dataflow process data back to the caller, which can be critical in data analytics and error management.</li> <li>Pre-Response Data Transformation: Can be combined with the \u201cTransform Model\u201d step to transform or filter data before it is sent, allowing you to optimize and customize the content of the response to meet the caller's requirements.</li> </ul>"},{"location":"app-development/data-flow-components/write-response.html#application-scenario","title":"Application scenario","text":"<p>The component contains custom data definitions (definitions) and provides the ability to create and manage data using data flows. It implements steps to retrieve data models (Get action model) and write responses (Write response), allowing users to interact with data through the user interface and interact with it on the frontend of the application.</p> <ul> <li>You can download the component configuration here.</li> </ul>"},{"location":"app-development/ui-components/index.html","title":"UI Components","text":""},{"location":"app-development/ui-components/index.html#ui-components","title":"UI Components","text":"<p>UI Components are visual interface elements that you can use to build your application's user interface. They are organized into three groups:</p>"},{"location":"app-development/ui-components/index.html#basic-group","title":"BASIC GROUP","text":"<p>Basic input and display components for common use cases.</p> <ul> <li>Basic - Overview of basic components</li> <li>Label - Display text labels</li> <li>Text Field - Single-line text input</li> <li>Password - Password input field</li> <li>Text Area - Multi-line text input</li> <li>Code Editor - Code editing component</li> <li>WYSIWYG Editor - Rich text editor</li> <li>Phone Number - Phone number input</li> <li>Hyperlink - Clickable links</li> <li>HTML - HTML content display</li> <li>SVG - SVG graphics display</li> <li>Image - Image display</li> <li>PDF Viewer - PDF document viewer</li> <li>File - File upload and management</li> <li>Number - Numeric input</li> <li>Checkbox - Checkbox input</li> <li>Select - Dropdown selection</li> <li>Multiselect - Multiple selection</li> <li>Switch - Toggle switch</li> <li>Button - Clickable buttons</li> <li>Radio Button - Radio button selection</li> </ul>"},{"location":"app-development/ui-components/index.html#advanced-group","title":"ADVANCED GROUP","text":"<p>Advanced components for complex data visualization and interaction.</p> <ul> <li>Advanced - Overview of advanced components</li> <li>Date Time - Date and time picker</li> <li>Day - Day selector</li> <li>Time - Time picker</li> <li>Data Grid - Tabular data display and editing</li> <li>Pivot Grid - Pivot table component</li> <li>Confirmation State - Confirmation dialogs</li> <li>Tab Control - Tabbed interface</li> <li>List View - List display component</li> <li>Tree View - Hierarchical tree display</li> <li>Slider - Range slider input</li> <li>Signature - Digital signature capture</li> <li>Charts - Data visualization charts</li> <li>Progress Bar - Progress indicators</li> </ul>"},{"location":"app-development/ui-components/index.html#layout-group","title":"LAYOUT GROUP","text":"<p>Components for organizing and structuring your application's layout.</p> <ul> <li>Layout - Overview of layout components</li> <li>Page - Page container</li> <li>Panel - Panel container</li> <li>Grid - Grid layout system</li> <li>Flows - Toolbox Flows tab</li> </ul>"},{"location":"app-development/ui-components/advanced.html","title":"Advanced","text":""},{"location":"app-development/ui-components/advanced.html#advanced","title":"Advanced","text":"<p>The \"Advanced UI Components\" group includes a set of more complex controls that provide advanced functionality for interactive and dynamic user interfaces. These components enable complex data logic, graphical representations, and user interactions that require deeper customization and integration. Using \"Advanced UI Components\", developers can create intuitive and feature-rich interfaces that meet the specific requirements of business processes and user experience.</p> <ul> <li>Date time</li> <li>Day</li> <li>Time</li> <li>Data grid</li> <li>Confirmation state</li> <li>Tab control</li> <li>List view</li> <li>Tree view</li> <li>Slider</li> <li>Signature</li> <li>Charts</li> <li>Progres bar</li> </ul>"},{"location":"app-development/ui-components/basic.html","title":"Basic","text":""},{"location":"app-development/ui-components/basic.html#basic","title":"Basic","text":"<p>The \"Basic\" group covers a set of interface elements required for the basic functions of user interaction with the application. These components are standard controls such as input fields, buttons, and other interactive elements that serve as the basis for creating the structure and form of user interfaces. </p> <ul> <li>Label</li> <li>Text field</li> <li>Password</li> <li>Text area</li> <li>Code editor</li> <li>WYSIWYG editor</li> <li>Phone number</li> <li>Hyperlink</li> <li>Html</li> <li>Svg</li> <li>Image</li> <li>Pdg viewer</li> <li>File</li> <li>Number</li> <li>Checkbox</li> <li>Select</li> <li>Multiselect</li> <li>Switch</li> <li>Button</li> <li>Radio button</li> </ul>"},{"location":"app-development/ui-components/button.html","title":"Button","text":""},{"location":"app-development/ui-components/button.html#button","title":"Button","text":""},{"location":"app-development/ui-components/button.html#general-information","title":"General information","text":"<p>A Button is the main UI component used to execute commands or initiate actions in an application. It can be configured to run processes, confirm user actions, or serve as a navigation tool.</p>"},{"location":"app-development/ui-components/button.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Name - Name of the UI Component in the system Common Icon - Icon loading (.svg) Disabled true, false Disabling an element Label - Button text Text Font size - Size of the font Color - Text color (CSS) Bold true, false Bold font Italic true, false Italic font Text alignment Left, Right, Center, Justify Text alignment Actions Command type Various commands Action by button click Restrict access true, false Access limitation <p>CSS Properties:</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false Component stretching Margin - Outer padding Padding - Inner padding Appearance CornerRadius - Corner radius BorderThickness - Border thickness Brush Background - Background color BorderBrush - Border color"},{"location":"app-development/ui-components/button.html#cases","title":"Cases","text":"<ul> <li>Form Submission: Using a button to submit form data to the server or to initiate processing of form data in the application.</li> <li>Navigation: Assignment of a button to navigate between different screens or sections of the application.</li> <li>Interactive Elements: Creation of buttons to control interactive elements, such as changing content on a page.</li> </ul>"},{"location":"app-development/ui-components/button.html#exceptions","title":"Exceptions","text":"<ul> <li>Limitations on the Number of Actions: Only one action can be assigned to a button (execute dataflow, execute script, etc.).</li> </ul>"},{"location":"app-development/ui-components/charts.html","title":"Charts","text":""},{"location":"app-development/ui-components/charts.html#charts","title":"Charts","text":""},{"location":"app-development/ui-components/charts.html#general-information","title":"General information","text":"<p>\u201cChart View\u201d is a UI Component designed to display and customize the graphical presentation of data.</p>"},{"location":"app-development/ui-components/charts.html#parameters","title":"Parameters","text":"<p>Component properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Component - Selection of a component to be displayed in the graph Chart type bar, horizontal bar, pie, donut, line Type of the chart Label field - Field for labels on the chart Data source - Data source for the chart Show legend true, false Displaying the legend on the chart Y Axes max value - Maximum value on the Y-axis Y Axes min value - Minimum value on the Y-axis X Axes max value - Maximum value on the X-axis X Axes min value - Minimum value on the X-axis Automation id - ID for automation <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Visible true, false Component Visibility Hidden true, false Hiding a Component Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border <p>Data source parameters:</p> Setting Field Value Options Purpose Title - Data source title Value Multiple choice Catalog The property allows you to select a data source value from the Integer and Number fields OK Button Customization application Cancel Button Customization cancellation"},{"location":"app-development/ui-components/charts.html#cases","title":"Cases","text":"<ul> <li>Data Visualization: Used to create graphs and charts, allowing you to present data efficiently.</li> <li>Analytics Dashboards: Suitable for analytics dashboards that require a visual display of statistics and metrics.</li> </ul>"},{"location":"app-development/ui-components/charts.html#exceptions","title":"Exceptions","text":"<ul> <li>Specialized Use: Limited to the creation of graphs and is not suitable for other types of visualizations.</li> </ul>"},{"location":"app-development/ui-components/checkbox.html","title":"Checkbox","text":""},{"location":"app-development/ui-components/checkbox.html#checkbox","title":"Checkbox","text":""},{"location":"app-development/ui-components/checkbox.html#general-information","title":"General information","text":"<p>A \u201cCheckbox\u201d is an interface element that allows users to select or deselect a specific parameter or option. This component is widely used to create parameter lists, manage settings, or select multiple options at once.</p>"},{"location":"app-development/ui-components/checkbox.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cBoolean\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/checkbox.html#cases","title":"Cases","text":"<ul> <li>Option Selection: Users can select or deselect certain parameters or options.</li> <li>Settings Management: Checkbox is used to enable or disable certain settings or features.</li> <li>Multiple Selection: In the Checkbox group, users can select multiple options at the same time.</li> </ul>"},{"location":"app-development/ui-components/checkbox.html#exceptions","title":"Exceptions","text":"<ul> <li>Unintuitive Interface: With a large number of checkboxes on a page or in complex forms, users may have difficulty choosing options.</li> <li>Unclear Formulations: If Checkbox formulations are not informative or unclear, users may not understand what they are choosing.</li> </ul>"},{"location":"app-development/ui-components/code-editor.html","title":"Code Editor","text":""},{"location":"app-development/ui-components/code-editor.html#code-editor","title":"Code Editor","text":""},{"location":"app-development/ui-components/code-editor.html#general-information","title":"General information","text":"<p>Code Editor is a specialized UI component designed for entering and displaying program code. It supports various programming languages \u200b\u200bsuch as JavaScript, Python, etc. and provides functionality for easy code editing, but the element does not support a compiler.</p>"},{"location":"app-development/ui-components/code-editor.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Name - Name of the UI Component in the system Common Disabled true, false Disabling an element Required true, false Required field to fill out Theme - Editor visual style Mode - Programming language Label - Field description Binding Multiselect of Catalog Data binding Events On value changed - Value change event On key down - Key press event On key up - Key release event On focus - Event when focusing on an element Tab index - Integer Field switching order <p>CSS Properties:</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false Component stretching Margin - Outer padding Padding - Inner padding Appearance CornerRadius - Corner radius BorderThickness - Border thickness Brush Background - Background color BorderBrush - Border color"},{"location":"app-development/ui-components/code-editor.html#cases","title":"Cases","text":"<ul> <li>Code Editing: Used to enter and edit program code in various programming languages.</li> <li>Training and Demonstration: Used for educational and demonstration purposes to show code examples.</li> </ul>"},{"location":"app-development/ui-components/code-editor.html#exceptions","title":"Exceptions","text":"<ul> <li>Functionality Limitations: Depending on implementation, may not support all features of advanced development environments.</li> </ul>"},{"location":"app-development/ui-components/confirmation-state.html","title":"Confirmation State","text":""},{"location":"app-development/ui-components/confirmation-state.html#confirmation-state","title":"Confirmation State","text":""},{"location":"app-development/ui-components/confirmation-state.html#general-information","title":"General information","text":"<p>The \u201cConfirmation State\u201d is a UI component for displaying a preconfigured approval form used to manage the confirmation or approval processes in the application.</p>"},{"location":"app-development/ui-components/confirmation-state.html#parameters","title":"Parameters","text":"<p>Component properties:</p> Setting Field Value Options Purpose Name - Name of the UI Component in the system <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/confirmation-state.html#cases","title":"Cases","text":"<ul> <li>Approval Forms: Used to create interfaces where user confirmation or approval is required.</li> <li>Interactive Dialogs: Suitable for dialogs that require confirmation of user actions.</li> </ul>"},{"location":"app-development/ui-components/confirmation-state.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Functionality: Not suitable for common data entry.</li> </ul>"},{"location":"app-development/ui-components/data-grid.html","title":"Data Grid","text":""},{"location":"app-development/ui-components/data-grid.html#data-grid","title":"Data Grid","text":""},{"location":"app-development/ui-components/data-grid.html#general-information","title":"General information","text":"<p>Data Grid is a powerful UI component designed to display and interact with large amounts of data in tabular form. This component is ideal for presenting data as rows and columns, as well as providing sorting and filtering functionality.</p>"},{"location":"app-development/ui-components/data-grid.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Name - Name of the UI Component in the system Columns - Defining columns and their properties Component Multiselect of Catalog Contains a list of all Components Static filters Button Used to specify static filters Dynamic filters Button The property is used to specify dynamic filters Page size - Size of the page Manual reload - Manual data reload Selection mode none, single, multiple, checkbox Item selection mode Automation id - ID for automation Events On datasource loaded - Data source load event On rows selected - Row selection event On loaded - Component load event On table changed - Table change event On header changed - Header change event On row changed - Row change event On cell changed - Cell change event <p>CSS Properties:</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Margin - Outer padding Padding - Inner padding Visible - Component Visibility Hidden - Hiding a Component Appearance CornerRadius - Corner radius BorderThickness - Border thickness Brush Background - Background color BorderBrush - Border color <p>DataGrid Configuration Model</p> <p>The following settings are used to modify the columns of the DataGrid UI component: </p> Setting Field Value Options Purpose Translation value - Column header Show header true, false This property allows you to customize the display of the column header Sortable true, false The property allows you to configure the ability to sort the table by the selected column Filterable true, false This property allows you to configure the ability to filter the table by the selected column Visible true, false The property determines the visibility of the column Plain text true, false Property to display a column as plain text Width - Column width in the table Display format - Column data display format Icon Available only for Edit record, Open application A property that contains a selection of available icons Command type Open application, Edit record The property allows you to select the action that will be performed by clicking on the column Add field Button The property allows you to add fields for output in the column"},{"location":"app-development/ui-components/data-grid.html#cases","title":"Cases","text":"<ul> <li>Data Display: Ideal for displaying data in an easy-to-understand tabular form.</li> <li>Administrative Panels: Widely used in management interfaces for viewing and editing data.</li> <li>Analytics Applications: Allows you to analyze and sort large amounts of information.</li> </ul>"},{"location":"app-development/ui-components/data-grid.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Visualization: Data Grid is not suitable for complex data visualizations such as graphs or charts.</li> <li>Data Processing: The component is designed to display data, not to process or compute data.</li> </ul>"},{"location":"app-development/ui-components/date-time.html","title":"Date Time","text":""},{"location":"app-development/ui-components/date-time.html#date-time","title":"Date / Time","text":""},{"location":"app-development/ui-components/date-time.html#general-information","title":"General information","text":"<p>Date/Time is a UI component for entering and displaying date and time. It is designed to provide a user-friendly interface for selecting the date/time, as well as to display this data in a specific format.</p>"},{"location":"app-development/ui-components/date-time.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Name - Name of the UI Component in the system Date Time Format Date, Time, Date &amp; Time Display Format Default value - Default value Min date - Minimum Date Max date - Maximum Date Common Binding - Binding to Data Required true, false Required to fill out <p>CSS Properties:</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Margin - Outer padding Padding - Inner padding Appearance CornerRadius - Corner radius BorderThickness - Border thickness Brush Background - Background color BorderBrush - Border color"},{"location":"app-development/ui-components/date-time.html#cases","title":"Cases","text":"<ul> <li>Event Date Selection: Used to select a date in the calendar or to set the time of the event.</li> <li>Filter by Date: Can be used in filters to filter data by date/time.</li> <li>Display Time Intervals: Suitable for tasks that involve displaying time intervals, such as in job schedulers.</li> </ul>"},{"location":"app-development/ui-components/date-time.html#exceptions","title":"Exceptions","text":"<ul> <li>Formatting: Date/Time is not intended for free text input, but is used strictly for working with dates and time.</li> </ul>"},{"location":"app-development/ui-components/day.html","title":"Day","text":""},{"location":"app-development/ui-components/day.html#day","title":"Day","text":""},{"location":"app-development/ui-components/day.html#general-information","title":"General information","text":"<p>Day is a UI component designed to display or select individual days. This element is commonly used in calendars or date sensors, allowing the user to select specific days to complete tasks or set reminders.</p>"},{"location":"app-development/ui-components/day.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Format - The property allows you to configure the date and time display Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cDate\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/day.html#cases","title":"Cases","text":"<ul> <li>Date Picker: Used to select specific days in interfaces where precise date selection is required.</li> <li>Event Display: Can be used to display events or reminders scheduled for specific days.</li> </ul>"},{"location":"app-development/ui-components/day.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Functionality: The Day component is limited to displaying and selecting days, and is not suitable for displaying wider time intervals.</li> </ul>"},{"location":"app-development/ui-components/file.html","title":"File","text":""},{"location":"app-development/ui-components/file.html#file","title":"File","text":""},{"location":"app-development/ui-components/file.html#general-information","title":"General information","text":"<p>The \u201cFile\u201d component provides the ability to load and display files in the user interface. This component is useful for uploading and viewing different types of files, such as images, documents, archives, etc.</p>"},{"location":"app-development/ui-components/file.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Max file size in bytes - The property allows you to specify the maximum size of the uploaded file in bytes Accept files The property allows you to specify the files that are available for download Read only true, false This property allows you to disable file uploading to forms Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Value - - Binding Multiple Choice: Catalog Reference to the Catalog of File type Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/file.html#cases","title":"Cases","text":"<ul> <li>Document Upload: Allows users to upload documents, images, and other files.</li> <li>View File Information: Displays information about the uploaded file, such as its name and size.</li> </ul>"},{"location":"app-development/ui-components/file.html#exceptions","title":"Exceptions","text":"<ul> <li>Performance: Downloading large files or a large number of files may affect performance.</li> </ul>"},{"location":"app-development/ui-components/flows.html","title":"Flows","text":""},{"location":"app-development/ui-components/flows.html#toolbox-flows-tab","title":"Toolbox Flows tab","text":"<p>The Toolbox Flows tab allows you to add new Dataflows and Workflows. The tab is available after version 0.5.x.</p> <p>To add a new dataflow or workflow, click on the corresponding icon and drag it to the top area of the application window. A new workflow or dataflow will then appear, which can be configured as described in the new Dataflows and Workflows.</p> <p></p>"},{"location":"app-development/ui-components/grid.html","title":"Grid","text":""},{"location":"app-development/ui-components/grid.html#grid","title":"Grid","text":""},{"location":"app-development/ui-components/grid.html#general-information","title":"General information","text":"<p>\u201cGrid\u201d is a UI Component for setting up page layout in the form of a static table.</p>"},{"location":"app-development/ui-components/grid.html#parameters","title":"Parameters","text":"<p>Component properties</p> Setting field Value Options Purpose Name - Name of the UI Component in the system <p>CSS properties</p> Settings group Setting fields Value Options Purpose Layout Column - Number of table columns Row - Number of table rows Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/grid.html#cases","title":"Cases","text":"<ul> <li>Content Structuring: Effective distributing and organizing elements on a page.</li> <li>Responsive Design: Supports various screen sizes and orientations.</li> </ul>"},{"location":"app-development/ui-components/grid.html#exceptions","title":"Exceptions","text":"<ul> <li>Difficulty in Management: Requires precise sizing and placement of elements.</li> </ul>"},{"location":"app-development/ui-components/html.html","title":"HTML","text":""},{"location":"app-development/ui-components/html.html#html","title":"HTML","text":""},{"location":"app-development/ui-components/html.html#general-information","title":"General information","text":"<p>HTML is the component that allows you to integrate raw HTML code directly into the user interface. It's ideal for showcasing user content, including text, images, tables, and other elements that can be created and manipulated using standard HTML.</p>"},{"location":"app-development/ui-components/html.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Html Button Contains space for editing Html code <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/html.html#use-cases","title":"Use Cases","text":"<ul> <li>Dynamic Content: Ideal for dynamically displaying content that requires HTML formatting, such as articles or blogs.</li> <li>Interactivity: Allows you to integrate interactive elements, such as shapes or animations, directly into the user interface.</li> </ul>"},{"location":"app-development/ui-components/html.html#exceptions","title":"Exceptions","text":"<ul> <li>Browser Compatibility: HTML code should be carefully checked for compatibility with different browsers and devices to ensure correct display.</li> </ul>"},{"location":"app-development/ui-components/hyperlink.html","title":"Hyperlink","text":""},{"location":"app-development/ui-components/hyperlink.html#hyperlink","title":"Hyperlink","text":""},{"location":"app-development/ui-components/hyperlink.html#general-information","title":"General information","text":"<p>Hyperlink in the Platform is a front-end component for creating hyperlinks. It allows users to easily navigate between different parts of the app or to external resources, ensuring efficient and intuitive navigation.</p>"},{"location":"app-development/ui-components/hyperlink.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Label - Contains the name of the text container Binding Multiselect of Catalog Contains a related \u201cUri\u201d field from the model Value - Allows you to specify a static value for the field, used to specify a link Text Font size - The property determines the font size Color - A module in CSS that works with colors, color types, and transparency. Bold true, false Property that allows you to make text bold Italic true, false Property that allows you to italicize the text Text alignment Left, Right, Center, Justify The property is used to set the horizontal alignment of the text <p>CSS properties</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/hyperlink.html#cases","title":"Cases","text":"<ul> <li>Site Navigation: Used to create links to other pages of the application or external websites, improving the user interface.</li> <li>User Experience Enhancement: Provides easy access to important resources and information, improving the user experience with the app.</li> </ul>"},{"location":"app-development/ui-components/hyperlink.html#exceptions","title":"Exceptions","text":"<ul> <li>Functionality Limitations: A hyperlink may have limited interoperability by offering only basic click-through functionality.</li> <li>Context Dependency: It is important to consider the context in which links are used to ensure effective navigation and avoid misunderstandings.</li> </ul>"},{"location":"app-development/ui-components/image.html","title":"Image","text":""},{"location":"app-development/ui-components/image.html#image","title":"Image","text":""},{"location":"app-development/ui-components/image.html#general-information","title":"General information","text":"<p>The Image component is used to display images in the user interface. This component is a key element for visualization and can be used to display photos, illustrations, and other graphical elements.</p>"},{"location":"app-development/ui-components/image.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Binding Multiselect of Catalog Contains a related \u201cFile\u201d field from the model File Button Allows you to upload a file with the .png, .jpg, and .svg extensions Show placeholder image True, False Display of the placeholder image No image placeholder Choose file from the disk, choose file from the storage Placeholder image if no image is loaded <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/image.html#cases","title":"Cases","text":"<ul> <li>Photo Display: Used to display custom photos, product images and other objects.</li> <li>Illustrations and Graphics: Applicable to display illustrations, graphic elements and logos.</li> </ul>"},{"location":"app-development/ui-components/image.html#exceptions","title":"Exceptions","text":"<ul> <li>Performance: Using large or multiple images on a page can affect performance.</li> </ul>"},{"location":"app-development/ui-components/label.html","title":"Label","text":""},{"location":"app-development/ui-components/label.html#label","title":"Label","text":""},{"location":"app-development/ui-components/label.html#general-information","title":"General information","text":"<p>Label is a basic UI component designed to display non-editable text fields on screenshots. This component is widely used to add descriptive text, titles, or simply display information that the user cannot change.</p>"},{"location":"app-development/ui-components/label.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Name - Name of the UI Component in the system Text Font size - Size of the font Color - Text color (CSS) Bold true, false Bold font Italic true, false Italic font Text alignment Left, Right, Center, Justify Text alignment Common Binding Multiselect of Catalog Binding to Data Value - Static field value Format - Data input/output format (For DataTime) <p>CSS Properties:</p> Settings group Setting Field Value Options Purpose Layout Align items None, Center, End, Start, Stretch Aligning elements in a flex container Width - Component width Height - Component height Grow true, false Stretching a component in a container Margin - Outer padding Padding - Inner padding Appearance CornerRadius - Corner radius BorderThickness - Border thickness Brush Background - Background color BorderBrush - Border color"},{"location":"app-development/ui-components/label.html#cases","title":"Cases","text":"<ul> <li>Information Tips: Using a label to provide supporting information next to other UI elements, such as explaining the functions of buttons or input data.</li> <li>Section Headings: Labels can serve as headings for different sections of the interface, clearly delineating content to improve the user experience.</li> <li>Status Display: In cases where it is necessary to display the status or result of an operation, a label can be used to display the corresponding messages (for example, \u201cLoading...\u201d, \u201cSuccessfully completed\u201d).</li> </ul>"},{"location":"app-development/ui-components/label.html#exceptions","title":"Exceptions","text":"<ul> <li>Non-Editability: Label is not intended for user input or editing of text. Trying to use it for these purposes will result in ineffective interface design.</li> <li>Format Restrictions: While label allows a certain level of text customization, it cannot contain complex text elements such as hyperlinks or inline images.</li> </ul>"},{"location":"app-development/ui-components/layout.html","title":"Layout","text":""},{"location":"app-development/ui-components/layout.html#layout","title":"Layout","text":"<p>Components for organizing and structuring your application's layout.</p> <ul> <li>Page</li> <li>Panel</li> <li>Grid</li> </ul>"},{"location":"app-development/ui-components/list-view.html","title":"List View","text":""},{"location":"app-development/ui-components/list-view.html#list-view","title":"List view","text":""},{"location":"app-development/ui-components/list-view.html#general-information","title":"General information","text":"<p>\u201cList View\u201d is a UI component used for displaying and configuring the \u201ccard\u201d presentation of data.</p>"},{"location":"app-development/ui-components/list-view.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting Field Value Options Purpose Name - Name of the UI Component in the system Common Component Multiselect of Catalog Contains a list of all Components Number of columns - Number of container columns Number of rows - Number of container rows Column gap - Column spacing Row gap - Line spacing Page size - Container size Manual reload true, false Ability to manually reload data Hide page selector true, false Hide page selector Enable drag and drop true, false Enable drag-and-drop feature Drag and drop group - Drag-and-drop group (if any) Automation id - ID for automation Events On datasource loaded - Data source load event On loaded - Component load event On drop - Drag-and-drop event <p>CSS properties</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Margin - Outer padding of the component Padding - Inner padding of the component Visible true, false Component Visibility Hidden true, false Component concealment Orientation Horizontal, Vertical Component orientation Appearance CornerRadius - Radius of corner rounding BorderThickness - Component border thickness Opacity - Component transparency Brush Background - Component background color BorderBrush - Component border color"},{"location":"app-development/ui-components/list-view.html#using-drag-and-drop-feature","title":"Using drag-and-drop feature","text":"<p>First, in the \u201cCommon\u201d group of settings, you need to select the following option:</p> <p></p> <p>After saving and publishing, drag-and-drop will already be available for this list-view on the work-place. For the subsequent correct operation, you need to go to the component script and prepare the function for handling the drag-and-drop (on drop) event. </p> <p>Here's an example of the function applied to a canban board that consists of a main list-view and a nested list-view. The main one performs the function of the stages of the sales funnel and is in a horizontal position, while the nested one contains the deals themselves and is in a vertical position. The function takes the ID of the object being dragged (in this case, the deal) and the stage to which the deal is transferred, then calls the dataflow and, if completed successfully, updates the list-view, moving the deal to a new stage:</p> Python<pre><code>def OnMove(dstList, srcList, dataObject, oldIdx, newIdx):\n    context.Logger.Info(\"Callback on move\")\n    # The new Busy(boolean) method puts the UIElement into a loading status,\n    # showing or hiding the loader\n    srcList.Busy(True)\n    dstList.Busy(True)\n\n    # The new GetDynamicFilterValue(string) method computes the value of a Dynamic filter.\n    # If there are two filters on one field, the first in the list is computed\n    stage = dstList.GetDynamicFilterValue(\"data.Stage\")\n\n    # Creating a model to call the data-flow\n    flowModel = {\"Stage\": stage, \"OrderId\": dataObject.Id}\n    # Calling the data-flow with a new overload for onComplete and onError\n    context.ExecuteDataflow(\"783cf3e3-d8f8-4551-8447-13be4f738e41\", flowModel, \n    lambda res: OnDataflowComplete(res, dstList, srcList), \n    lambda ex: OnDataflowError(ex, dstList, srcList))\n\ndef OnDataflowComplete(dataResult, dstList, srcList):\n    # The new Busy(boolean) method puts the UIElement into a loading status,\n    # showing or hiding the loader\n    srcList.Busy(False)\n    dstList.Busy(False)\n    # Refreshing the lists\n    srcList.Refresh()\n    dstList.Refresh()\n\ndef OnDataflowError(exception, dstList, srcList):\n    # The new Error(boolean, string) method puts the UIElement into an error status,\n    # displaying the error message\n    srcList.Error(True, \"An error occurred\")\n    dstList.Error(True)\n    context.Logger.Error(exception, \"An error occurred during the data-flow call\")\n</code></pre>"},{"location":"app-development/ui-components/list-view.html#cases","title":"Cases","text":"<ul> <li>Data Display: Effective for presenting data in the form of cards or lists.</li> <li>User Interface: Suitable for interfaces that require representation of information in the form of cards or lists.</li> </ul>"},{"location":"app-development/ui-components/list-view.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Flexibility: Not suitable for displaying data beyond the card or list format, as it specializes in a specific visual representation.</li> <li>Visual Limitations: The style and design may be limited by CSS settings, which may not meet all the design requirements.</li> </ul>"},{"location":"app-development/ui-components/multiselect.html","title":"Multiselect","text":""},{"location":"app-development/ui-components/multiselect.html#multiselect","title":"Multiselect","text":""},{"location":"app-development/ui-components/multiselect.html#general-information","title":"General information","text":"<p>\u201cMultiselect\u201d is a UI component designed to display and configure multi-select reference lists. Works only with the Array field type.</p>"},{"location":"app-development/ui-components/multiselect.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cArray\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/multiselect.html#cases","title":"Cases","text":""},{"location":"app-development/ui-components/multiselect.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Functionality: Only suitable for \u201cArray\u201d data.</li> </ul>"},{"location":"app-development/ui-components/number.html","title":"Number","text":""},{"location":"app-development/ui-components/number.html#number","title":"Number","text":""},{"location":"app-development/ui-components/number.html#general-information","title":"General information","text":"<p>The \u201cNumber\u201d component is an interface for entering numeric values. This component allows users to enter numbers and can be used for various purposes such as entering numbers, quantities or other numeric data.</p>"},{"location":"app-development/ui-components/number.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains the associated \u201cInteger\u201d and \u201cNumber\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/number.html#cases","title":"Cases","text":"<ul> <li>Entering Numeric Values: Users can enter numbers into the Number component, such as product quantities or numeric parameters.</li> <li>Range Limit: Minimum and maximum values \u200b\u200ballow you to limit the numbers you enter to a specific range.</li> <li>Change Number Using Arrows: Users can increase or decrease a number using the up and down arrows.</li> </ul>"},{"location":"app-development/ui-components/number.html#exceptions","title":"Exceptions","text":"<ul> <li>Non-Numeric Data Entry: Only numeric data can be entered</li> </ul>"},{"location":"app-development/ui-components/page.html","title":"Page","text":""},{"location":"app-development/ui-components/page.html#page","title":"Page","text":""},{"location":"app-development/ui-components/page.html#general-information","title":"General information","text":"<p>\u201cPage\u201d is a UI component for creating and customizing pages in an application, providing structure and organization of the content.</p>"},{"location":"app-development/ui-components/page.html#parameters","title":"Parameters","text":"<p>Component properties</p> Setting field Value Options Purpose Name - Name of the UI Component in the system Title - Page name"},{"location":"app-development/ui-components/page.html#cases","title":"Cases","text":"<ul> <li>Content Organization: Creation of separate pages for separating and organizing application content.</li> <li>Navigation: Providing clear and efficient navigation between different sections of the application.</li> </ul>"},{"location":"app-development/ui-components/page.html#exceptions","title":"Exceptions","text":"<ul> <li>Application Specifics: Limited to use as a structural element of an interface, not suitable for other purposes.</li> </ul>"},{"location":"app-development/ui-components/panel.html","title":"Panel","text":""},{"location":"app-development/ui-components/panel.html#panel","title":"Panel","text":""},{"location":"app-development/ui-components/panel.html#general-information","title":"General information","text":"<p>\u201cPanel\u201d is a UI component designed to display and configure the basic container. It is used to position and organize elements in the application.</p>"},{"location":"app-development/ui-components/panel.html#parameters","title":"Parameters","text":"<p>Component properties</p> Setting field Value Options Purpose Name - Name of the UI Component in the system <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Orientation Horizontal, Vertical The property allows making changes depending on the display orientation Justify-content None, Center,End, Start, Space around, space between, space evenly The property defines the alignment along the main axis Align items None, Center,End, Start, Stretch The align-items property aligns all elements inside the flex container Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/panel.html#cases","title":"Cases","text":"<ul> <li>Interface Organization: Used to structure and place interface elements.</li> </ul>"},{"location":"app-development/ui-components/panel.html#exceptions","title":"Exceptions","text":"<ul> <li>Specialized Use: Suitable for organizing elements only, not intended for other functions.</li> </ul>"},{"location":"app-development/ui-components/password.html","title":"Password","text":""},{"location":"app-development/ui-components/password.html#password","title":"Password","text":""},{"location":"app-development/ui-components/password.html#general-information","title":"General information","text":"<p>Password is a basic UI component designed for entering passwords in a secure form. This component is used to create password entry fields, ensuring the confidentiality and protection of the entered data.</p>"},{"location":"app-development/ui-components/password.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Show clear true, false Shows the clear (reset) icon of the field value Auto complete Field for setting the value of the autocomplete HTML attribute. As a rule, use username for the name input field, and password, new-password, or current-password for the corresponding input fields for different password types. Works in conjunction with the Provide Root Form parameter for Page UI control. Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cString\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field On key down Allows you to run the specified script after moving to the next page element (tab) On key up Allows you to run the specified script after moving to the previous page element (tab) On focus Allows you to run a script the moment an element is focused on Tab index Positive integer starting from zero Sets the order in which active (editable) fields are toggled via the keyboard (for example, using the Tab key) Automation ID Control ID for automated tests and for transferring CSS settings <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/password.html#cases","title":"Cases","text":"<ul> <li>Authentication Forms: Used in login and registration forms for securely entering passwords.</li> <li>Interactive Forms: Enabling interactive forms that require confidential data entry.</li> </ul>"},{"location":"app-development/ui-components/password.html#exceptions","title":"Exceptions","text":"<ul> <li>Formatting Limitations: Does not support complex text formats such as hyperlinks or embedded images.</li> </ul>"},{"location":"app-development/ui-components/pdf-viewer.html","title":"PDF Viewer","text":""},{"location":"app-development/ui-components/pdf-viewer.html#pdf-viewer","title":"Pdf viewer","text":""},{"location":"app-development/ui-components/pdf-viewer.html#general-information","title":"General information","text":"<p>The PDF Viewer component allows you to view and interact with PDF documents directly in the user interface. This component is useful for displaying PDF files such as reports, instructions, and other documents.</p>"},{"location":"app-development/ui-components/pdf-viewer.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Binding Multiselect of Catalog Contains a related \u201cFile\u201d field from the model File Button Allows you to upload a file with a .pdf extension <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/pdf-viewer.html#cases","title":"Cases","text":"<ul> <li>Viewing Reports: Allows users to view reports and documentation in PDF format.</li> </ul>"},{"location":"app-development/ui-components/pdf-viewer.html#exceptions","title":"Exceptions","text":"<ul> <li>Format Limitations: PDF Viewer supports standard PDF documents but may not correctly display complex formats or protected documents.</li> <li>Performance: Using large PDF documents or a large number of interactive elements can affect performance.</li> </ul>"},{"location":"app-development/ui-components/phone-number.html","title":"Phone Number","text":""},{"location":"app-development/ui-components/phone-number.html#phone-number","title":"Phone Number","text":""},{"location":"app-development/ui-components/phone-number.html#general-information","title":"General information","text":"<p>Phone Number is a UI component designed to enter and display phone numbers. This component facilitates the entry of telephone numbers, ensuring correct formatting and validation of the entered data.</p>"},{"location":"app-development/ui-components/phone-number.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cString\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> <p>| Settings group | Setting field   | Value Options | Purpose                                                                                                                   | | -------------- | --------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------- | --- | ------------ | | Layout         | Width           | -             | Component width                                                                                                           | |                | Height          | -             | Component height                                                                                                          | |                | Grow            | true, false   | The property determines how much an element will grow relative to the rest of the flex elements within the same container | |                | Margin          | -             | The property defines the outer paddings on all four sides of the element                                                  | |                | Padding         | -             | The property sets the inner paddings on all sides of the element                                                          | | Appearance     | CornerRadius    | -             | The property is used to round the corners of an element                                                                   | |                | BorderThickness | -             | The property allows you to set the boundaries for the element                                                             | | Brush          | Background      | -             | The property sets the background color of the element                                                                     | |                | BorderBrush     | -             | The property sets the color of the element's border                                                                       |     | Border color |</p>"},{"location":"app-development/ui-components/phone-number.html#cases","title":"Cases","text":"<ul> <li>Number Format Validation: Used to validate the entered phone number to ensure it follows a specific national or international format.</li> </ul>"},{"location":"app-development/ui-components/phone-number.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Formatting Options: The feature may not support all possible phone number formats, especially non-standard or regional variants.</li> <li>Sensitivity to Input Errors: Invalid user input may result in errors in phone number processing.</li> </ul>"},{"location":"app-development/ui-components/pivot-grid.html","title":"Pivot Grid","text":""},{"location":"app-development/ui-components/pivot-grid.html#pivot-grid","title":"Pivot grid","text":""},{"location":"app-development/ui-components/pivot-grid.html#general-information","title":"General information","text":"<p>Pivot Grid is an advanced UI component designed to summarize, analyze and present large amounts of data. This component allows you to efficiently analyze and map complex data sets, and also provides convenient tools for data manipulation and visualization.</p>"},{"location":"app-development/ui-components/pivot-grid.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Purpose Pivot data grid Name System component identifier Component Component to which the Pivot Grid belongs Columns Defining columns and their properties <p>CSS Properties:</p> Settings group Setting Field Purpose Appearance Corner radius Corner radius Border thickness Border thickness Opacity Component transparency Layout Width Component width Height Component height Grow Component growth Margin Outer padding Padding Inner padding Visible Component Visibility Hidden Hiding a Component Brush Background Background color Border brush Border color <p>Pivot Grid configuration model:</p> Setting Field Purpose Enable export Enabling data export Enable field choose Enabling field selection Show column grand totals Showing grand totals by column Show row grand totals Showing grand totals by row Show borders Border display Encode HTML HTML coding Show column fields Showing column fields Show data fields Showing data fields Show filter fields Showing filter fields Show row fields Showing row fields Allow field dragging Allowing fields to be dragged Automation id Automation ID"},{"location":"app-development/ui-components/pivot-grid.html#cases","title":"Cases","text":"<ul> <li>Data Analysis: Pivot Grid is ideal for collecting, analyzing and summarizing data, especially when you need to quickly map different parameters.</li> <li>Reports and Dashboards: Great for creating interactive reports and dashboards where you need to aggregate data and present it in a form convenient for analysis.</li> </ul>"},{"location":"app-development/ui-components/pivot-grid.html#exceptions","title":"Exceptions","text":"<ul> <li>Not for Basic Data Presentation: If you just want to display data in tabular form without analytical processing, it is better to use a regular Data Grid.</li> </ul>"},{"location":"app-development/ui-components/progress-bar.html","title":"Progress Bar","text":""},{"location":"app-development/ui-components/progress-bar.html#progress-bar","title":"Progress Bar","text":""},{"location":"app-development/ui-components/progress-bar.html#general-information","title":"General information","text":"<p>This UI Component is used to display and configure the progress bar.</p>"},{"location":"app-development/ui-components/progress-bar.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting Field Value Options Purpose Name - Name of the UI Component in the system Common Show value true, false The property is used to display the progress bar values Determinate true, false The property allows you to make the progress bar an animation Invert true, false The property allows you to invert the progress bar Format - The property allows you to specify the data output format Value - The property allows you to set a value Binding Multiselect of Catalog Contains the associated \u201cInteger\u201d field from the model Min value - The property allows you to specify a minimum value Binding Multiselect of Catalog Contains the associated \u201cInteger\u201d field from the model for the minimal value Max value - The property allows you to specify a maximum value Binding Multiselect of Catalog Contains the associated \u201cInteger\u201d field from the model for the maximal value <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border Progress - The property sets the color of the element's bar"},{"location":"app-development/ui-components/progress-bar.html#use-cases","title":"Use Cases","text":"<ul> <li>Displaying the progress of tasks, downloads, or other processes.</li> </ul>"},{"location":"app-development/ui-components/progress-bar.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited to use for progress presentation and not suitable for other types of visualizations.</li> </ul>"},{"location":"app-development/ui-components/radio-button.html","title":"Radio Button","text":""},{"location":"app-development/ui-components/radio-button.html#radio-button","title":"Radio button","text":""},{"location":"app-development/ui-components/radio-button.html#general-information","title":"General information","text":"<p>The \u201cRadio Button\u201d component is an interface element that allows the user to select one of the provided options. This component is used to implement the selection of a single element from several mutually exclusive options.</p>"},{"location":"app-development/ui-components/radio-button.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cCatalog\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field On focus Allows you to run the specified script when focused <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/radio-button.html#cases","title":"Cases","text":"<ul> <li>Single Option Selection: Users can only select one option from the list.</li> <li>Mutually Exclusive Options: The Radio Button component is used to create a set of mutually exclusive options from which only one can be selected.</li> </ul>"},{"location":"app-development/ui-components/radio-button.html#exceptions","title":"Exceptions","text":"<ul> <li>Not Enough Information: If the radio button labels are not sufficiently informative, users may have difficulty selecting options.</li> <li>Difficult Choice: With a large number of radio buttons or unclear organization, the choice can be difficult for users.</li> </ul>"},{"location":"app-development/ui-components/select.html","title":"Select","text":""},{"location":"app-development/ui-components/select.html#select","title":"Select","text":""},{"location":"app-development/ui-components/select.html#general-information","title":"General information","text":"<p>\u201cSelect\u201d is an interface element that allows the user to choose one option from the presented list. This component is widely used to create drop-down lists with a choice of option or category.</p>"},{"location":"app-development/ui-components/select.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cCatalog\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/select.html#cases","title":"Cases","text":"<ul> <li>Selection from the List: Users can select one option from a list of suggested options.</li> </ul>"},{"location":"app-development/ui-components/select.html#exceptions","title":"Exceptions","text":"<ul> <li>Unintuitive Interface: If the list is not intuitive or understandable to the user, it may cause difficulties in selecting an option.</li> <li>Download Speed: If the list is too long, loading the selected items will require additional waiting.</li> </ul>"},{"location":"app-development/ui-components/signature.html","title":"Signature","text":""},{"location":"app-development/ui-components/signature.html#signature","title":"Signature","text":""},{"location":"app-development/ui-components/signature.html#general-information","title":"General information","text":"<p>\u201cSignature\u201d is a UI component for displaying and configuring an electronic signature.</p>"},{"location":"app-development/ui-components/signature.html#parameters","title":"Parameters","text":"<p>Component properties:</p> <p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cString\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/signature.html#cases","title":"Cases","text":"<ul> <li>Electronic Signatures: Used to sign documents and forms.</li> <li>Action Confirmation: Suitable for confirming approvals or performing actions.</li> </ul>"},{"location":"app-development/ui-components/signature.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Use: Used only for scripts with  electronic signature.</li> </ul>"},{"location":"app-development/ui-components/slider.html","title":"Slider","text":""},{"location":"app-development/ui-components/slider.html#slider","title":"Slider","text":""},{"location":"app-development/ui-components/slider.html#general-information","title":"General information","text":"<p>\u201cSlider\u201d is a UI component used to display and customize a slider with images.</p>"},{"location":"app-development/ui-components/slider.html#parameters","title":"Parameters","text":"<p>Component properties:</p> Settings group Setting Field Value Options Purpose Name - Name of the UI Component in the system Common Columns Button Add a new object to a container Show arrows true, false Enabling arrows to switch images"},{"location":"app-development/ui-components/slider.html#cases","title":"Cases","text":"<ul> <li>Image Galleries: Great for creating interactive galleries or image carousels.</li> <li>Interactive Presentations: Used to showcase products, projects, or any other visual content.</li> </ul>"},{"location":"app-development/ui-components/slider.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Use: Not suitable for text or other content that does not involve a slider view.</li> <li>Visual Settings: Limited customization options for slider visual elements.</li> </ul>"},{"location":"app-development/ui-components/svg.html","title":"SVG","text":""},{"location":"app-development/ui-components/svg.html#svg","title":"SVG","text":""},{"location":"app-development/ui-components/svg.html#general-information","title":"General information","text":"<p>SVG (Scalable Vector Graphics) is a component for integrating vector graphics into user interfaces. It allows you to display images, making it ideal for icons, diagrams, and complex illustrations.</p>"},{"location":"app-development/ui-components/svg.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting Field Value Options Purpose Name - Name of the UI Component in the system Common Binding Multiselect of Catalog Contains a related \u201cFile\u201d field from the model File Button Allows you to upload a file with an .svg extension <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/svg.html#use-cases","title":"Use Cases","text":"<ul> <li>Icons and Illustrations: Used to add clear and scalable graphic elements.</li> </ul>"},{"location":"app-development/ui-components/svg.html#exceptions","title":"Exceptions","text":"<ul> <li>Performance: Complex or large SVG images can affect web page performance.</li> </ul>"},{"location":"app-development/ui-components/switch.html","title":"Switch","text":""},{"location":"app-development/ui-components/switch.html#switch","title":"Switch","text":""},{"location":"app-development/ui-components/switch.html#general-information","title":"General information","text":"<p>The \u201cSwitch\u201d component is an interface element that allows the user to enable or disable a specific function, option, or state. This component is often used to provide the ability to quickly switch between two states (True/False).</p>"},{"location":"app-development/ui-components/switch.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cCatalog\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/switch.html#cases","title":"Cases","text":"<ul> <li>Binary Selection: Switch is used for binary selections such as on/off sound, notifications, and other options.</li> <li>State Management: You can use Switch to manage the state of a particular interface element.</li> </ul>"},{"location":"app-development/ui-components/switch.html#exceptions","title":"Exceptions","text":"<ul> <li>Unclear Status: If it is not obvious what the enabled and disabled status means, users may be confused.</li> </ul>"},{"location":"app-development/ui-components/tab-control.html","title":"Tab Control","text":""},{"location":"app-development/ui-components/tab-control.html#tab-control","title":"Tab Control","text":""},{"location":"app-development/ui-components/tab-control.html#general-information","title":"General information","text":"<p>\u201cTab Control\u201d is a UI component for displaying and configuring tabs, providing organization of content into separate tabs.</p>"},{"location":"app-development/ui-components/tab-control.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting Field Value Options Purpose Name - Name of the UI Component in the system Common Tab panels Button Allows you to add a new tab <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/tab-control.html#cases","title":"Cases","text":"<ul> <li>Content Organization: Efficiently organizes different sections of information or functionality in tabs.</li> <li>User Interface: Improves the navigation and accessibility of app sections.</li> </ul>"},{"location":"app-development/ui-components/tab-control.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Use: Not suitable for single content, requires tabbing.</li> </ul>"},{"location":"app-development/ui-components/text-area.html","title":"Text Area","text":""},{"location":"app-development/ui-components/text-area.html#text-area","title":"Text area","text":""},{"location":"app-development/ui-components/text-area.html#general-information","title":"General information","text":"<p>Text area is a basic UI component designed to input and display multi-line text. It is ideal for typing large amounts of text, such as comments or descriptions, and provides enough room for easy typing.</p>"},{"location":"app-development/ui-components/text-area.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Name - Name of the UI Component in the system Common Disabled true, false Disabling an element Auto size true, false Automatic dimension control Required true, false Required field to fill out Label - Input field description Binding Multiselect of Catalog Data binding Events On value changed - Value change event Tab index - Integer Field switching order <p>CSS Properties:</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false Component stretching Margin - Outer padding Padding - Inner padding Appearance CornerRadius - Corner radius BorderThickness - Border thickness Brush Background - Background color BorderBrush - Border color"},{"location":"app-development/ui-components/text-area.html#cases","title":"Cases","text":"<ul> <li>Multi-Line Input: Ideal for forms that require large amounts of text.</li> <li>Comments &amp; Descriptions: Used to write comments, descriptions, or any other script where multi-line input is required.</li> </ul>"},{"location":"app-development/ui-components/text-area.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Formatting: Like most text input fields, the text area restricts the use of complex formatting, such as hyperlinks or embedded images.</li> </ul>"},{"location":"app-development/ui-components/text-field.html","title":"Text Field","text":""},{"location":"app-development/ui-components/text-field.html#text-field","title":"Text Field","text":""},{"location":"app-development/ui-components/text-field.html#general-information","title":"General information","text":"<p>\u201cText Field\u201d is a UI component designed to display and configure text input and output.</p>"},{"location":"app-development/ui-components/text-field.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cString\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field Tab index Positive integer starting from zero Sets the order in which active (editable) fields are toggled via the keyboard (for example, using the Tab key) <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/text-field.html#cases","title":"Cases","text":"<ul> <li>Data Entry Forms: Used to collect text information from users.</li> <li>Interface Settings: Provides a user interface for entering or modifying text.</li> </ul>"},{"location":"app-development/ui-components/text-field.html#exceptions","title":"Exceptions","text":"<ul> <li>Limited Functionality: Suitable for text input only.</li> </ul>"},{"location":"app-development/ui-components/time.html","title":"Time","text":""},{"location":"app-development/ui-components/time.html#time","title":"Time","text":""},{"location":"app-development/ui-components/time.html#general-information","title":"General information","text":"<p>Time is a UI component designed to enter and display time. This element is typically used to set the time of events or tasks, and to display the time in application interfaces.</p>"},{"location":"app-development/ui-components/time.html#parameters","title":"Parameters","text":"<p>Component properties</p> Settings group Setting field Value Options Purpose Name - Name of the UI Component in the system Common Disabled true, false The property allows you to disable an element on the form Required true, false The property makes the element required to be filled out prior to submitting the form Label - Contains the table of contents of the text container Binding Multiselect of Catalog Contains a related \u201cTime\u201d field from the model Events On value changed - Allows you to run the specified script after changing the value of the field <p>CSS properties</p> Settings group Setting field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false The property determines how much an element will grow relative to the rest of the flex elements within the same container Margin - The property defines the outer paddings on all four sides of the element Padding - The property sets the inner paddings on all sides of the element Appearance CornerRadius - The property is used to round the corners of an element BorderThickness - The property allows you to set the boundaries for the element Brush Background - The property sets the background color of the element BorderBrush - The property sets the color of the element's border"},{"location":"app-development/ui-components/time.html#cases","title":"Cases","text":"<ul> <li>Time Setting: Used to set a specific time in schedulers and calendars.</li> <li>Time Entry: Provides an interface for the user to enter time for various purposes.</li> </ul>"},{"location":"app-development/ui-components/time.html#exceptions","title":"Exceptions","text":"<ul> <li>Time Formatting: You must be aware of the time format restrictions set in the component settings.</li> <li>Time Only: The Time component is limited to displaying and entering only the time, with no dates.</li> </ul>"},{"location":"app-development/ui-components/tree-view.html","title":"Tree View","text":""},{"location":"app-development/ui-components/tree-view.html#tree-view","title":"Tree View","text":""},{"location":"app-development/ui-components/tree-view.html#general-information","title":"General information","text":"<p>\u201cTree View\u201d is a UI component for displaying and customizing data in a hierarchical form, which facilitates navigation and presentation of complex data structures.</p>"},{"location":"app-development/ui-components/tree-view.html#parameters","title":"Parameters","text":"<p>Component properties:</p> Settings group Setting Field Value Options Purpose Name - Name of the UI Component in the system Common Data object Multiselect of Catalog Contains a list of all Components Group by Multiselect of Catalog Property for grouping data by selected field Add order field Button The property is used to add sorting fields Order fields Multiselect of Catalog Allows you to select the field by which to sort. Events On datasource loaded - Allows you to run the specified script when the data source is full"},{"location":"app-development/ui-components/tree-view.html#cases","title":"Cases","text":"<ul> <li>Visualization of Hierarchies: Great for presenting hierarchical data, such as organizational structure or product classification.</li> </ul>"},{"location":"app-development/ui-components/tree-view.html#exceptions","title":"Exceptions","text":"<ul> <li>Customization Complexity: Requires careful configuration to correctly display complex data structures.</li> </ul>"},{"location":"app-development/ui-components/wysiwyg-editor.html","title":"WYSIWYG Editor","text":""},{"location":"app-development/ui-components/wysiwyg-editor.html#wysiwyg-editor","title":"WYSIWYG editor","text":""},{"location":"app-development/ui-components/wysiwyg-editor.html#general-information","title":"General information","text":"<p>WYSIWYG editor is a UI component designed for entering and editing rich text in WYSIWYG format. It provides functionality similar to editors like Wordpad, allowing users to easily format text and insert various media elements.</p>"},{"location":"app-development/ui-components/wysiwyg-editor.html#parameters","title":"Parameters","text":"<p>Component Properties:</p> Settings group Setting Field Value Options Purpose (Global settings) Name - Name of the UI Component in the system Common Disabled true, false Disabling an element Required true, false Required field to fill out Plugins - Enabling plugins Label - Field description Binding Multiselect of Catalog Data binding Events On value changed - Value change event On key down - Key press event On key up - Key release event On focus - Event when focusing on an element Tab index - Integer Field switching order <p>CSS Properties:</p> Settings group Setting Field Value Options Purpose Layout Width - Component width Height - Component height Grow true, false Component stretching Margin - Outer padding Padding - Inner padding Appearance CornerRadius - Corner radius BorderThickness - Border thickness Brush Background - Background color BorderBrush - Border color"},{"location":"app-development/ui-components/wysiwyg-editor.html#cases","title":"Cases","text":"<ul> <li>Text Formatting: Used to create richly formatted documents and content.</li> <li>Content Editing: Used in content management systems to facilitate editing articles, blogs, and other text content.</li> </ul>"},{"location":"app-development/ui-components/wysiwyg-editor.html#exceptions","title":"Exceptions","text":"<ul> <li>Interface Complexity: May be difficult to use for users without experience with similar editors.</li> <li>Technical Limitations: Depending on implementation, may not support all features of advanced text editors.</li> </ul>"},{"location":"app-development/workflow-components/index.html","title":"Workflow","text":""},{"location":"app-development/workflow-components/index.html#workflow_1","title":"Workflow","text":""},{"location":"app-development/workflow-components/index.html#workflow","title":"What is workflow?","text":"<p>Workflow is a mechanism for managing states and tasks in various component scripts on the platform. It allows you to organize the sequential execution of tasks, maintaining states and providing the ability to restart in case of failure.</p>"},{"location":"app-development/workflow-components/index.html#how-do-i-create-a-workflow","title":"How do I create a workflow?","text":"<ol> <li>Open Toolbox: Open the Toolbox menu in the components window and go to the Flows tab.</li> <li>Add Workflow: Click on the Workflow icon and drag it to the workspace. A new workflow will appear to be configured.</li> </ol> <p>Using Visual builder of Workflow, you can configure a workflow script:</p> <ul> <li>Adding Stages and Steps: The editor allows you to add Stages and Steps that form the workflow logic.</li> <li>Sequence Configuring: Scripts are run from top to bottom and left to right, allowing you to create a consistent flow of tasks.</li> </ul>"},{"location":"app-development/workflow-components/index.html#workflow-parameters","title":"Workflow Parameters","text":"<ul> <li>Workflow name: The name used to identify the workflow in the component.</li> <li>Restrict Access: When set to \"Yes\", creates a security context for workflow.</li> </ul>"},{"location":"app-development/workflow-components/index.html#editing-workflow-stages-and-steps","title":"Editing Workflow Stages and Steps","text":"<ul> <li>Add Stages: Using the \"+\" button, you can add new stages.</li> <li>Delete Stages: The \"X\" button allows you to delete unnecessary stages.</li> <li>Edit Stages: Only the stage name can be changed.</li> <li>Add and Delete Steps: Steps can be added and removed within stages, defining specific workflow actions.</li> </ul>"},{"location":"app-development/workflow-components/index.html#notifications-group","title":"Notifications Group","text":"<p>Components for sending notifications and confirmations:</p> <ul> <li>Notifications Steps - Overview of notification steps</li> <li>Send Notification - Send notifications to users</li> <li>Send Templated Notification - Send template-based notifications</li> <li>Get User Confirmation - Request user confirmation</li> </ul>"},{"location":"app-development/workflow-components/index.html#integrations-group","title":"Integrations Group","text":"<p>Components for integrating with other systems:</p> <ul> <li>Integrations Steps - Overview of integration steps</li> <li>Execute Dataflow - Execute dataflow from workflow</li> </ul>"},{"location":"app-development/workflow-components/index.html#common-group","title":"Common Group","text":"<p>Common workflow operations:</p> <ul> <li>Common Steps - Overview of common steps</li> <li>Update Model - Update data model</li> <li>Finish - Complete workflow execution</li> <li>Update Model Field - Update specific model field</li> <li>Reset to Draft - Reset workflow to draft state</li> </ul>"},{"location":"app-development/workflow-components/index.html#conditions-group","title":"Conditions Group","text":"<p>Conditional logic and branching:</p> <ul> <li>Conditions Steps - Overview of condition steps</li> <li>Switch Case - Switch-case branching</li> <li>If Condition - Conditional branching</li> </ul>"},{"location":"app-development/workflow-components/common-steps.html","title":"Common Steps","text":""},{"location":"app-development/workflow-components/common-steps.html#common-groupseparator","title":"\u201cCOMMON\u201d GROUP|separator","text":"<ul> <li>Update model</li> <li>Finish</li> <li>Update model field</li> <li>Reset to draft</li> </ul>"},{"location":"app-development/workflow-components/conditions-steps.html","title":"Conditions Steps","text":""},{"location":"app-development/workflow-components/conditions-steps.html#conditions-groupseparator","title":"\u201cCONDITIONS\u201d GROUP|separator","text":"<ul> <li>Switch case</li> <li>If condition</li> </ul>"},{"location":"app-development/workflow-components/execute-data-flow.html","title":"Execute dataflow","text":""},{"location":"app-development/workflow-components/execute-data-flow.html#execute-dataflow","title":"Execute dataflow","text":""},{"location":"app-development/workflow-components/execute-data-flow.html#general-information","title":"General information","text":"<p>The \u201cExecute DataFlow\u201d step within the workflow is used to enable and execute a specific Dataflow script. </p>"},{"location":"app-development/workflow-components/execute-data-flow.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Purpose Step name \u201cExecute data flow\u201d step name Linked data flow Choosing a dataflow script to run"},{"location":"app-development/workflow-components/execute-data-flow.html#cases","title":"Cases","text":"<ul> <li>Integration of Data Processing Processes: Used to run pre-defined Dataflows.</li> </ul>"},{"location":"app-development/workflow-components/execute-data-flow.html#exceptions","title":"Exceptions","text":"<ul> <li>Need to Fine-Tune Dataflow: It is important to accurately define and configure the Dataflow that will run to ensure that they run correctly and efficiently.</li> <li>Managing Workflow and Dataflow Dependencies: The interaction between Workflow and Dataflow must be carefully managed, especially in terms of data transfer and processing.</li> </ul>"},{"location":"app-development/workflow-components/finish.html","title":"Finish","text":""},{"location":"app-development/workflow-components/finish.html#finish","title":"Finish","text":""},{"location":"app-development/workflow-components/finish.html#general-information","title":"General information","text":"<p>The \u201cFinish\u201d step within a workflow is designed for completing the execution of the current Workflow. This step is typically used to explicitly specify the completion point of a workflow, especially in the alternative scripts defined in the Conditions block.</p>"},{"location":"app-development/workflow-components/finish.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Purpose Step name \u201cFinish\u201d step name"},{"location":"app-development/workflow-components/finish.html#cases","title":"Cases","text":"<ul> <li>Controlled Workflow Completion: Used to explicitly specify the completion point of a workflow, which is especially important in complex processes with many conditions and branches.</li> <li>Alternative Execution Paths: Suitable for scripts where a workflow needs to terminate under certain conditions that differ from the main flow of execution.</li> </ul>"},{"location":"app-development/workflow-components/finish.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for Proper Configuration: It's important to make sure that the \u201cFinish\u201d step is properly embedded in the workflow logic so that it doesn't interrupt the process prematurely or skip important steps.</li> </ul>"},{"location":"app-development/workflow-components/get-user-confirmation.html","title":"Get user confirmation","text":""},{"location":"app-development/workflow-components/get-user-confirmation.html#get-user-confirmation","title":"Get user confirmation","text":""},{"location":"app-development/workflow-components/get-user-confirmation.html#general-information","title":"General information","text":"<p>The \u201cGet User Confirmation\u201d step in the workflow is used to request confirmation or perform an action from the user. The step sends a notification to the user with a request to perform a specific action on the object, where the object is the state of the current model.</p>"},{"location":"app-development/workflow-components/get-user-confirmation.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - \u201cGet User Confirmation\u201d step name Confirmation field - Field with options to be requested from the user User info field Multiselect of Catalog Field with information about a user or group of users User routing Multiselect of Catalog Object that is a security context"},{"location":"app-development/workflow-components/get-user-confirmation.html#cases","title":"Cases","text":"<ul> <li>Request for User Confirmation: Ideal for scripts that require confirmation or choice of action from the user, such as confirming a transaction, agreeing to data processing, or choosing an answer option.</li> <li>Interactive User Participation in the Process: Suitable for a workflow, where it is important to take into account the user's decisions or choices to continue or change the process.</li> </ul>"},{"location":"app-development/workflow-components/get-user-confirmation.html#exceptions","title":"Exceptions","text":"<ul> <li>Ensuring the Request Is Clear: It is important to clearly formulate the confirmation request so that the user understands what action is expected from him.</li> <li>Managing User Responses: User responses should be adequately processed and taken into account, especially in situations where they determine the course of further actions in the workflow.</li> <li>Taking into Account the Security Context and Permissions: When using the User routing parameter, it is important to consider the security context and the corresponding user permissions.</li> </ul>"},{"location":"app-development/workflow-components/if-condition.html","title":"If Condition","text":""},{"location":"app-development/workflow-components/if-condition.html#if-condition","title":"If condition","text":""},{"location":"app-development/workflow-components/if-condition.html#general-information","title":"General information","text":"<p>The \u201cIf Condition\u201d step within the workflow is used to check the value of a field against the specified condition. This step allows you to implement conditional branching in a process where performing certain actions or moving to an alternative script depends on the result of a condition check. An alternative script must contain the \u201cFinish\u201d step.</p>"},{"location":"app-development/workflow-components/if-condition.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - \u201cIf Condition\u201d step name Condition field Multiselect of Catalog Condition validation field Operator Equal, Not equal, Great, Less Type of operator to check the condition Compare with null true, false Checking for comparison with null Value - Value to compare with the field"},{"location":"app-development/workflow-components/if-condition.html#cases","title":"Cases","text":"<ul> <li>Conditional Execution of Actions: Used to activate different parts of the workflow based on the values of certain fields, for example, to start different processes based on the status of the request.</li> <li>Logical Branching in Processes: Suitable for creating complex logical chains where different execution steps depend on the satisfaction of specific conditions.</li> </ul>"},{"location":"app-development/workflow-components/if-condition.html#exceptions","title":"Exceptions","text":"<ul> <li>Condition Definition Accuracy: It is important to accurately define conditions and properly configure the fields to validate them to avoid incorrect branching or errors in the workflow logic.</li> <li>Handling Different Scripts: You need to plan clearly how different scripts will be handled depending on the result of the condition check, especially in multi-step or complex workflows.</li> </ul>"},{"location":"app-development/workflow-components/integrations-steps.html","title":"Integrations Steps","text":""},{"location":"app-development/workflow-components/integrations-steps.html#integrations-groupseparator","title":"\u201cINTEGRATIONS\u201d GROUP|separator","text":"<ul> <li>Execute dataflow</li> </ul>"},{"location":"app-development/workflow-components/notifications-steps.html","title":"Notifications Steps","text":""},{"location":"app-development/workflow-components/notifications-steps.html#notifications-groupseparator","title":"\"NOTIFICATIONS\" GROUP|separator","text":"<ul> <li>Send notification</li> <li>Send templated notification</li> <li>Get user confirmation</li> </ul>"},{"location":"app-development/workflow-components/reset-to-draft.html","title":"Reset to draft","text":""},{"location":"app-development/workflow-components/reset-to-draft.html#reset-to-draft","title":"Reset to draft","text":""},{"location":"app-development/workflow-components/reset-to-draft.html#general-information","title":"General information","text":"<p>The \u201cReset to Draft\u201d step within the workflow is used to return the script to the \u201cnot running\u201d state. This step is useful in situations where you need to be able to edit or review a request or process while it is being approved or executed.</p>"},{"location":"app-development/workflow-components/reset-to-draft.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Purpose Step name \u201cReset to Draft\u201d step name"},{"location":"app-development/workflow-components/reset-to-draft.html#cases","title":"Cases","text":"<ul> <li>Editing During the Approval Process: Used to provide an opportunity to make changes to an application or process that is already in the approval or implementation stage, which may be necessary to correct or clarify the information.</li> <li>Flexible Process Management: Suitable for scripts where you need the ability to roll back a process to its initial state to prevent errors or incorrect execution.</li> </ul>"},{"location":"app-development/workflow-components/reset-to-draft.html#exceptions","title":"Exceptions","text":"<ul> <li>Monitor the Rollback Process: You need to ensure that the rollback process does not compromise the integrity of the data and the logic of the workflow.</li> </ul>"},{"location":"app-development/workflow-components/send-notification.html","title":"Send notification","text":""},{"location":"app-development/workflow-components/send-notification.html#send-notification","title":"Send notification","text":""},{"location":"app-development/workflow-components/send-notification.html#general-information","title":"General information","text":"<p>The \u201cSend Notification\u201d step within workflow is used to send simple notifications to a user or group of users using a bell icon. This allows you to communicate effectively with system users by transmitting important information or notifications.</p>"},{"location":"app-development/workflow-components/send-notification.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Notification type Smtp, Mail, SignalR Type of notification delivery channel User info field Multiselect of Catalog Field containing user or list of users User name Multiselect of Catalog Specific user to be notified Message - Notification text"},{"location":"app-development/workflow-components/send-notification.html#cases","title":"Cases","text":"<ul> <li>User Information: Used to inform users about important events, system changes, alarms or other messages that need attention.</li> <li>Personalized Notifications: Allows notifications to be sent to specific users or groups, making communication more targeted and effective.</li> </ul>"},{"location":"app-development/workflow-components/send-notification.html#exceptions","title":"Exceptions","text":"<ul> <li>Need for Up-to-Date User Information: Effective notification delivery requires up-to-date user information, including user contact details.</li> <li>Selecting the Correct Delivery Channel: You must carefully choose the type of delivery channel (Smtp, Mail, SignalR) depending on users\u2019 preferences and technical capabilities of the system.</li> </ul>"},{"location":"app-development/workflow-components/send-templated-notification.html","title":"Send templated notification","text":""},{"location":"app-development/workflow-components/send-templated-notification.html#send-templated-notification","title":"Send templated notification","text":""},{"location":"app-development/workflow-components/send-templated-notification.html#general-information","title":"General information","text":"<p>The \u201cSend Templated Notification\u201d step within the workflow is used to send notifications to users or groups of users using preconfigured templates. This allows you to create standardized yet personalized messages, which improves communication and ensures consistency of messages.</p>"},{"location":"app-development/workflow-components/send-templated-notification.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Value Options Purpose Step name - Name of the step Notification type Smtp, Mail, SignalR Type of notification delivery channel User info field Multiselect of Catalog Field with information about a user or group of users User group Multiselect of Catalog (Outdated parameter, not used) User routing Multiselect of Catalog Configuration of notification routing User name Multiselect of Catalog Specific user to be notified Template Multiselect of Catalog Choosing a notification template Render type Text, Html, Docx, Xlsx Template rendering format"},{"location":"app-development/workflow-components/send-templated-notification.html#cases","title":"Cases","text":"<ul> <li>Automated Notifications: Used to send standardized notifications, such as reminders, action confirmations, or informational messages.</li> <li>Effective Communication: Suitable for creating professionally designed messages for external or internal communications.</li> </ul>"},{"location":"app-development/workflow-components/send-templated-notification.html#exceptions","title":"Exceptions","text":"<ul> <li>Template Customization Requirements: Notification templates must be prepared and configured in advance to ensure that messages are relevant to communication purposes.</li> <li>Manage Notification Recipients: It is important to pinpoint message recipients using the User info field and User name to ensure that notifications reach the right recipients.</li> </ul>"},{"location":"app-development/workflow-components/switch-case.html","title":"Switch case","text":""},{"location":"app-development/workflow-components/switch-case.html#switch-case","title":"Switch case","text":""},{"location":"app-development/workflow-components/switch-case.html#general-information","title":"General information","text":"<p>The \u201cSwitch Case\u201d step within a workflow is used as an unconditional switch operator that allows you to choose between different script options. This step is ideal for controlling process logic based on certain conditions, usually specified by Boolean or Enum fields. When used, the main script is always disabled and the process goes to one of the alternative branches. </p>"},{"location":"app-development/workflow-components/switch-case.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Purpose Step name \u201cSwitch Case\u201d step name Switch source field Field based on the value of which the script is selected"},{"location":"app-development/workflow-components/switch-case.html#cases","title":"Cases","text":"<ul> <li>Process Logic Branching: Used to create conditional paths in a workflow where the next direction is determined based on a certain condition or value.</li> <li>Management of Different Execution Scripts: Suitable for scripts where a process requires different execution depending on predefined conditions or user selection.</li> </ul>"},{"location":"app-development/workflow-components/switch-case.html#exceptions","title":"Exceptions","text":"<ul> <li>Accuracy of Transition Conditions: It is necessary to accurately define the switch conditions for each case to ensure that the correct execution path is selected.</li> <li>Complexity of Multiple Path Management: Complex workflows with many possible paths require clear understanding and management of each of them to avoid errors in the process logic.</li> </ul>"},{"location":"app-development/workflow-components/update-model-field.html","title":"Update model field","text":""},{"location":"app-development/workflow-components/update-model-field.html#update-model-field","title":"Update model field","text":""},{"location":"app-development/workflow-components/update-model-field.html#general-information","title":"General information","text":"<p>The \u201cUpdate Model Field\u201d step within workflow is used to update a specific field in the model. This step allows you to change the values of individual fields in the data model, which is particularly useful for dynamic data management during workflow execution.</p>"},{"location":"app-development/workflow-components/update-model-field.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Purpose Step name \u201cUpdate Model Field\u201d step name Model field Model field you want to update Value Value to which the field will be updated Source field Source field whose value will be used for updating"},{"location":"app-development/workflow-components/update-model-field.html#cases","title":"Cases","text":"<ul> <li>Dynamic Data Updating: Used to change values in the model based on data generated during workflow, such as updating the status of a task or changing configuration options.</li> </ul>"},{"location":"app-development/workflow-components/update-model-field.html#exceptions","title":"Exceptions","text":"<ul> <li>Accuracy and Relevance of Data: Ensure that updated data are accurate and up-to-date to avoid undesirable consequences.</li> <li>Understanding the Impact of Changes: It is important to understand the impact of updating a field on the overall workflow model and logic, especially in complex systems with interlocking dependencies.</li> </ul>"},{"location":"app-development/workflow-components/update-model.html","title":"Update model","text":""},{"location":"app-development/workflow-components/update-model.html#update-model","title":"Update model","text":""},{"location":"app-development/workflow-components/update-model.html#general-information","title":"General information","text":"<p>The \u201cUpdate Model\u201d step in a workflow is used to save the model. This step is useful in scripts where you want to save or update the data model in the system directory or catalog. It allows you to effectively manage data, ensuring its relevance and integrity.</p>"},{"location":"app-development/workflow-components/update-model.html#parameters","title":"Parameters","text":"<p>Step Settings:</p> Setting Field Purpose Step name \u201cUpdate Model\u201d step name"},{"location":"app-development/workflow-components/update-model.html#cases","title":"Cases","text":"<ul> <li>Updating Data References: Used to update information in directories or catalogs, which is important when existing data is changed or new records are added.</li> <li>Data Synchronization: Suitable for scripts where data needs to be synchronized between different parts of the system or with external data sources.</li> </ul>"},{"location":"app-development/workflow-components/update-model.html#exceptions","title":"Exceptions","text":"<ul> <li>Importance of Data Accuracy: When updating a model, it is critical to ensure that data is accurate and up-to-date to prevent errors and inconsistencies.</li> </ul>"},{"location":"installation/configuration.html","title":"Basic Platform Settings","text":""},{"location":"installation/configuration.html#basic-platform-settings","title":"Basic Platform Settings","text":""},{"location":"installation/configuration.html#platform-architecture","title":"Platform Architecture","text":"<p>The platform is built on a microservice architecture that provides modularity, scalability, and flexibility. The key features of the architecture include:</p> <ul> <li>Microservice Architecture: The system is divided into separate microservices, each of which performs a specific function and operates independently.</li> <li>Distributed Processing: Microservices can be distributed across different nodes, providing load balancing and increased system resiliency.</li> <li>Containerization and Orchestration: Using Docker to containerize microservices and Kubernetes to orchestrate them makes it easier to deploy, scale, and manage the application.</li> <li>Modularity and interoperability of microservices: Modularity is achieved by clearly delineating functions between microservices, and communication between them takes place via specific APIs and interoperability protocols.</li> </ul> <p>The system comes in eleven Docker container images:</p> Service Purpose catalogs Storage and processing of user data; RLS support data-flow Processing and storing custom data scripts file-storage Binary data storage identity User management and authentication notification Sending notifications scheduler Event scheduler in the system; all events are called via the bus template-service Working with templates view-service Storage of system metadata; orchestration of metadata update processes workflow Scripting via the State Machine web-studio Application development web part web-workplace Web part for running applications <p></p>"},{"location":"installation/configuration.html#technology-stack","title":"Technology Stack","text":"<ul> <li>Foundation: The platform is built on Net Core 8.0, a modular open-source software development platform.</li> <li>Development Language: C# is used as the primary programming language.   </li> </ul>"},{"location":"installation/configuration.html#additional-infrastructure","title":"Additional Infrastructure","text":"<ul> <li>PostgreSQL (version \u226513.0): Object-relational database management system for primary data storage.</li> <li>Redis (version \u22655.0): A non-relational database used for data caching.</li> <li>RabbitMQ (version \u22653.0): A software message broker for handling system events and queues.   </li> </ul>"},{"location":"installation/configuration.html#web-parts","title":"Web Parts","text":"<ul> <li>Uses the Blazor front-end web framework, part of Net Core, to create web components.</li> <li>Web Parts are run as a client-side WebAssembly (WASM).   </li> </ul>"},{"location":"installation/configuration.html#installation-requirements","title":"Installation Requirements","text":"<ul> <li>Kubernetes: Kubernetes cluster is required for the clustered version of the product to work.</li> <li>Minimum Configuration:<ul> <li>1 x Master (2 vCPU, 4GB RAM, 20GB SSD) - 3 nodes with the Master role are recommended.</li> <li>1 x Ingress (4 vCPU, 8GB RAM, 20GB SSD)</li> <li>3 x Worker (16 vCPU, 32GB RAM, 60GB SSD)</li> </ul> </li> <li>Operating System: Ubuntu Server 22.04 LTS   </li> </ul>"},{"location":"installation/configuration.html#networking-and-ports","title":"Networking and Ports","text":"<ul> <li>All network traffic uses the TCP/IP protocol.</li> <li>By default, each microservice (except web-studio) provides two ports:</li> <li>80: Public API (HTTP/1.1).</li> <li>5001: Private API (HTTP/2).</li> <li>Web-studio: Provides only port 80 for serving static resources.</li> <li>All microservices, with the exception of web-studio, must have access to PostgreSql, Redis, and RabbitMQ.   </li> </ul>"},{"location":"installation/configuration.html#protocols-used","title":"Protocols Used","text":"<ul> <li>HTTP/1.1: For public API.</li> <li>GRPC: For private API.</li> <li>WebSocket: For the Notification service.</li> <li>SIP over WebSocket: Optional, for integration with SIP in a web-workplace.</li> <li>RTC/RTCP: Optional, for integration with SIP in a web-workplace.   </li> </ul>"},{"location":"installation/configuration.html#storing-data","title":"Storing Data","text":"<p>Each microservice manages its own scheme in the database, without overlapping with the others.</p> Service Scheme catalogs catalogs data-flow dataflow file-storage file_storage identity identity notification notification scheduler scheduler template-service template view-service view_service, maintenance workflow workflow, wfc_persistence web-workplace workplace-host <p></p> <p>Each microservice is responsible for creating and migrating the metadata of its schemes.</p> <p>The catalogs service, which is responsible for storing user data, creates an additional partition in its scheme for each data type, inherited from the primary table, as well as additional partitions to implement RLS if necessary. When these partitions are formed, all additional indexes and external keys are generated.</p> <p>The composition of indexes and external keys depends on the configuration of the application you are building in the platform. </p>"},{"location":"installation/configuration.html#authorization-permissions-management","title":"Authorization &amp; Permissions Management","text":"<ul> <li>Local authorization using JWT tokens.</li> <li>Ability to connect external authorization systems (oAuth, OpenId Connect, Windows authorization, SAML).</li> <li>RBAC (Role-Based Access Control) for access control.   </li> </ul>"},{"location":"installation/configuration.html#collecting-metrics-and-traces","title":"Collecting metrics and traces","text":"<p>All services, except web-studio, provide metrics in the \u2018Prometheus\u2019 format. Metrics are available by the relative path /metrics. To check the availability of the service, two paths are provided /hc and /liveness:</p> <ul> <li>hc - detailed information on all checks;</li> <li>liveness - a short response about the availability of the service.</li> </ul> <p>Logs are collected by the system itself, all logs are written to the maintenance scheme, and log viewing is available in the web-studio. The logging level for each service is configured separately through the web-studio, the \"Maintenance\" section. Two Zipkin or Jaeger systems can be connected to collect traces. Trace collection is configured at the service parameter level. If you want to export traces to Jaeger, you need at least version 1.35.</p>"},{"location":"learn/index.html","title":"Getting Started","text":""},{"location":"learn/index.html#getting-started","title":"Getting Started","text":"<p>A structured entry point for newcomers to Aqtra. Technical tone. This page links documentation, tutorials, videos (with transcripts), and a runnable sample to form a progressive learning roadmap.</p>"},{"location":"learn/index.html#what-is-aqtra","title":"What is Aqtra?","text":"<p>Aqtra is a low\u2011code platform for building business applications primarily through a visual UI, with optional Python scripting for advanced logic. This hybrid model speeds up delivery for beginners and lets developers extend and customize when needed.</p> <p>You will learn to:</p> <ul> <li>Install and run Aqtra (cloud or local via Docker).</li> <li>Build a first feature end\u2011to\u2011end (data model \u2192 UI component \u2192 data flow \u2192 publish).</li> <li>Use Python scripts where appropriate.</li> <li>Integrate with external services and APIs.</li> </ul> <p>Target audience: citizen developers, junior front\u2011/back\u2011end developers, analysts, architects, team leads.</p> <p>Primary CTAs:</p> <ul> <li>Start in 60 minutes \u2192 First feature walkthrough (see 4) First win)</li> <li>Documentation \u2192 https://docs.aqtra.io/en/</li> <li>Video track \u2192 https://www.youtube.com/@Aqtra.Academy</li> </ul> <p>Quick links (cards):</p> <ul> <li>Install \u2192 5) Install &amp; Access (Cloud / Docker)</li> <li>Build your first screen (Invoice) \u2192 4) First win</li> <li>DataFlow basics \u2192 2) Step\u2011by\u2011step learning path</li> <li>Publish to web \u2192 2) Step\u2011by\u2011step learning path</li> </ul> <p>On this page</p> <ul> <li>1) Methodology \u2014 how to use this guide</li> <li>2) Step\u2011by\u2011step learning path</li> <li>3) Tutorials &amp; Documentation Cross-Links</li> <li>4) First win in ~60 minutes</li> <li>5) Install &amp; Access</li> <li>6) Core Concepts (Aqtra Glossary)</li> <li>7) Video Track</li> <li>8) DataFlow Step Library</li> <li>9) FAQ</li> </ul>"},{"location":"learn/index.html#1-methodology--how-to-use-this-guide","title":"1) Methodology \u2014 how to use this guide","text":"<ul> <li>Single-track progression: one unified path for all roles, minimal new concepts per step.</li> <li>First\u2011mention linking: each concept/UI element is linked once at first appearance; later steps assume it.</li> <li>Just\u2011in\u2011time depth: each step references focused docs and a short video with clickable timestamps.</li> <li>Visible outcomes: every step ends in a concrete, testable result in Workplace.</li> <li>Error\u2011first mindset: Step 10 teaches systematic debugging/log analysis.</li> <li>Assessment: the Capstone (Step 11) validates CRUD, integration, templating, navigation, and roles/permissions.</li> </ul>"},{"location":"learn/index.html#scope-prerequisites","title":"Scope &amp; prerequisites","text":"<ul> <li>Access to Aqtra Studio/Workplace (cloud tenant) or a local Docker setup (\u2265 4 vCPU / 8 GB RAM).</li> <li>Modern browser and the ability to view devtools Network tab.</li> <li>(Optional) Basic familiarity with JSON and HTTP APIs for Step 6.</li> </ul>"},{"location":"learn/index.html#learning-outcomes-per-step","title":"Learning outcomes (per step)","text":"<ul> <li>Step 1: you can access Studio/Workplace.</li> <li>Step 2: you can model an entity (Invoice) and surface it in a Component visible in Workplace.</li> <li>Step 3: you can build a DataFlow and bind it to a Button.</li> <li>Step 4: you can complete CRUD and basic validation.</li> <li>Step 5: you can add Python logic in a flow.</li> <li>Step 6: you can call an external HTTP API and map results.</li> <li>Step 7: you can compose a MultiComponent page with data context.</li> <li>Step 8: you can navigate between pages with action parameters.</li> <li>Step 9: you can render and download a document from a template.</li> <li>Step 10: you can diagnose errors using logs/devtools and republish.</li> <li>Step 11: you can deliver a small feature with roles/permissions and one integration.</li> </ul>"},{"location":"learn/index.html#feedback-loop","title":"Feedback loop","text":"<ul> <li>After First win and Capstone, capture feedback: what was unclear, where errors appeared, and which links/videos helped most; feed this back into docs.</li> </ul>"},{"location":"learn/index.html#assessment-rubric-capstone","title":"Assessment rubric (Capstone)","text":"<ul> <li> CRUD works with validation and clear user messages.</li> <li> External API call mapped; failures handled (timeouts/4xx/5xx).</li> <li> Document template rendered; file is downloadable.</li> <li> Navigation via action parameters opens the right record/page.</li> <li> At least 2 roles configured with different access.</li> <li> All components Published with no blocking warnings.</li> </ul>"},{"location":"learn/index.html#2-stepbystep-learning-path-single-track","title":"2) Step\u2011by\u2011step learning path (single track)","text":"<p>A unified path for all roles. Follow the steps in order; each step links to docs and (optionally) a short video.</p> <p>Step 1 \u2014 Access Aqtra (cloud or Docker) Get a running instance (see Section 4). Verify you can open Studio and Workplace.</p> <p>Step 2 \u2014 First application skeleton Create a minimal DataModel (e.g., <code>Invoice(number, title, totalAmount, dueDate)</code>) and a Component to display/edit it. Publish and add to navigation so it appears in Workplace.</p> <p>Docs: Component \u2192 https://docs.aqtra.io/en/app-develop/component.html ; UI catalog \u2192 https://docs.aqtra.io/en/app-develop/ui-components/index.html Video: Tutorial #1 \u2192 https://youtu.be/GaUr5ET4dfQ ; Tutorial #2 \u2192 https://youtu.be/UEG2pmct74s</p> <p>Step 3 \u2014 DataFlow basics Add a DataFlow with stages/steps: <code>Get Action Model \u2192 Update Entry \u2192 Write Response</code>. Bind it to a Button and test create/update.</p> <p>Docs: Dataflow overview \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/index.html ; Update entry \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/update-entry.html ; Execute dataflow \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-dataflow.html Video: Tutorial #3 \u2014 (05:16\u201307:30)</p> <p>Step 4 \u2014 CRUD completion Add list/detail views, finish create/update/delete flows, and validations.</p> <p>Docs: Data Grid \u2192 https://docs.aqtra.io/en/app-develop/ui-components/data-grid.html Video: Tutorial #4 \u2014 delete via Update Entry (05:18\u201306:20); Tutorial #5 \u2014 dynamic filters (00:13\u201303:00)</p> <p>Step 5 \u2014 Python scripting for business logic Insert a Python Script step to compute derived fields and validate inputs.</p> <p>Docs: Execute script \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-script.html Video: Tutorial #6 \u2014 Execute Script (04:10\u201306:10)</p> <p>Step 6 \u2014 External integrations Call an external HTTP API from a Python script; map the response to your DataModel.</p> <p>Docs: Execute API call \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-api-call.html Video: (Optional) Tutorial #10 \u2014 diagnosing payload/type mismatches (01:46\u201305:00)</p> <p>Troubleshooting</p> <p>_ Timeout/5xx: verify URL/method/headers; add retry/backoff; log response body. _ 401/403: supply/refresh auth token (store secrets securely). _ 406/422 (type mismatch): fix field mapping and types; transform in Execute Script (e.g., string \u2192 number/date) before <code>Update Entry</code>. _ Use <code>context.Logger</code> to log correlation IDs and payload snippets.</p> <p>Step 7 \u2014 MultiComponent pages Compose a page from several components (filters + grid + form). Configure data context and wiring.</p> <p>Docs: List View \u2192 https://docs.aqtra.io/en/app-develop/ui-components/list-view.html ; Tab Control \u2192 https://docs.aqtra.io/en/app-develop/ui-components/tab-control.html ; Charts \u2192 https://docs.aqtra.io/en/app-develop/ui-components/charts.html Video: Tutorial #6 \u2014 modal dialog + auto\u2011refresh grid (10:45\u201317:00); Tutorial #7 \u2014 List View (00:59\u201303:00)</p> <p>Design tip (optional): group related inputs into panels, keep vertical rhythm consistent (8\u201312px multiples), avoid overusing charts\u2014add them only when they clarify trends.</p> <p>Step 8 \u2014 Navigation &amp; cross\u2011page wiring Add menu items and open pages with action parameters (pass record <code>id</code> from grid to form).</p> <p>Docs: Button actions \u2192 https://docs.aqtra.io/en/app-develop/ui-components/button.html Video: Tutorial #12 \u2014 open page + parameter mapping (06:18\u201307:00); Tutorial #5 \u2014 Open application from grid (10:53\u201311:20)</p> <p>Step 9 \u2014 Templates &amp; document generation (PDF) Render and download a document from a template via DataFlow.</p> <p>Docs: Dataflow components (Render Template) \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/index.html Video: Tutorial #12 \u2014 template render + download (01:37\u201302:45; 05:20\u201307:00)</p> <p>Step 10 \u2014 Error handling &amp; debugging Use Network tab and Studio logs to diagnose 4xx/5xx; fix types; republish.</p> <p>Docs: Publishing applications \u2192 https://docs.aqtra.io/en/app-develop/publishing-applications.html Video: Tutorial #10 \u2014 finding and fixing errors (01:46\u201305:00)</p> <p>Troubleshooting</p> <ul> <li>Follow the sequence: Compile \u2192 Save \u2192 Ready to publish \u2192 Publish; verify the component is listed as Published.</li> <li>Use browser devtools Network to compare request/response to expected schema; correct mapping/types.   _ If behavior differs between pages, check that all dependent components were republished together.   _ On Docker setups, inspect container logs for stack traces and port conflicts.</li> </ul> <p>Step 11 \u2014 Capstone Extend your app into a small feature (e.g., Mini\u2011CRM): roles/permissions, MultiComponent dashboard, one integration, one document template. Document acceptance criteria and make a short demo video.</p> <p>Back to top</p>"},{"location":"learn/index.html#tutorials-documentation-cross-links","title":"3) Tutorials &amp; Documentation Cross-Links","text":"<p>Install / Platform</p> <ul> <li>Basic settings, auth, logs, metrics \u2192 https://docs.aqtra.io/en/install1/basic-settings.html</li> </ul> <p>Core build</p> <ul> <li>Component (creating, basic settings) \u2192 https://docs.aqtra.io/en/app-develop/component.html</li> <li>UI components catalog (first mention) \u2192 https://docs.aqtra.io/en/app-develop/ui-components/index.html</li> <li>Data Grid (first mention) \u2192 https://docs.aqtra.io/en/app-develop/ui-components/data-grid.html</li> <li>List View / Tab Control / Charts (first mention) \u2192 https://docs.aqtra.io/en/app-develop/ui-components/list-view.html, https://docs.aqtra.io/en/app-develop/ui-components/tab-control.html, https://docs.aqtra.io/en/app-develop/ui-components/charts.html</li> </ul> <p>Flows / Logic</p> <ul> <li>Dataflow overview \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/index.html</li> <li>Update Entry (CRUD) \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/update-entry.html</li> <li>Execute dataflow \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-dataflow.html</li> <li>Execute script (Python) \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-script.html</li> <li>Execute API call \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-api-call.html</li> </ul> <p>Publishing</p> <ul> <li>Publishing applications \u2192 https://docs.aqtra.io/en/app-develop/publishing-applications.html</li> </ul> <p>Tutorials (docs)</p> <ul> <li>Tutorial #1 \u2192 https://docs.aqtra.io/en/tutorials/tutorial1.html</li> <li>Tutorial #2 \u2192 https://docs.aqtra.io/en/tutorials/tutorial2.html</li> <li>Tutorial #3 \u2192 https://docs.aqtra.io/en/tutorials/tutorial3.html</li> </ul> <p>Video index (clickable timestamps)</p> <ul> <li>T#3 \u2014 DataFlow basics (05:16\u201307:30).</li> <li>T#4 \u2014 Delete via Update Entry (05:18\u201306:20).</li> <li>T#5 \u2014 Data Grid filters; Open application (00:13\u201303:00), (10:53\u201311:20).</li> <li>T#6 \u2014 Execute Script; modal dialog; auto\u2011refresh grid (04:10\u201306:10), (10:45\u201317:00).</li> <li>T#10 \u2014 Debug 500\u2192406; fix types; republish (01:46\u201305:00).</li> <li>T#12 \u2014 Render template; Download; Open page + mapping (01:37\u201302:45), (06:18\u201307:00).</li> </ul>"},{"location":"learn/index.html#4-first-win-in-60-minutes","title":"4) First win in ~60 minutes","text":"<p>Build the Invoice Inventory mini\u2011feature end\u2011to\u2011end.</p> <ol> <li>Access Aqtra (cloud or Docker) and open Studio.</li> <li>Create DataModel <code>Invoice(number, title, totalAmount, dueDate)</code>.</li> <li>Add a Component to create/list invoices (first use of Data Grid).</li> <li>Wire a DataFlow \u2014 <code>Get Action Model \u2192 Update Entry \u2192 Write Response</code> (optional Execute Script to validate totalAmount).</li> <li>Publish and verify in Workplace: create two invoices, edit one.</li> </ol> <p>Docs: Tutorials \u2192 Build your first app \u2014 https://docs.aqtra.io/en/tutorials/index.html</p>"},{"location":"learn/index.html#5-install--access","title":"5) Install &amp; Access","text":"<p>Choose one of the following. Keep credentials and license keys secure.</p>"},{"location":"learn/index.html#option-1-cloud-hosted","title":"Option 1 \u2014 Cloud (Hosted)","text":"<ul> <li>Obtain access via a hosting partner or purchase directly.</li> <li>Pricing &amp; procurement: https://aqtra.io/#price.</li> <li>Receive an organization/tenant URL and credentials.</li> <li>Configure SSO (optional), users, and roles.</li> </ul>"},{"location":"learn/index.html#option-2-local-docker","title":"Option 2 \u2014 Local (Docker)","text":"<p>Prerequisites: Docker Engine/Compose latest; Linux/Windows/macOS host with 4 vCPU / 8 GB RAM minimum.</p> <p>Checklist</p> <ul> <li> Install Docker/Compose and verify <code>docker ps</code> works.</li> <li> Prepare <code>docker-compose.yml</code> and <code>.env</code> with required secrets.</li> <li> Start DB \u2192 <code>docker compose up -d db</code> and wait for readiness.</li> <li> Start app \u2192 <code>docker compose up -d app</code>.</li> <li> Access Workplace at <code>http://&lt;host&gt;:8080/</code> and Studio at <code>http://&lt;host&gt;:8080/studio/</code>.</li> </ul> <p>Docs: Basic settings (architecture, ports, auth, logs, metrics) \u2192 https://docs.aqtra.io/en/install1/basic-settings.html</p> <p>Back to top</p>"},{"location":"learn/index.html#6-core-concepts-aqtra-glossary","title":"6) Core Concepts (Aqtra Glossary)","text":"<p>Short, actionable definitions.</p> <ul> <li>Component \u2014 a UI building block that renders data and actions for users (form, list, detail, etc.). https://docs.aqtra.io/en/app-develop/component.html</li> <li>DataFlow \u2014 a directed flow of operations (e.g., validate \u2192 transform \u2192 persist \u2192 notify) that executes on user or system events. Typical steps: Get Action Model, Update Entry, Write Response, Execute Script, Execute API call. https://docs.aqtra.io/en/app-develop/data-flow-components/index.html</li> <li>DataModel \u2014 the structured definition of entities/attributes that the application persists and manipulates.</li> <li>MultiComponent \u2014 a composite view assembling several Components (e.g., list + details + filters) into a cohesive page; elements use data context to bind to a source component.</li> <li>Python Script \u2014 custom logic step embedded in a flow to transform data, call services, or implement rules. https://docs.aqtra.io/en/app-develop/data-flow-components/execute-script.html</li> </ul>"},{"location":"learn/index.html#7-video-track-with-transcripts--timecodes","title":"7) Video Track (with transcripts &amp; timecodes)","text":"<p>Centralized video list with deep links and timestamps. Use these to jump directly to the relevant demo moments.</p> <ul> <li>Tutorial #1 \u2014 https://youtu.be/GaUr5ET4dfQ</li> <li>Tutorial #2 \u2014 https://youtu.be/UEG2pmct74s</li> <li>Tutorial #3 \u2014 DataFlow basics (05:16\u201307:30)</li> <li>Tutorial #4 \u2014 Delete via Update Entry (05:18\u201306:20)</li> <li>Tutorial #5 \u2014 Data Grid filters; Open application (00:13\u201303:00), (10:53\u201311:20)</li> <li>Tutorial #6 \u2014 Execute Script; modal dialog; auto\u2011refresh grid (04:10\u201306:10), (10:45\u201317:00)</li> <li>Tutorial #7 \u2014 https://youtu.be/PtAJwn07sWI</li> <li>Tutorial #8 \u2014 https://youtu.be/YfqfdJpDm-k</li> <li>Tutorial #9/10 \u2014 Debug &amp; diagnostics (01:46\u201305:00)</li> <li>Tutorial #11 \u2014 https://youtu.be/d-FD1ARn0h0</li> <li>Tutorial #12 \u2014 Render template; Download; Open page + mapping (01:37\u201302:45), (06:18\u201307:00)</li> </ul> <p>Stay updated</p> <p>Subscribe to Aqtra Academy on YouTube and check the docs root regularly for updates. New episodes will be linked here as they arrive.</p> <p>Back to top</p>"},{"location":"learn/index.html#8-dataflow-step-library-quick-reference","title":"8) DataFlow Step Library (quick reference)","text":"<p>A few useful steps you'll likely use beyond CRUD:</p> <ul> <li>Update Entry \u2014 https://docs.aqtra.io/en/app-develop/data-flow-components/update-entry.html</li> <li>Execute dataflow \u2014 call another dataflow and merge results.   https://docs.aqtra.io/en/app-develop/data-flow-components/execute-dataflow.html</li> <li>Execute API call \u2014 configure and run HTTP request, bind results.   https://docs.aqtra.io/en/app-develop/data-flow-components/execute-api-call.html</li> <li>Get entity by id \u2014 fetch entity by identifier via catalog field.   https://docs.aqtra.io/en/app-develop/data-flow-components/get-entity-by-id.html</li> <li>Update model field \u2014 set/derive a single field within model.   https://docs.aqtra.io/en/workflow-components/update-model-field.html</li> <li>Simple math \u2014 add/subtract/multiply and write to a target field.   https://docs.aqtra.io/en/app-develop/data-flow-components/simple-math.html</li> <li>Store entry over bus \u2014 create/store component instance asynchronously.   https://docs.aqtra.io/en/app-develop/data-flow-components/store-entry-over-bus.html</li> <li>Subscribe to connector \u2014 e.g., RabbitMQ subscription \u2192 process \u2192 save.   https://docs.aqtra.io/en/app-develop/data-flow-components/subscribe-to-connector.html</li> </ul> <p>Back to top</p>"},{"location":"learn/index.html#9-faq-short-practical","title":"9) FAQ (short, practical)","text":"<p>Q: Cloud vs local? A: Cloud for fastest onboarding/team access; local Docker for offline/PoCs/restricted environments.</p> <p>Q: Docker fails to start or is slow. A: Ensure 4 vCPU/8 GB RAM+, free the target ports, and check container logs. Restart Docker and retry compose.</p> <p>Q: Where to put custom logic? A: Add a Python Script step inside a DataFlow to validate, transform, or call external APIs.</p> <p>Q: How to call external services? A: Use <code>http.client</code> from a Python script; map the response to your DataModel.</p> <p>Q: Main building blocks? A: DataModel, Component, DataFlow, MultiComponent, Python Script.</p> <p>Q: Errors and exceptions? A: Use network inspector and Studio logs; fix type mismatches, republish, and re\u2011test. See the video in Section 8.</p> <p>Q: How to purchase or get a trial? A: See pricing: https://aqtra.io/#price. Purchase via vendor or directly; for hosted deployments, follow partner onboarding.</p>"},{"location":"learn/index.html#10-whats-next","title":"10) What's next","text":"<ul> <li>Patterns &amp; best practices (naming, versioning, testing flows).</li> <li>Advanced integrations (SSO, databases, message queues).</li> <li>Team workflows (code reviews for scripts, environment promotion).</li> <li>Community &amp; support links (Slack/Telegram/Forum) \u2014 add when available.</li> </ul>"},{"location":"overview/index.html","title":"Overview","text":""},{"location":"overview/index.html#overview","title":"Overview","text":"Text Only<pre><code>first-entry.md\n\nterms-of-use.md\n</code></pre>"},{"location":"overview/getting-started.html","title":"First Time Login","text":""},{"location":"overview/getting-started.html#first","title":"First Time Login","text":""},{"location":"overview/getting-started.html#access-to-studio","title":"Access to Studio","text":""},{"location":"overview/getting-started.html#log-in-to-studio","title":"Log in to Studio","text":"<p>To access Studio, use the link in the format <code>/studio/</code> appended to the address of your deployed platform instance. For example, if the platform is deployed on <code>mydomain.io</code>, you need to go to <code>https://mydomain.io/studio/</code> to log in to Studio.</p> <p>When you do this, you will see a login screen. To log in to Studio, enter your credentials \u2014 username and password. After logging in, you will be redirected to the main page. </p>"},{"location":"overview/getting-started.html#main-page","title":"Main Page","text":"<p>The main page provides information about your license and the application domains that have been deployed. You\u2019ll get access to the following features and information:</p> <ul> <li>Plan Type: This displays the type of your current plan and the expiration or renewal date of your subscription.</li> <li>Application Domains: This section allows you to create application components, connect users via specific URLs, and navigate to the \u201cNavigation Menu\u201d section.</li> <li>Usage Statistics: Displays information about the current number of applications compared to the total limit, as well as the current and total number of users, workflows, and dataflows.   </li> </ul> <p> </p> <p>On the left, there is a panel containing 7 types of menus:</p> <ul> <li>Home Menu</li> <li>Applications Menu</li> <li>Maintenance Menu</li> <li>Localizations Menu</li> <li>Extensions Menu</li> <li>Access Menu</li> <li>File Storage Menu </li> </ul>"},{"location":"overview/getting-started.html#managing-your-subscription","title":"Managing Your Subscription","text":"<ul> <li>Upgrading Subscription: To renew your current subscription, click the \u201cRenew\u201d button.</li> <li>Changing Plan: Use the \u201cChoose Other Plan\u201d button to select a different plan.</li> <li>Subscription Notifications: If your subscription is less than 10 days away from the end of its term, you will be notified to renew your subscription.</li> </ul>"},{"location":"tutorials/index.html","title":"Tutorials","text":""},{"location":"tutorials/index.html#tutorials","title":"Tutorials","text":"<p>Welcome to the Aqtra tutorials! These step-by-step guides will help you get started with the platform.</p> <p></p> <p>If you are not redirected automatically, click here to start with Tutorial \u21161.</p>"},{"location":"tutorials/01-basic-setup.html","title":"Tutorial \u21161","text":""},{"location":"tutorials/01-basic-setup.html#tutorial-no1","title":"Tutorial \u21161","text":""},{"location":"tutorials/01-basic-setup.html#creating-your-first-application-invoice-inventory","title":"Creating Your First Application \u2014 Invoice Inventory","text":"<p>Application Description: Invoice Inventory</p> <p>We are going to create a simple application that allows you to add, view, and edit invoices.</p> <p>Each invoice will contain the following data (see the table below).</p> Brief Description Detailed Description Invoice Number Number assigned to the invoice by the supplier. Invoice Title Description of the invoice item. Total Invoice Amount Number indicating the amount of money billed in the invoice. Invoice Due Date Date when the invoice is due for payment. <p></p> <p>Additionally, we will track the invoice status as follows (see the table below).</p> ID Readable Title Description 0 Under Review Assigned immediately upon invoice creation. 1 Accepted for Payment Assigned after the invoice review and approval for payment. 2 Rejected Assigned after the review is completed, but the invoice is not accepted for payment. 3 Paid Assigned after the invoice is paid. 4 Overdue Indicates that the invoice is unpaid and the due date has passed. <p></p> <p>The basic version of the application will have 2 main screens.</p> <ul> <li>A list of all invoices in the system, which can be filtered and/or sorted using all the invoice fields described above. We will call it \u201cAll Invoices\u201d.</li> <li>A screen for adding a new or editing an existing invoice. We will call it \u201cEdit/View Invoice\u201d.</li> </ul> <p>After creation, the application will look like the screenshot below.</p> <p></p> <p></p> <p></p>"},{"location":"tutorials/01-basic-setup.html#opening-studio","title":"Opening Studio","text":"<p>Creating an application on the platform starts with opening Studio and adding a component.</p> <p>You can open Studio using the link https:///studio/.</p> <p>For example, if the domain name where you deployed your instance of the platform is my.platform.io, you can access Studio using the following URL: \u201chttps://my.platform.io/studio/\u201d.</p> <p>After logging into Studio, you will see the following screen with a menu on the left listing Home, Applications &amp; Access. Select Applications\u2192Components.</p> <p></p> <p></p> <p></p> <p>You will see a list of all existing components. Click the \u201cAdd\u201d button and select the \u201cComponent\u201d option, as shown below.</p> <p></p> <p></p> <p></p> <p>Congratulations, you now have your first component! Let's name it \u201cInvoice Inventory\u201d and set some important parameters.</p> <p>To name your component, click the \u201cSettings\u201d button and then put \u201cInvoice Inventory\u201d in the \u201cName\u201d field.</p> <p>Since our application will only be accessible to people with the appropriate login credentials, we need to ensure that the \u201cAccess Mode\u201d field is set to \u201cPrivate\u201d.</p>"},{"location":"tutorials/01-basic-setup.html#setting-up-required-data-fields","title":"Setting Up Required Data Fields","text":"<p>Click Save to make sure your component is saved. It will show an error message because we don't have any data in our component yet. Let's add some data. Go to the \"Definition\" tab and click the \"+\" sign next to \"Invoice Inventory\". The platform will automatically add several system fields that you see in the screenshot, as well as your first data field \u2014 Property_1.</p> <p></p> <p></p> <p></p> <p>Click the edit icon (pencil) on Property_1. You will see a new panel open on the right. This is where you define how your data fields should be interpreted by the system.</p> <p>Name \u2014 this is the internal system name for your data field (property). It should contain only English letters, without spaces. You will use this name later, for example, in Python scripts to add some advanced logic to the application.</p> <p>Note: starting with version 0.4.x, there is also a system property \u201cname\u201d that is automatically added when the first property is created and is used when you need to show users values for users when using properties of the Catalog type (link to another component; used for 1:1 and M:1 relationships) or Array (link to an array of other components; used for 1:M and M:M relationships). Unlike the internal system Name which is present for each property within the component, the system field name is one for the entire component.</p> <p>Title \u2014 this is how your data field will be named in the user interface. Here you can use any characters you need.</p> <p>For data fields that must always be non-empty, make sure the \u201cRequired\u201d checkbox is selected.</p> <p>The Property Type allows you to select one of the available data field types.</p> <p>To start, we will add the data field Invoice Name, and set the property type to String. Since invoice names theoretically come from external suppliers, they may repeat, so we do not set the Primary Key flag here.</p> <p></p> <p></p> <p></p> <p>Once we have finished setting up our first field, let\u2019s click Save.</p> <p>Now let\u2019s add the other fields we will need in our application: invoice number, invoice due date, total invoice amount, and invoice status.</p> <p>Invoice Number is the internal account number of each unique invoice, which generally matches the invoice name, but we will ensure it is at least 2 characters long by setting the Min length value to 2, as shown below. It must also be unique to distinguish different invoices, even if they have the same names, so we set the Primary Key flag. This tells the platform that there cannot be more than one Invoice Number property with the same value. If an attempt is made to create a duplicate value, the system will give an error.</p> <p></p> <p></p> <p></p> <p>For the expected invoice due date, set the Property type to DateTime.</p> <p></p> <p></p> <p></p> <p>The total invoice amount should be set as a number. We will also set the Minimal value field to 0 to ensure there are no negative invoices (this might be different in a real financial application where negative values are used, for example, to represent credits from suppliers).</p> <p></p> <p></p> <p></p> <p>Finally, we will add the \u201cInvoice Status\u201d field. As stated in the application description, this will be a set of statuses that should look as follows:</p> <p>0|Under Review 1|Accepted for Payment 2|Rejected 3|Paid 4|Overdue</p> <p>For this, we need to set the property type to Integer (from version 0.5.24 and above) and check the Enum checkbox. Then we need to add all available statuses in the format |, as shown below.</p> <p></p> <p></p> <p></p> <p>Click \u201cSave\u201d. You should see the fully configured data model, as shown below.</p> <p></p> <p></p> <p></p>"},{"location":"tutorials/01-basic-setup.html#setting-up-the-interface-for-our-application","title":"Setting Up the Interface for Our Application","text":"<p>Now we need to set up the user interface for our application. As described above, we will need 2 screens:</p> <ol> <li>A screen for adding a new or editing an existing invoice. We will call it \u201cAdd/View Invoice\u201d.</li> <li>A list of all invoices in the system, which can be filtered and/or sorted using all the invoice fields described above. We will call it \u201cAll Invoices\u201d.</li> </ol>"},{"location":"tutorials/01-basic-setup.html#setting-up-the-addview-invoice-page","title":"Setting Up the Add/View Invoice Page","text":"<p>We already have an automatically added default page called \u201cMain Page\u201d above.</p> <p>In the current version of the platform, the first page of the component by default is used as a form for viewing and editing component data when there is no explicit form for viewing and editing. For example, in our case, the Data Grid UI control that we will use for the All Invoices page will by default open the first page of our component.</p> <p>We will also use the first page for the form for viewing and editing our invoice, and for this we will rename it from Main Page to Add/View Invoices. To do this, click on Main Page, and change the name in the dialog that opens (fields Name and Title).</p> <p>The result will look as shown below.</p> <p></p> <p></p> <p></p> <p>Next, to create the data view and edit form, drag the data fields (properties) from the left into the middle area in the same order as in the data grid shown above.</p> <p>The results should look like this.</p> <p></p> <p></p> <p></p> <p>Click the Save button. Now let's add a page for viewing all invoices.</p>"},{"location":"tutorials/01-basic-setup.html#setting-up-the-all-invoices-page","title":"Setting Up the All Invoices Page","text":"<p>To do this, open the UI Components in the right panel, select Layout, click Page, and drag it into the middle area just above our invoice view form. A page named New page 1 should be added automatically, as shown below.</p> <p></p> <p></p> <p></p> <p>Go to the New page 1 by clicking the button with the same name, and rename it to All Invoices.</p> <p>Click Save. In the UI Components list on the right, select Layout, then select Page and drag it into the middle area. Then go to the Advanced section and drag the DataGrid element into the newly created panel. You will see the result as shown below.</p> <p></p> <p></p> <p></p> <p>Click the Settings icon (gear) in the upper right corner of the new DataGrid element and select Common on the right panel. You will see the selection of the component to display data in this data grid. Select Invoice Inventory.</p> <p></p> <p></p> <p></p> <p>Then select the \u201c+\u201d icon next to the \u201cColumns\u201d label 5 times (since we have 5 data fields that we want to display here).</p> <p></p> <p></p> <p></p> <p>Now for each column, click on the column area. A new dialog will appear to configure the column.</p> <p>For each column, you will need to set the header with the column name (e.g., \u201cInvoice Number,\u201d \u201cInvoice Name,\u201d etc.).</p> <p>You also need to set the \u201cShow Header\u201d option to \u201cOn.\u201d</p> <p>If the \u201cSortable\u201d and/or \u201cFilterable\u201d options are set to \u201cOn,\u201d you will enable dynamic sorting and filtering (similar to how it is done in Excel, for example).</p> <p>Finally, you need to click the \u201cAdd field\u201d button and select the appropriate data field to display in this column.</p> <p>The example below shows the setup for the \u201cInvoice Number\u201d field. The other columns are set up similarly.</p> <p></p> <p></p> <p></p> <p>After you have set up all the columns, go to Actions on the form on the right and make sure the \u201cShow add button\u201d is selected. This will allow adding new invoices through this DataGrid.</p> <p>Additionally, set the Command Type to \u201cEdit Record\u201d so we can view/edit any invoice in the list by clicking on it.</p> <p>See the illustration below for the results.</p> <p></p> <p></p> <p></p> <p>Click the Save button.</p>"},{"location":"tutorials/01-basic-setup.html#adding-action-buttons-and-dataflow-for-saving-data","title":"Adding Action Buttons and Dataflow for Saving Data","text":"<p>After we have created the data view and edit forms, we need to add logic to save the form data to the database and allow users to trigger it.</p> <p>To do this, we need to do two things.</p> <ol> <li>Add buttons that we will use either to save the form data or to cancel all changes and return to the All Invoices list.</li> <li>To save the form data, we will add a simple workflow that will take the form data and save it to the database.</li> </ol> <p></p>"},{"location":"tutorials/01-basic-setup.html#add-save-and-return-to-all-invoices-buttons","title":"Add Save and Return to all invoices buttons","text":"<p>Click \u201cToolbox\u201d, select the \u201cButton\u201d field in the \u201cBasic\u201d section, and drag the button to the middle area of the screen. Set the button title to Save. To do this, go to the Common section, and in the Translation Value field, write Save.</p> <p>Add another button and set the title to \u201cBack to all invoices.\u201d The result should look like the picture below.</p> <p></p> <p></p> <p></p> <p>Now we will make the \u201cBack to all invoices\u201d button switch the UI to the main \u201cAll Invoices\u201d tab. To do this, in the Settings menu for the bottom button, select \u201cActions\u201d and set the \u201cCommand Type\u201d to \u201cOpen Page\u201d and the \u201cComponent Page\u201d to \u201cAll Invoices.\u201d Click Save.</p> <p></p> <p></p> <p></p>"},{"location":"tutorials/01-basic-setup.html#adding-data-flow-for-saving","title":"Adding Data Flow for Saving","text":"<p>To make the Save button in the application save the entered data as an invoice, we need to add a data flow.</p> <p>Click \u201cToolbox\u201d, select the \u201cData flow\u201d field in the \u201cFlow\u201d section, and drag it to the middle area of the screen. A new data flow with the default name \u201cData flow 1\u201d will appear, accessible via the button with the same name in the main component settings menu, to the right of the Input Data flow button. Click the Data flow 1 button and rename your data flow to Save.</p> <p>The result should look like this.</p> <p></p> <p></p> <p></p> <p>Next, click the \"+ ADD STAGE\" button, then \"Add step\" and select the \"Get action model\" step. Add another step and select \"Update entry\", then go to the settings for this step. You can read more about this step in the \"Dataflow\" section. Configure the step as shown below:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Next, add the \"Write response\" step, specify the source step in its settings, and save the component.</p> <p>After that, in the Settings menu for the Save button, select Actions and set the Command Type to Execute dataflow, and choose your new Save from the list.</p> <p>Click the Save button. The result should look like this.</p> <p></p> <p></p> <p></p> <p>Click Save and Ready to publish. Your new component is created and ready to be published.</p> <p></p>"},{"location":"tutorials/01-basic-setup.html#publishing-and-testing-your-application","title":"Publishing and Testing Your Application","text":"<p>You are now ready to publish and test your application.</p> <p>To publish your application, click the Ready to publish button inside your component, then go to Studio\u2192Applications\u2192Publication. Select your Invoice Inventory component from the list of components available for publication, and click the Publish button.</p> <p>You can then use the View App button inside your Studio (not always available), or go to the URL  to see your application in action.</p> <p>Fill in the invoice details and click Save. Then click the \u201cBack to all invoices\u201d button. Your first invoice will be saved, and you will see the list of all available invoices.</p>"},{"location":"tutorials/02-data-flow.html","title":"Tutorial \u21162","text":""},{"location":"tutorials/02-data-flow.html#tutorial-no2","title":"Tutorial \u21162","text":""},{"location":"tutorials/02-data-flow.html#creating-a-simple-application-for-a-car-dealership","title":"Creating a Simple Application for a Car Dealership","text":"<p>Application Description:</p> <p>We are going to create an application consisting of several components that allows tracking cars available for sale, assigning a manager for contract signing, and enabling managers to close the deal.</p> <p>We will create the following components:</p> <p></p>"},{"location":"tutorials/02-data-flow.html#component-transaction-specialists","title":"Component \"Transaction Specialists\"","text":"<p>The first component will be a simple form for adding new managers and will consist of a single custom property:</p> <p></p> <p></p> <p></p> <p>Next, we move on to setting up our workspace, adding a panel element where we will conduct our work. </p> <p>Then, in the panel settings under the \"Layout\" settings group, change the panel orientation to vertical and start adding the following elements: we will need the manager_name we created and a button. It should look like this:</p> <p></p> <p></p> <p></p> <p>Next, create a dataflow, name it \"Add a manager\" and add the following steps: <code>get action model</code>, <code>update entry</code>, <code>write response</code>. It should look like this:</p> <p></p> <p></p> <p></p> <p>Configure the <code>Update entry</code> step as follows:</p> <p></p> <p></p> <p></p> <p>Don't forget to set the <code>source step</code> for the <code>update entry</code> step!</p> <p>After setting up the dataflow, link it to the button as follows: go to the button settings, click on the \"actions\" settings group, set the \"command type\" to \"execute dataflow\" and select the dataflow we created \"Add a manager\".</p> <p>Click on \"Save\", \"Ready to publish\". Publish the component, then add it to the workplace using the \"Navigation menu\" of the domain where you are deploying your application (in our case, this is the \"digital-workplace\" domain).</p> <p></p> <p></p> <p></p> <p>Click \"ADD MENU ITEM\" and add our component: </p> <p></p> <p></p> <p>Go to the <code>workplace</code> and add a few managers for further work with them.</p> <p></p>"},{"location":"tutorials/02-data-flow.html#component-car-fleet","title":"Component \"Car fleet\"","text":"<p>With this component, we will set up the display of all cars and general information about them, add a form for creating records of new cars, a form for assigning a transaction manager to a car, and a form for confirming that the deal is completed with subsequent archiving of the car record. </p> <p>In this component, we will create a number of custom properties:</p> <ul> <li><code>car_vin</code>: property type - <code>string</code>, title - <code>VIN</code>, settings - <code>required</code>, <code>primary key</code>, <code>query</code>;</li> <li><code>car_brand</code>: property type - <code>string</code>, title - <code>Car Brand</code>, settings - <code>required</code>, <code>query</code>;</li> <li><code>car_model</code>: property type - <code>string</code>, title - <code>Car Model</code>, settings - <code>required</code>, <code>query</code>;</li> <li><code>year_of_manufacture</code>: property type - <code>integer</code>, title - <code>Year of manufacture</code>, settings - <code>required</code>, <code>query</code>;</li> <li><code>color</code>: property type - <code>string</code>, title - <code>Color</code>, settings - <code>required</code>, <code>query</code>;</li> <li><code>price</code>: property type - <code>number</code>, title - <code>Price of the car</code>, settings - <code>required</code>, <code>query</code>;</li> <li><code>is_manager_exists</code>: property type - <code>boolean</code>, title - <code>Is manager exists</code>, settings - <code>query</code>;</li> <li><code>choosen_manager</code>: property type - <code>catalog</code>, component - <code>Transaction Specialists</code> title - <code>Chosen Manager</code>, settings - <code>query</code>;</li> <li><code>is_archieved</code>: property type - <code>string</code>, settings - <code>query</code>.</li> </ul> <p>The component will consist of the following parts (pages):</p> <p></p> <ol> <li>Main page</li> </ol> <p>To add a page, you need to find the <code>Layout</code> group in the <code>Toolbox</code> and drag the <code>Page</code> element into the workspace.</p> <p>This page will present a data grid with all cars available for sale and general information about them for sales managers. In addition, we will add a button to the page that will redirect to a form for adding cars to the list, but we will add it later.</p> <p>Add a panel to the workspace, change the orientation setting to vertical, then add two more panels. In the lower panel, place the data grid element, and in the upper panel, add two more panels. In the left panel, place a label and write \"Car fleet\" in its \"translation value\" settings. In the right panel, add a button and write \"Add a new car\" in its \"translation value\". Later we will change the \"Actions\" setting, but for now, you can change the button size in the \"Layout\" settings.</p> <p></p> <p></p> <p></p> <p>You can try other settings. </p> <p>Next, proceed to configure the <code>data grid</code>: click on the gear icon and select the component for the data grid \"Car fleet\". Then next to columns, click on <code>+</code>, this will add a column to our data grid, do this 5 times. </p> <p>Click on the first column, then \"Add field\" and select the property <code>car_brand</code>. The further configuration should look like this:</p> <p></p> <p></p> <p></p> <p>You should configure the following columns in a similar manner in this order: 2nd column - <code>car_model</code>, 3rd column - <code>year_of_manufacture</code>, 4th column - <code>color</code>, 5th column - <code>price</code>.</p> <p>Also, in the data grid settings, set <code>Static filters</code>. Since we are going to display cars that have not yet been assigned a manager, set the following setting:</p> <p></p> <p></p> <p></p> <p>The final result in our workspace should look like this:</p> <p></p> <p></p> <p></p> <ol> <li>Add a new car</li> </ol> <p>This page will be accessed by the user clicking the \"Add a new car\" button from our previous page. Let's start setting up our workspace.</p> <p>Add a panel to the page. In its settings, change the page orientation to vertical. Next, add two more panels. In the first panel, also change the orientation to vertical and transfer our properties to look like this: </p> <p></p> <p></p> <p></p> <p>In the lower panel, add two buttons, set their padding as on the \"Add a new car\" button and name them accordingly: \"Add a new car\" and \"Back to all cars\". </p> <p>In the settings for the \"Back to all cars\" button, set the \"Actions\" to \"Open page\" \"Main page\". Clicking this button will redirect the user to the page with the data grid. For the \"Add a new car\" button, create a data flow, which we will link to it later.</p> <p>The data flow will consist of the following steps: <code>get action model</code>, <code>execute script</code>, <code>update entry</code>, <code>write response</code>. Let's configure them. </p> <p>In the <code>execute script</code> step, create variables that will be used for the properties <code>is_manager_exists</code> and <code>is_archieved</code>:</p> Text Only<pre><code>item[\"_is_manager_exists@boolean\"] = False\nitem[\"_is_archieved@boolean\"] = False\n</code></pre> <p>Next, configure the <code>Update entry</code> step:</p> <p></p> <p></p> <p></p> <p>Next, we need to map our fields. Remember that the fields in the step settings are mapped with the prefix data.<code>property_name</code>. For the properties <code>is_archieved</code> and <code>is_manager_exists</code>, use the variable values set in the execute script step, leave the <code>chosen_manager</code> field empty:</p> <p></p> <p></p> <p></p> <p>Always set the source step for each step except the first one. This will not be mentioned further in the tutorial description.</p> <p>Now that our data flow is complete, we can link it to the \"Add a new car\" button and save our component. The final result of our page is shown below: </p> <p></p> <p></p> <p></p> <ol> <li>Appoint a manager</li> </ol> <p>This page will be called as a modal window when clicking on a particular entry in the data grid. It is designed for a single function - assigning a manager to a particular car. Let's move on to setting up the workspace.</p> <p>The page itself will resemble the \"Add a new car\" page, with the only difference being that we will add the <code>chosen_manager</code> property to the workspace, which will be the only property available for modification. This allows the manager to select a colleague to whom they will transfer the car and the deal. Also, add two buttons, one to close the modal window called \"Back to all cars\", and the other called \"Appoint a manager\" which will be linked to a data flow that we will create later.</p> <p>Don't forget to enable the Disabled setting in the TextBox settings for each property except <code>chosen_manager</code>.</p> <p></p> <p></p> <p></p> <p>The final result on this page should look like the one shown below:</p> <p></p> <p></p> <p></p> <p>Let's move on to configuring the data flow. </p> <p>We need to add the following steps: <code>get action model</code>, <code>execute script</code>, <code>lookup reference</code>, <code>update entry</code>, <code>write response</code>. </p> <p>In the <code>execute script</code> step, we will create a variable that will change the <code>is_manager_exists</code> property to True, causing the newly created entry to disappear from the data grid on the Main page, where we have set static filters. </p> Text Only<pre><code>item[\"_is_manager_exists@boolean\"] = True\n</code></pre> <p>Next, we use the <code>Lookup reference</code> step. I recommend you read about this step in the Dataflow section of our technical documentation. The step should be configured as shown below.</p> <p></p> <p></p> <p></p> <p>Next, we configure the <code>Update entry</code> step, in the field component key specify the field name from the <code>Lookup reference</code> step:</p> <p></p> <p></p> <p></p> <p>In 'Fields mapping' leave the fields empty except for <code>chosen_manager</code> and <code>is_manager_exists</code>, these are the fields we want to change in the record found using the <code>Lookup reference</code> step.</p> <p></p> <p></p> <p></p> <p>In the <code>write response</code> step, we need to set the source step. </p> <p>Assign this dataflow to be executed when the \"Appoint a manager\" button is pressed. Then save the component.</p> <p></p> <p>Proceed to the component script for building the modal window.</p> <p>To create a modal window, you can use the script below. For working with the component script I highly recommend you read the documentation section <code>Using Python</code>:</p> Text Only<pre><code>def show_model_info(model):\n    context.Logger.Error(\"updated\")\n\ndef open_custom_modal(sender, model):\n    # Creating a modal window template using the GUID of a specific component\n    dialog_builder = context.PlatformServices.DialogBuilder('component guid')\n    # Setting the title for the modal window and selecting a specific page from the component's settings\n    # Also setting the component instance ID to 1, so the first saved instance of component data will be used\n    dialog_builder.WithEntryId(int(model[0].Id)).WithTitle(\"Appoint a manager\").WithPageId('page id')\n    # Setting the size of the modal window\n    dialog_builder.WithVSize(\"650px\").WithHSize(\"820px\")\n    dialog_builder.OnComplete(lambda model: show_model_info(model))\n    dialog_builder.OnCancel(update_cars_success)\n    # Opening the created modal window\n    dialog_builder.OpenDialog()\n\ndef get_datagrid_cars(sender, *args):\n    global datagrid_cars\n    datagrid_cars = sender\n\ndef update_cars_success():\n    datagrid_cars.Refresh()\n</code></pre> <p>The <code>get_datagrid_cars</code> and <code>update_cars_success</code> functions are used to automatically update the data grid after some action. If you don't use them, the data grid will only update after refreshing the page in the browser. After copying, you need to save the component and return to the workspace on the \"Main page\".</p> <p>You need to go to the data grid settings in the <code>Events</code> settings group, and assign the execution of functions to certain actions on the data grid.</p> <p></p> <p></p> <p></p> <p>Save the component, then proceed to setting up the next page.</p> <ol> <li>Enter into a contract</li> </ol> <p>This page is a form that allows the manager to archive a particular car deal by changing the <code>is_archieved</code> field to <code>True</code>.</p> <p>The page is a copy of the <code>Appoint a manager</code> page, the only difference being that all fields have the <code>Disabled</code> -&gt; <code>True</code> setting. At the bottom, we will add two buttons, one of which will launch the dataflow, and the other will redirect the user to the component page that we haven't created yet.</p> <p>The page itself should look like this:</p> <p></p> <p></p> <p></p> <p>Let's move on to creating and configuring the dataflow. We will need 5 steps: <code>get action model</code>, <code>execute script</code>, <code>update entry</code>, <code>form action</code>, <code>write response</code>. </p> <p>In the <code>execute script</code> step, we will create a variable that will set the value <code>True</code> in the <code>is_archieved</code> property. </p> Text Only<pre><code>item[\"_is_archieved@boolean\"] = True\n</code></pre> <p>The configuration of the <code>update entry</code> step should look like this:</p> <p></p> <p></p> <p></p> <p>In the field component key, we will provide a reference to the record we want to edit, then proceed to \"Fields mapping\". Here we leave all fields empty except for <code>is_archieved</code>. Here we put the variable we set in the <code>execute script</code> step.</p> <p>Next is the <code>Form action</code> step, which we will return to after creating the final component. For now, save the component to avoid losing your work.</p>"},{"location":"tutorials/02-data-flow.html#component-managers-grid","title":"Component \"Managers grid\"","text":"<p>This component will consist of a single page and we will not create custom properties for it. This component will only be used by managers who have access to it, allowing them to see all cars that have been moved to the deal stage and assigned to a particular manager. </p> <p>Create a data grid, link it to the <code>Car fleet</code> component, and add a column for each of its properties. The result should look like this: </p> <p></p> <p></p> <p></p> <p>Then go to the <code>Actions</code> settings group, set Command type to <code>Open application</code>, Component to <code>Car fleet</code>, Component page to <code>Enter into a contract</code>, a page we created as the last page of the <code>Car fleet</code> component. </p> <p>Next, click on the <code>Action parameters</code> button and map Id -&gt; Id as shown below.</p> <p></p> <p></p> <p></p> <p>Let's save the component and go to its settings. Besides naming and selecting the required domain, we need to check the <code>Restrict access</code> box so we can set special security permissions for this component. </p> <p>Let's save again, mark the component as ready to publish, and add it to the <code>Navigation menu</code> of the domain we are using. </p> <p></p> <p>Return to the <code>Car fleet</code> component on the <code>Enter into a contract</code> page</p> <p>There is one unused button left, <code>Back to all contracts</code>, let's set its <code>Command type</code> in the <code>Actions</code> settings group to <code>Navigation back</code>.</p> <p>Next, we need to return to the \"Deal is done\" dataflow and finish configuring the <code>Form action</code> step. The final configuration of the step should look like this:</p> <p></p> <p></p> <p></p> <p>Don't forget to select the <code>source step</code> in the <code>update entry</code> step.</p> <p>Save, publish the component, add it to the workplace using the <code>Navigation menu</code> and ensure that all components are in place. </p> <p></p>"},{"location":"tutorials/02-data-flow.html#setting-access-to-the-managers-grid-component","title":"Setting access to the <code>Managers grid</code> component","text":"<p>You need to go to the \"Access\" menu in the \"Permissions\" section and click the \"Add\" button in the top right corner. </p> <p>A permission settings window will open on your screen, where you need to specify the domain and give a name for the permission. To grant access to manipulate the <code>Managers grid</code> component, go to <code>Permissions</code>, enter the <code>Components</code> section, find our <code>Managers grid</code> component, and select full access rights for it. Click the \"Save\" button and proceed to the next section \"Roles\".</p> <p>Here you also need to click the \"ADD\" button, select the required domain, name it, and select the \"Permission\" you created earlier. Then proceed to the <code>Users</code> section.</p> <p>In the <code>Users</code> section, all users registered in your system are listed. Click on the user to whom you want to grant rights to use this component, in \"Select contexts\" choose \"Platform\" -&gt; \"System\" and in \"Select roles\" find the role you created earlier, then click the checkbox and click \"Save\".</p> <p></p>"},{"location":"tutorials/02-data-flow.html#conclusion","title":"Conclusion","text":"<p>You have created a small and simple application in which you worked with several components and learned how to link them together. You learned how to create modal windows and began to explore the interaction between programming languages and our platform's tools.</p> <p>Try to create several managers, add new cars for sale, assign managers to them, and attempt to close deals. </p> <p>Of course, this application is a test; it can be improved and made more complex endlessly. After creating it, you can use other tools on your own, build different logic, and customize the design to your liking. The platform provides you with flexible tools that make development more exciting and easier! </p> <p>Descriptions of the tools used in the tutorial can be found in the \"Application Development\" section.</p>"},{"location":"tutorials/03-workflow.html","title":"Tutorial \u21163","text":""},{"location":"tutorials/03-workflow.html#tutorial-no3","title":"Tutorial \u21163","text":""},{"location":"tutorials/03-workflow.html#using-python","title":"Using Python","text":""},{"location":"tutorials/03-workflow.html#introduction","title":"Introduction","text":"<p>The platform provides the ability to use Python for various purposes as a convenient and widely known scripting/programming language.</p> <p>Python scripts supported by the platform must use Python version 3.0, as described here: https://docs.python.org/3/. The full developer guide can be found in the \"Using Python\" section.</p> <p>The version of Python used by the platform is called Iron Python, which provides an interface to C# code. It provides two important libraries that need to be imported at the beginning of the script \u2014 <code>clr</code> and <code>system</code>. These libraries provide access to platform entities that can be queried and controlled from the script. </p>"},{"location":"tutorials/03-workflow.html#ways-to-use-python-scripts-on-the-platform","title":"Ways to Use Python Scripts on the Platform","text":"<p>There are several ways to use Python on the platform:</p> <ul> <li> <p>It allows controlling application forms designed and executed using the platform, as well as providing custom indices that can be triggered in response to an event, such as a client pressing a button.   </p> </li> <li> <p>Calling a Function Inside a \"Component Script\", for Example, When a Button Is Pressed:</p> </li> <li> <p>To do this, you need to define a function inside the Component Script, then go to a UI control element such as a Button, go to the \"Actions\" section and set the \"Command Type\" parameter to \"Execute Script\". Then you need to enter the name and call parameters (if any) of your script in the provided fields.     </p> </li> <li> <p>Using a Function Inside a Component Script for Value Change Events:</p> </li> <li>To do this, you need to define a function inside the component script, then go to a UI control element such as a text box, etc., then go to the \"Events\" section and enter the name of your script in the \"On value change\" field.</li> <li>Note that this function will only be called if the data in the field has changed and the focus of the UI control element in the form leaves this UI control element.</li> </ul> <p></p> <ul> <li>By Subscribing to Data Changes Using the <code>context.DataModel.Model.Subscribe()</code> Method:</li> <li>The easiest way to do this is to define a function to intercept all changes (e.g., <code>def check_all_changes()</code>) in your component script, and then subscribe to it.</li> <li>Your function will be called every time there is a change in the current data of the UI control element, at the moment when this UI control element loses focus (for example, when the user switches to another UI control element or another application).</li> </ul> <p></p> <ul> <li>As part of a DataFlow action, execute a script to define decision-making logic, transform data, and set internal variables that will be used as part of DataFlow scripts. You can see examples of using Python scripts for DataFlow in the \"Using Python\" section.</li> </ul> <p></p>"},{"location":"tutorials/03-workflow.html#using-python-to-access-platform-components","title":"Using Python to Access Platform Components","text":"<p>To access platform components, you first need to import the clr libraries of IronPython, as shown below.</p> Text Only<pre><code>#Add IronPython library that imports system CRL (.NET) names into Python\nimport clr\n</code></pre> <p>After importing, several objects can be accessed from within the Python script via the system variable <code>context</code>.</p> <p></p>"},{"location":"tutorials/03-workflow.html#using-contextmodel-contextdatamodel","title":"Using context.Model &amp; context.DataModel","text":"<p><code>context.Model</code> &amp; <code>context.DataModel</code> provide access to various data fields of the platform model.</p> <p>For context.Model, data fields include both the default component fields provided by the platform and custom fields added by the component developer.</p> <p>For context.DataModel, only custom fields added by component developers are available.</p> <p>It is recommended that context.DataModel be used to access all custom fields, and context.Model be used only to access the internal fields of the default component.</p> <p>If we write a component script that accesses this model, the following system model variables will be available in our script through context.Model:</p> <ul> <li><code>Id</code> - internal identifier, automatically generated by the platform for each component. If Id == 0, it means that the component data has not yet been saved, indicating that we are in the data entry mode for this particular instance of the component data, such as adding a new invoice in our Tutorial #1.</li> <li><code>createDate</code> - internally set date when the data instance of this component was first created</li> <li><code>name</code> (String) - system user-friendly name that will be taken by default to display links through Catalog type fields</li> <li><code>updateDate</code> - internally set date of the last update of this component's data instance.</li> <li><code>CreatorSubject</code> - data that shows which user added the data instance of this particular component.</li> <li><code>changeAuthor</code> - data that shows which user last updated this particular component</li> </ul> <p>Additionally, the following component-specific attributes will be available for our Tutorial #1 component via context.DataModel (recommended) or context.Model:</p> <ul> <li><code>InvoiceName</code> - unique name for our new invoice</li> <li><code>InvoiceState</code> - current status of our new invoice</li> <li><code>InvoiceNumber</code> - unique number identifier for our invoice</li> <li><code>InvoiceDueDate</code> - due date of our invoice</li> <li><code>InvoiceTotalValue</code> - total value of our invoice</li> </ul> <p>Let's now write a sample script that will pre-fill some fields for a new invoice.</p> <p></p> Python<pre><code>#Start of the script\n#Add IronPython library that imports system CRL (.NET) names into Python\nimport clr\n\n#Get Component\u2019s DataModel reference\ndatamodel = context.DataModel.Model\n# context.Model.Id shows internal Id for the component data instance\nif (context.Model.Id == 0):\n# If context.Model.Id is 0, then the instance has not yet been created,\n# That means we are creating a new invoice\n# We will then set some fields with default values\n# Since this is a new Invoice,\n# We\u2019ll set it\u2019s status to Under Review and provide default number and name\ndatamodel.InvoiceNumber = 11111\ndatamodel.InvoiceName = 'PLEASE_SET_A_UNIQUE_NAME'\ndatamodel.InvoiceState = 0\n#End of the script\n</code></pre> <p></p> <p>Now, if we open the Tutorial #1 application and click the \"Add\" button to add a new invoice, the screen will look like this:</p> <p></p> <p></p> <p></p>"},{"location":"tutorials/03-workflow.html#using-contextproperties","title":"Using context.Properties","text":"<p><code>context.Properties</code> allows access to all component elements and can be used, for example, to utilize form UI control element functions to manage a specific UI control element.</p> <p>To access a UI control element, use <code>context.Properties</code> as follows:</p> Text Only<pre><code>context.Properties.&lt;Internal_UI_Control_Name&gt;.&lt;UIControlProperty&gt; = &lt;Value&gt;\n</code></pre> <p>Here, <code>&lt;Internal_UI_Control_Name&gt;</code> should be replaced with the name of your UI control element that you configured during design. For example, in the case of Tutorial #1, we set the internal name for the InvoiceState UI control element as shown below:</p> <p></p> <p></p> <p></p> <p>Now we can use this internal name to set the following logic:</p> <ol> <li>When creating a new invoice, the status is set to \"Under Review\".</li> <li>Changing the status field is prohibited, meaning this field should be disabled but visible.</li> </ol> <p>The way to do this is to use the <code>Disable</code> property of our UI control element to set it to <code>True</code>. This will make the field appear but it cannot be changed by the user creating the new invoice. This is done by adding a line of code as shown below:</p> Text Only<pre><code>context.Properties.UI_InvoiceStatus.Disabled = True\n</code></pre> <p>Adding this to our component script will result in the following changes in our new invoice addition form.</p> <p></p> <p></p> <p></p> <p>As you can see, the \"Invoice Status\" field is now disabled.</p> <p>Another frequently used <code>context.Properties</code> field for managing UI control elements is <code>Visible</code>. If set to <code>False</code>, this specific UI control element will not appear in the form. It can then be re-enabled by setting it to <code>True</code>. This can be done for any UI control element, including panels containing several different UI control elements.</p> <p>An example of how it can be used in the context of our Tutorial #1 to initially hide the \"Invoice Status\" field is shown below.</p> <p></p> Python<pre><code>if (context.Model.Id == 0):\n    context.Properties.UI_InvoiceStatus.Visible = False\nif (context.Model.Id &gt; 0):\n    context.Properties.UI_InvoiceStatus.Visible = True\n</code></pre> <p></p> <p>There is also the <code>Hidden</code> field, which hides/shows user interface elements, similar to the <code>Visible</code> field.</p> <p>Another frequently used <code>context.Properties</code> field is <code>Required</code>. If set to <code>True</code>, the specific UI control element becomes mandatory (cannot be empty), and if set to <code>False</code>, it becomes optional. Note that this only changes the state of the UI control element for the custom property in the current form instance, not the custom property itself, the form template, or UI control elements for this custom property in other forms.</p> <p></p>"},{"location":"tutorials/03-workflow.html#using-contextform","title":"Using context.Form","text":"<p><code>context.Form</code> can be used to access form data (e.g., for validation purposes during form processing, before the form data is saved to internal storage) or to manage the visual representation of the form, such as by setting an error message.</p> <p>To do this, use <code>context.Form.Get(&lt;CustomFieldName&gt;)</code> to get an object representing a specific field. Then you can use the following functions with this object.</p> <ul> <li><code>context.Form.Get(&lt;CustomFieldName&gt;).SetValue(&lt;Value&gt;)</code> \u2014 sets the value for a specific UI control in the current form.</li> <li><code>context.Form.Get(&lt;CustomFieldName&gt;).AddError(&lt;StringValue&gt;)</code> \u2014 sets an error message displayed under a specific UI control in the current form.</li> <li><code>context.Form.Get(&lt;CustomFieldName&gt;).ClearError()</code> \u2014 clears the error message shown under a specific UI control in the current form.</li> </ul> <p>The following script extension shows how to check the situation where the user did not change the default invoice name that we set above in the examples for Tutorial #1.</p> <p></p> Python<pre><code>if datamodel.InvoiceName == 'PLEASE_SET_A_UNIQUE_NAME':\n    context.Form.Get(\"InvoiceName\").AddError(\"Please set a unique invoice name\")\nelse:\n    context.Form.Get(\"InvoiceName\").ClearError()\n</code></pre> <p></p> <p>The result will look like the following screenshot if the default name was not changed:</p> <p></p> <p></p> <p></p>"},{"location":"tutorials/03-workflow.html#using-contextcommands","title":"Using context.Commands","text":"<p><code>context.Commands</code> can be used to manage the UI of the currently executing component, change the content of the current form, open different pages, open new components, return to the previous page, or even launch new Workflows, Dataflows, or Scripts.</p> <p>These commands are typically used within scripts called by the ExecuteScript action using buttons, and in similar cases. For example, in our Tutorial #1, the Back to All Invoices button can use the following script to return to the previous page:</p> <p></p> Python<pre><code>def navigate_back():\n    context.Commands.NavigationBack()\n</code></pre> <p></p> <p>This script should be part of the component script and be set up for the Back to All Invoices button, in the <code>Actions</code> section -&gt; <code>Command Type</code>: <code>Execute Script</code> -&gt; <code>Method Name</code>: <code>navigate back</code>.</p> <p></p> <p>Other available context.Commands functions:</p> <ul> <li><code>context.Commands.AddItem(GUID)</code> - add a UI control element to the page using the GUID.</li> <li><code>context.Commands.ChangePageAsync(GUID)</code> - open a page using its GUID</li> <li><code>context.Commands.ChangePageByName(\u00abPageName\u00bb)</code> - change the current component page to a new page using the internal name</li> <li><code>context.Commands.OpenComponent(GUID ComponentID, GUID PageID)</code> - open a new component and a specific page within the component</li> <li><code>context.Commands.EditItem(GUID UI_ControlID, EntityId)</code> - shift the UI focus to a specific UI control element and specific data (using its internal identifier)</li> <li><code>context.Commands.ExecuteWorkflow(GUID WorkflowID)</code> - execute a workflow using its identifier. Additionally, you can set WaitComplete to true or false if needed.</li> <li><code>context.Commands.ExecuteDataflow(GUID dataflow identifier, ContextID)</code> - execute a dataflow using its GUID and the specified data context.</li> <li><code>context.Commands.ExecuteScript(String ScriptName, StringParams Script)</code> - execute a script (function) from the Component Script with some parameters.</li> </ul>"},{"location":"user-interface/index.html","title":"Menu Items","text":""},{"location":"user-interface/index.html#menu-items","title":"Menu Items","text":"Text Only<pre><code>home.md\n\napplications.md\n\nmaintenance.md\n\nlocalizations.md\n\nextensions.md\n\naccess.md\n\nfile-storage.md\n</code></pre>"},{"location":"user-interface/access.html","title":"Access","text":""},{"location":"user-interface/access.html#access-menu","title":"Access Menu","text":"<p>The menu consists of 3 sections: - Permissions; - Roles; - Users. </p>"},{"location":"user-interface/access.html#permissions","title":"Permissions","text":"<p>The \u201cPermissions\u201d section in the platform is used to control access and permissions of users and groups in the system. This section allows you to add, remove, and configure permissions that determine what operations users can perform in different parts of the system.</p> <p>Adding/Removing Permissions:</p> <ul> <li>Adding a New Set of Permissions: Click the \u2018ADD\u2019 button.</li> <li>Delete Permissions Set: Click the \u2018Delete\u2019 button (cross icon).</li> </ul> <p>Permissions are configured via the following settings:</p> <ul> <li>Domain: Selecting from the available domains.</li> <li>Name: Name of the permission.</li> <li>Permissions: Set of permissions. </li> </ul>"},{"location":"user-interface/access.html#roles","title":"Roles","text":"<p>The \u2018Roles\u2019 section is used to define and manage the various roles in the system. Roles define sets of rights and permissions for different users or groups, making it easier to manage access and security.</p> <p>Adding/Removing Roles</p> <ul> <li>Adding a New Role: Click the \u2018ADD\u2019 button.</li> <li>Deleting a Role: Click the \u2018Delete\u2019 button (cross icon).</li> </ul> <p>Roles are configured via the following settings:</p> <ul> <li>Domain: Selecting from the available domains.</li> <li>Name: Name of the role.</li> <li>Description: Description of the role.</li> <li>Select contexts - Select permission sets: Define the context pairs and permission sets that are associated with this role. This configures the combination of the context and set of privileges allowed for a given role in a given context. System-wide permissions override the permissions granted within certain structures. </li> </ul>"},{"location":"user-interface/access.html#users","title":"Users","text":"<p>User management is a key part of the access control system in the platform. This section allows administrators to manage all users registered on the platform, add new users, and delete or update the existing profiles.</p> <p>To view the list of users: - Go to \u2018Access\u2019 \u2192 \u2018Users\u2019 to see a list of all registered users.</p> <p>To add a new user: - Step 1: Click the \u2018Add\u2019 button on the \u2018Access \u2192 Users\u2019 screen. - Step 2: Specify the following options for the new user:   - User name: Name of the user (required).   - Email: User\u2019s email.   - First name: User\u2019s first name.   - Last name: User\u2019s last name.   - Middle name: User\u2019s middle name.   - Active: Set \u2018true\u2019 to activate the user, \u2018false\u2019 to deactivate.   - Password: Password for the new user.   - Select contexts - Select Roles: Selecting the roles that can be assigned to a user in the system.</p> <p>To delete a user: - To delete a user, log in to their account and uncheck the \u2018Active\u2019 checkbox, then click the \u2018Update\u2019 button.</p>"},{"location":"user-interface/applications.html","title":"Applications","text":""},{"location":"user-interface/applications.html#applications-menu","title":"Applications Menu","text":""},{"location":"user-interface/applications.html#components","title":"Components","text":"<p>This section contains a complete list of all components available in the system. From here, you can view the details of each component, as well as add new components or multi-components, expanding the capabilities of your application. Ideal for organizing and managing all the components of your project.</p> <p> </p>"},{"location":"user-interface/applications.html#python-modules","title":"Python Modules","text":"<p>This section offers the ability to add and manage common Python modules. These modules become available both on the front-end in Component Script and on the back-end in Execute Script for dataflow. This allows you to centrally manage the logic that can be used in different parts of the application. Read more here: Using Python</p> <p> </p>"},{"location":"user-interface/applications.html#integrations","title":"Integrations","text":"<p>The \u201cIntegrations\u201d section plays a key role in creating links between your application and external services. Here you can add new integrations, remove unnecessary ones, and change the settings of current integrations, which provides flexibility and scalability of the application functionality.</p> <p> </p>"},{"location":"user-interface/applications.html#publication","title":"Publication","text":"<p>Once you\u2019ve finished configuring and preparing your components, this section allows you to publish them for future use. You can choose components, localizations, integrations, and even Python modules to include in your publication, making the deployment process efficient and organized. Read more here: Publish Components</p> <p> </p>"},{"location":"user-interface/applications.html#exportimport","title":"Export/Import","text":"<p>This section provides tools for exporting and importing component configurations in JSON format. This is useful for moving settings between different environments, such as from development to testing or production, making it easier to migrate and synchronize changes between different Studio instances.</p> <p></p>"},{"location":"user-interface/extensions.html","title":"Extensions","text":""},{"location":"user-interface/extensions.html#extensions-menu","title":"Extensions menu","text":"<p>The menu consists of 2 blocks: - Templates - SMTP settings </p>"},{"location":"user-interface/extensions.html#templates","title":"Templates","text":"<p>Templates are used for mailing and user notifications and can only be used in the \u2018Send Templated Notification\u2019 step. Templates are configured in the \u2018Application/Templates\u2019 section. </p>"},{"location":"user-interface/extensions.html#addingremoving-templates","title":"Adding/Removing Templates","text":"<ul> <li>To add a new template, click the \u2018ADD\u2019 button. </li> <li>To delete a template, click on the cross in the common list of all templates. </li> </ul>"},{"location":"user-interface/extensions.html#setting-up-the-template-component-model","title":"Setting up the template component model","text":"<p>When adding or editing a Template, you must define an Object Model structure that will interact with Dataflow and/or Workflow. This is done by setting a set of properties for each of them, similar to configuring any component. </p>"},{"location":"user-interface/extensions.html#customizing-template-layout-and-content","title":"Customizing Template Layout and Content","text":"<p>The platform uses \u2018DevExpress Report Designer\u2019 to create templates. These templates can be used to send notifications or create documents.</p> <ul> <li>After creating a new template, the editing window opens. This is where you can add and customize visual elements to your template, and make links to your template properties. </li> </ul>"},{"location":"user-interface/extensions.html#smtp-settings","title":"SMTP settings","text":"<p>The mailing service is used to send notifications via SMTP.</p> <p>Recommendations for using an SMTP server:</p> <ul> <li>During Development: It is recommended to use a corporate SMTP server or shareware services such as [sendinblue.com] (http://www.sendinblue.com/). Avoid using a personal server to avoid getting into spam.</li> <li>For Industrial Use: It is preferable to use a corporate or paid commercial SMTP service.</li> </ul> <p>Configure the following settings for the mailing service:</p> Setting Field Value Options Purpose <code>Sender</code> - Default sender name, e.g. <code>sender@company.com</code> <code>User name</code> - Login for the SMTP server, usually in the <code>user@company.com</code> format. <code>Password</code> - SMTP server password <code>Host</code> - SMTP server address, e.g. <code>http://smtp-relay.sendinblue.com/</code> <code>Port</code> - Port for the SMTP server depends on the provider, for example 587 for sendinblue.com <code>Enable SSL</code> <code>true</code>, <code>false</code> Using SSL to encrypt data. \u2018True\u2019 is usually used for modern SMTP servers. <p></p>"},{"location":"user-interface/extensions.html#example-of-using-template-and-smtp","title":"Example of using Template and SMTP","text":"<ol> <li>Create and customize a template.</li> <li>Set up SMTP to send email.</li> <li>In your workflow, add the \u2018Send Templated Notification\u2019 step.</li> <li>Select the SMTP notification type and set the parameters for sending e-mail.</li> <li>Choose your template and set the render type in HTML.</li> </ol> <p>After you complete these steps, your workflow will send an email using the customized template.</p>"},{"location":"user-interface/file-storage.html","title":"File Storage","text":""},{"location":"user-interface/file-storage.html#file-storage-menu","title":"File Storage Menu","text":"<p>File storage is a convenient tool for managing files used in the platform low-code studio. It provides flexible management of file resources, supporting the creation, upload, and use of files as part of application development. </p> <p> </p>"},{"location":"user-interface/file-storage.html#folder-structure","title":"Folder structure","text":"<ul> <li>In the left panel of the file storage, you can create, delete, and manage a folder structure.</li> <li>Use the \u2018Create Folder\u2019 button to create new folders, including subfolders. </li> </ul>"},{"location":"user-interface/file-storage.html#managing-files","title":"Managing files","text":"<ul> <li>The right panel shows a list of all files available for use in the studio.</li> <li>Files can be uploaded to a server, downloaded to a local computer, or deleted.</li> <li>Use the \u2018Upload file\u2019 button to add new files to the storage. </li> </ul>"},{"location":"user-interface/file-storage.html#using-file-storage-in-the-studio","title":"Using file storage in the studio","text":"<p>Example 1: - A \u2018File\u2019 element is available in the toolbar that can be dragged to the component page layout. - The \u2018Choose file\u2019 button appears, allowing access to files on your local drive or file storage.</p> <p>Example 2: - Files can be used in settings for various user interface elements, for example, for the \u2018Image\u2019 element. - In the element settings, you can select a file from disk or file storage to integrate into the user interface.</p>"},{"location":"user-interface/home.html","title":"Home","text":""},{"location":"user-interface/home.html#home-menu","title":"Home Menu","text":"<p>The page provides information about your license and the application domains that have been deployed. You\u2019ll get access to the following features and information:</p> <ul> <li>Plan Type: This displays the type of your current plan and the expiration or renewal date of your subscription.</li> <li>Application Domains: This section allows you to create application components, connect users via specific URLs, and navigate to the \u201cNavigation Menu\u201d section.</li> <li>Usage Statistics: Displays information about the current number of applications compared to the total limit, as well as the current and total number of users, workflows, and dataflows.   </li> </ul> <p> </p>"},{"location":"user-interface/home.html#learn-more-about-configuring-applications-domains","title":"Learn more about configuring applications domains","text":"<p>Application domains are external spaces with a specific URL (HTTP/HTTPS://) where you can deploy your components.</p> <p>By default, an app is available named \u2018digital-workplace\u2019. You can add more apps using the \u2018Add application\u2019 button in the upper right corner of the toolbar. Each app you add appears in the list of apps under your plan description.</p> <p>In the application domain, the following parameters can be set in the \u2018main settings\u2019:</p> Settings group Setting Field Value Options Purpose Main settings Title - Browser Tab Title Hide top bar true, false Hiding the top menu for workplace Static menu true, false Constant display of menus or display on mouse hover Hide breadcrumps true, false Showing/hiding hierarchical navigation Hide user login true, false Showing/hiding user login Hide locale true, false Showing/hiding location selection Choose logo Logo, Small logo, favicon, \"No image\" placeholder Choosing a logo for WorkPlace (different types) User Session Storage local/session Saving authorization parameters in a session or locally Default Idp provider Multiselect of Catalog Choosing an Authorization Method Default locale Multiselect of Catalog Default localization Default user info app Multiselect of Catalog Main application for managing user data Default component Multiselect of Catalog Default Component Default page - Default component page Login component Multiselect of Catalog Authorization form component Enable SIP True, False Building integration with SIP <p></p> <p>In this group, you can set the settings of global modules via JavaScript and CSS, which allows you to turn the platform into a content management system (CMS), as well as upload and use any third-party libraries.</p> <p>JS example for global JavaScript:</p> JavaScript<pre><code>loadScript([\n  'https://code.jquery.com/jquery-3.7.1.min.js?integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=&amp;crossorigin=\"anonymous\"',\n])\n  .then((res) =&gt; {\n    return loadScript([\n      'https://code.jquery.com/ui/1.13.2/jquery-ui.min.js?integrity=\"sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0=\"&amp;crossorigin=\"anonymous\"',\n    ]);\n  })\n  .subcribe({\n    complete: () =&gt; {\n      console.log(\"Load scripts complete\");\n    },\n    error: (err) =&gt; {\n      console.log(\"Load scripts err:\" + err);\n    },\n  });\n</code></pre> <p></p> <p>In addition, there is a \u2018style settings\u2019 group of settings:</p> Settings group Setting Field Purpose Main font Font Main font of the app Color scheme Default theme Default color scheme Primary light color Main light color Primary color Main color Primary dark color Main dark color Primary darker color Main darker color Primary text color Default text color <p></p> <p>\u2018Edit manifest\u2019 settings group:</p> Setting Field Purpose Name Name of the app in the manifest Short name Short name of the app Choose Icon (192x192) Choosing a 192x192px app icon Choose Icon (512x512) Choosing a 512x512px app icon <p></p>"},{"location":"user-interface/home.html#sip-integration","title":"SIP Integration","text":"<p>If the \u2018Enbale SIP\u2019 option inside the \u2018Main settings\u2019 is enabled, several subsequent settings are required for calls from the work-place to work correctly.</p> <p>On the studio side:</p> Setting Field Purpose SIP WebSocket server SIP WebSocket server address (e.g. 'wss://test-pbx.aqtra.ru:8089/ws') SIP realm SIP Scope (realm) <p></p> <p>On the work-place side:</p> Setting Field Purpose SIP user name Name of the SIP user SIP user password Password of the SIP user SIP WebSocket server SIP WebSocket server address (e.g. 'wss://test-pbx.aqtra.ru:8089/ws') SIP realm SIP Scope (realm) <p></p> <p>If all parameters are set correctly, you will be able to make calls from the work-place. You can read about working with SIP within the component script here: Using Python.</p>"},{"location":"user-interface/localizations.html","title":"Localizations","text":""},{"location":"user-interface/localizations.html#localizations-menu","title":"Localizations Menu","text":"<p>The platform provides extensive capabilities for creating multilingual user interfaces, making it easier to develop applications that support a global audience. At the moment, the platform supports multiple languages, including English, Turkish, and Russian. This is achieved via the use of a localization system and translation keys, which allows the user interface to be dynamically adapted to different language standards. These features provide flexibility and scalability for multilingual application development, making it ideal for implementing complex international projects. </p>"},{"location":"user-interface/localizations.html#configuring-the-translation-key-for-the-ui-component","title":"Configuring the translation key for the UI Component","text":"<ul> <li>When adding UI elements to a component, you can configure a \u2018Translation Key\u2019 instead of a static label.</li> <li>Example: The \u201cSave\u201d button can have a translation key instead of the hard-coded \u201cSave\u201d text.</li> <li>If the translation key is new, enter its name and add it as a new key.</li> <li>If the key already exists, select it from the drop-down list.</li> <li>Here\u2019s an example of using a new key:</li> </ul> <ul> <li>An example of using an existing key:</li> </ul>"},{"location":"user-interface/localizations.html#providing-translation-values-for-translation-keys","title":"Providing Translation Values for Translation Keys","text":"<ol> <li>Open \u2018Studio\u2192Localizations\u2192Localization Settings\u2019.</li> <li>Select the key you want to edit and click on the pencil.</li> <li>Make changes to the localization values for the languages you want.</li> <li> <p>Confirm the changes.</p> </li> <li> <p>Editing example:</p> </li> </ol> <p></p>"},{"location":"user-interface/maintenance.html","title":"Maintenance","text":""},{"location":"user-interface/maintenance.html#maintenance-menu","title":"Maintenance menu","text":"<p>The \u201cMaintenance\u201d menu is a powerful tool for managing data and maintaining the system, especially after major updates, data migrations, or database changes. </p>"},{"location":"user-interface/maintenance.html#general-description","title":"General description","text":"<ul> <li>Purpose: Managing PostgreSQL data via ODATA, removing deleted data, analyzing and managing system logs.</li> <li>Features: The tool is mainly used after platform version updates, component imports, or massive data changes.   </li> </ul>"},{"location":"user-interface/maintenance.html#maintenance-menu-tabs","title":"Maintenance menu tabs","text":""},{"location":"user-interface/maintenance.html#system-logs","title":"System logs","text":"<p>! [System logs] (system-logs.png) </p> <ul> <li>Functionality: View current system logs and adjust logging levels (Trace, Debug, Information, Warning, Critical, Error, None).   </li> </ul>"},{"location":"user-interface/maintenance.html#system-maintenance","title":"System maintenance","text":"<p>! [System maintenance] (system-maintenance.png) </p> <ol> <li>Rebuild Database References: Checking and rebuilding cross-references between components or within components (dataflow/workflow).</li> <li>Rebuild RLS Rules: Rebuilding Row-Level Security rules to customize data access.</li> <li>Rebuild Cache: Rebuilding the platform\u2019s internal cache, solving problems with updates.</li> <li>Analysis marked for deletion: Viewing and managing records marked for deletion using the \u2018Mark entry for deletion\u2019 flag in the \u2018Update entry\u2019 step. After clicking the \u201cAnalysis marked for deletion\u201d button, all marked entries are displayed. Entries are selected and deleted via \u201cDelete selected items\u201d. The system will prevent entries from being deleted if there are related untagged entries.</li> <li>Reset current publication: Resets the publishing process if it fails.    </li> </ol>"},{"location":"user-interface/maintenance.html#file-storage","title":"File storage","text":"<p>This section adds the ability to configure the following settings for File storage:</p> Acceptable file types File size limit in bytes .* (all file types) selected size <p></p> <p>You can specify filter types, separating them with commas. This can be file extensions, such as .jpg, .json, .docx, or Mime-types, for example, image/, application/</p> <p>You can also combine filters, for example, <code>image/*</code>, <code>.docx</code>. Using the <code>*/*</code> filter allows you to upload any files. </p> <p></p>"},{"location":"de/index.html","title":"Startseite","text":""},{"location":"de/index.html#aqtra-plattform","title":"Aqtra-Plattform","text":"<p>Willkommen in der Aqtra-Plattformdokumentation! Eine moderne Low-Code-Plattform zur Erstellung von Unternehmensanwendungen mit visueller Programmierung und Unterst\u00fctzung f\u00fcr Gesch\u00e4ftsprozessautomatisierung.</p> \ud83d\ude80 Schnellstart \u2699\ufe0f Entwicklung \ud83d\udcda Tutorials <p>Neu in Version 2.0</p> <p>Unterst\u00fctzung f\u00fcr Python-Module hinzugef\u00fcgt, verbesserte Entwicklungsschnittstelle und erweiterte M\u00f6glichkeiten zur Prozessautomatisierung.</p> <p>Sprachunterst\u00fctzung</p> <p>Die Dokumentation ist in den Sprachen Russisch und Englisch verf\u00fcgbar.</p>"},{"location":"de/index.html#erste-schritte","title":"Erste Schritte","text":"<ul> <li>Erste Schritte - Lernzentrum</li> <li>Erste Schritte - Erste Anmeldung</li> <li>Konfiguration - Grundeinstellungen</li> </ul>"},{"location":"de/index.html#benutzeroberflache","title":"Benutzeroberfl\u00e4che","text":"<ul> <li>Startseite - Startseite</li> <li>Zugriff - Zugriff</li> <li>Anwendungen - Anwendungen</li> <li>Erweiterungen - Erweiterungen</li> <li>Dateispeicher - Dateispeicher</li> <li>Lokalisierungen - Lokalisierungen</li> <li>Wartung - Wartung</li> </ul>"},{"location":"de/index.html#anwendungsentwicklung","title":"Anwendungsentwicklung","text":"<ul> <li>Komponente - Komponenten</li> <li>Ver\u00f6ffentlichen von Anwendungen - Ver\u00f6ffentlichen von Anwendungen</li> <li>Python verwenden - Python verwenden</li> <li>Datenflusskomponenten - Datenflusskomponenten</li> <li>UI-Komponenten - UI-Komponenten</li> <li>Workflow-Komponenten - Workflow-Komponenten</li> </ul>"},{"location":"de/index.html#tutorials","title":"Tutorials","text":"<ul> <li>01 - Grundlegende Einrichtung - Grundlegende Einrichtung</li> <li>02 - Datenfluss - Datenfluss</li> <li>03 - Workflow - Workflow</li> </ul>"},{"location":"de/index.html#zusatzliche-ressourcen","title":"Zus\u00e4tzliche Ressourcen","text":"<ul> <li>Forum - Forum</li> <li>Versionshinweise - Versionshinweise</li> </ul>"},{"location":"de/architecture.html","title":"Aqtra-Plattform-Architektur","text":""},{"location":"de/architecture.html#aqtra-plattform-architektur","title":"Aqtra-Plattform-Architektur","text":"<p>\u00dcberblick \u00fcber die Aqtra-Plattform-Architektur und die wichtigsten Systemkomponenten.</p>"},{"location":"de/architecture.html#allgemeines-schema","title":"Allgemeines Schema","text":"Text Only<pre><code>graph TB\n    A[Benutzer] --&gt; B[Web-Oberfl\u00e4che]\n    B --&gt; C[API-Gateway]\n    C --&gt; D[Kerndienste]\n    D --&gt; E[Datenschicht]\n    D --&gt; F[Workflow-Engine]\n    D --&gt; G[Komponentenbibliothek]\n\n    E --&gt; H[(Datenbank)]\n    E --&gt; I[Dateispeicher]\n\n    F --&gt; J[Prozessautomatisierung]\n    G --&gt; K[UI-Komponenten]\n    G --&gt; L[Datenflusskomponenten]\n\n    style A fill:#e1f5fe\n    style B fill:#f3e5f5\n    style C fill:#e8f5e8\n    style D fill:#fff3e0\n</code></pre>"},{"location":"de/architecture.html#systemkomponenten","title":"Systemkomponenten","text":""},{"location":"de/architecture.html#kernmodule","title":"Kernmodule","text":"Modul Beschreibung Status Core Engine Plattformkern Aktiv UI Builder Schnittstellenkonstruktor Aktiv Workflow Engine Prozess-Engine Aktiv Data Flow Datenverarbeitung Aktiv Python Runtime Python-Code-Ausf\u00fchrung In Entwicklung"},{"location":"de/architecture.html#technologie-stack","title":"Technologie-Stack","text":"Backend <p><code>python     # Kerntechnologien     - Python 3.11+     - FastAPI     - PostgreSQL     - Redis     - Celery</code></p> Frontend <p><code>javascript     // Client-Technologien     - React 18     - TypeScript     - Material-UI     - Redux Toolkit</code></p> DevOps <p><code>yaml     # Infrastruktur     - Docker     - Kubernetes     - Nginx     - Prometheus</code></p>"},{"location":"de/architecture.html#entwicklungsprozess","title":"Entwicklungsprozess","text":"Text Only<pre><code>sequenceDiagram\n    participant U as Benutzer\n    participant UI as UI-Builder\n    participant E as Engine\n    participant DB as Datenbank\n\n    U-&gt;&gt;UI: Erstellt Komponente\n    UI-&gt;&gt;E: Speichert Konfiguration\n    E-&gt;&gt;DB: Schreibt Daten\n    E--&gt;&gt;UI: Best\u00e4tigung\n    UI--&gt;&gt;U: Fertige Komponente\n</code></pre>"},{"location":"de/architecture.html#sicherheit","title":"Sicherheit","text":"<p>Wichtig</p> <p>Alle Daten werden w\u00e4hrend der \u00dcbertragung und Speicherung verschl\u00fcsselt. TLS 1.3 wird f\u00fcr alle Verbindungen verwendet.</p> <p>Einschr\u00e4nkungen</p> <p>Speichern Sie keine Passw\u00f6rter im Klartext. Verwenden Sie das integrierte Authentifizierungssystem.</p>"},{"location":"de/architecture.html#leistung","title":"Leistung","text":"<ul> <li>Antwortzeit: &lt; 200ms f\u00fcr Standardoperationen</li> <li>Durchsatz: bis zu 10.000 Anfragen/Sek.</li> <li>Skalierbarkeit: horizontale Skalierung</li> <li>Verf\u00fcgbarkeit: 99,9% Betriebszeit</li> </ul>"},{"location":"de/architecture.html#uberwachung","title":"\u00dcberwachung","text":"Text Only<pre><code>graph LR\n    A[Anwendung] --&gt; B[Metriken]\n    B --&gt; C[Prometheus]\n    C --&gt; D[Grafana]\n    C --&gt; E[AlertManager]\n    E --&gt; F[Slack/E-Mail]\n\n    style A fill:#e3f2fd\n    style B fill:#f1f8e9\n    style C fill:#fff8e1\n    style D fill:#fce4ec\n</code></pre> Entwicklung starten Tutorials erkunden"},{"location":"de/forum.html","title":"Community-Forum","text":""},{"location":"de/forum.html#community-forum","title":"Community-Forum","text":"<p>Wir laden Sie ein, sich in unserem Forum zu registrieren, wo Sie Erfahrungen austauschen k\u00f6nnen</p> <p>Hier registrieren</p> <p></p> <p></p> <p></p>"},{"location":"de/forum.html#registrierungsschritte","title":"Registrierungsschritte","text":"<ol> <li> <p>Registrierung im Forum: Sie m\u00fcssen auf die Schaltfl\u00e4che \"Sign Up\" in der oberen rechten Ecke des Bildschirms klicken und dann Ihren Benutzernamen, Ihre E-Mail-Adresse und Ihr Passwort eingeben.    </p> </li> <li> <p>Kontobest\u00e4tigung: Nach der Registrierung m\u00fcssen Sie Ihr Konto best\u00e4tigen. Bitte beachten Sie, dass die Best\u00e4tigungs-E-Mail m\u00f6glicherweise im Ordner \"Spam\" landet.    </p> </li> <li> <p>Teilnahme an Diskussionen: Nach der Best\u00e4tigung k\u00f6nnen Sie Diskussionen zu verschiedenen Themen erstellen, auf andere Teilnehmer antworten und interagieren.</p> </li> </ol>"},{"location":"de/release-notes.html","title":"Versionshinweise","text":""},{"location":"de/release-notes.html#versionsbeschreibungen","title":"Versionsbeschreibungen","text":"<p>Die Aqtra-Plattform entwickelt sich st\u00e4ndig weiter!</p> <p>Neue Versionen werden normalerweise einmal im Monat ver\u00f6ffentlicht f\u00fcr:</p> Text Only<pre><code>- Kubernetes-Cluster\n- Docker-Mini-Image\n</code></pre> <p></p>"},{"location":"de/release-notes.html#version-013x","title":"Version 0.13.x","text":"<p>Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Neues Komponentenmodul: Innerhalb der Komponente wurde das Modul Web-Teile hinzugef\u00fcgt, das aus zwei Bl\u00f6cken besteht: \"Styles\" und \"JavaScript\". Dieses Modul \u00e4hnelt dem Modul \"Component Script\", aber anstatt mit Python zu interagieren, k\u00f6nnen Sie CSS-Stile im Block \"Styles\" beschreiben und in JavaScript im Block \"JavaScript\" interagieren;</li> <li>Einrichtung globaler Module in der Anwendungsdom\u00e4ne: Die Einrichtung globaler CSS- und JavaScript-Module wurde in den Haupteinstellungen der Anwendungsdom\u00e4ne hinzugef\u00fcgt. Weitere Einzelheiten hier;</li> <li>Neue Tools im Wartungsmen\u00fc: Eine Einstellung f\u00fcr den Abschnitt Dateispeicher wurde hinzugef\u00fcgt. Weitere Einzelheiten hier;</li> <li>Neue Objektmodelleinstellungen f\u00fcr Dateitypendaten: Jetzt k\u00f6nnen Sie die Validierung nach Dateityp und die Begrenzung der Dateigr\u00f6\u00dfe in Bytes festlegen;</li> <li>XSRF/CSRF-Unterst\u00fctzung: Die Datei-Upload-Komponente eliminiert jetzt die bin\u00e4re Daten\u00fcbertragung \u00fcber JS und f\u00fcgt XSRF-Senden hinzu. Anfragen zum Herunterladen von Dateien sind jetzt gezielt und direkter Zugriff auf file-storage ist ausgeschlossen. Verbesserungen wurden auch am work-place vorgenommen, um ein XSRF-Token beim Laden einer Seite zu erhalten, und der OData-Controller wurde verbessert, um Dateien zu laden. Das Senden von Anfragen von work-place zum Herunterladen von Dateien ist jetzt auch gezielt, und direkter Zugriff auf file-storage ist unm\u00f6glich.   </li> </ul> <p>Design aktualisiert</p> <ul> <li>Export/Import-Abschnitt: Das Design des Export/Import-Abschnitts des Anwendungen-Men\u00fcs wurde aktualisiert.   </li> </ul>"},{"location":"de/release-notes.html#version-012x","title":"Version 0.12.x","text":"<p>Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Benachrichtigung senden: Ein neuer Schritt im Datenfluss \"Send notification\" wurde hinzugef\u00fcgt. Dieser Schritt erm\u00f6glicht es Ihnen, einfache Benachrichtigungen an den Benutzer zu senden, was die Art und Weise, wie Sie \u00fcber das Benachrichtigungssystem mit dem Benutzer interagieren, verbessert. Weitere Einzelheiten hier: Send notification</li> <li>Pivot-Tabelle: Ein neues UI-Element \"Pivot Grid\" wurde zur Datenanalyse und -visualisierung hinzugef\u00fcgt. Weitere Einzelheiten hier: Pivot grid</li> <li>\u00c4nderungen an List view****:</li> <li>M\u00f6glichkeit, die Komponente horizontal oder vertikal zu erweitern.</li> <li>Die M\u00f6glichkeit, Drag &amp; Drop zu aktivieren, wurde f\u00fcr alle Gruppen einer Komponente oder nach Wahl hinzugef\u00fcgt.</li> <li>Die Aktivierungsfunktion wurde zu Events hinzugef\u00fcgt nach Verwendung von Drag &amp; Drop.</li> <li>\u00c4nderungen an Data grid****:</li> <li>Der Mehrfachauswahlmechanismus wurde ge\u00e4ndert. In den Data grid-Einstellungen gibt es jetzt eine Option \"Selection Mode\" mit einer Auswahl: <code>None</code>, <code>Single</code>, <code>Multiple</code>, <code>Checkbox</code>.</li> <li>Neue Ereignisse: <code>On Table Changed</code>, <code>On Header Changed</code>, <code>On Row Changed</code>, <code>On Cell Changed</code>.</li> <li>M\u00f6glichkeit, die Anzahl der Zeilen im Paginator an der Front auszuw\u00e4hlen.</li> <li>\u00c4nderungen in Chart View****:</li> <li>Die Farbschema-Einstellung wurde entfernt.</li> <li>Min/Max-Einstellungen wurden hinzugef\u00fcgt.</li> <li>SIP-Client-Integration:</li> <li>M\u00f6glichkeit, Anrufe von Workplace aus zu t\u00e4tigen dank SIP-Client-Integration. Weitere Einzelheiten hier.</li> <li>Platzhalterbilder f\u00fcr fehlende Bilder in den Einstellungen von Anwendungsdom\u00e4nen und dem UI-Element \"Image\": Weitere Einzelheiten in der Benutzeroberfl\u00e4chen-Dokumentation und Bildkomponente.</li> <li>Neue Methoden zur Verwaltung des Zustands von UI-Elementen. Weitere Einzelheiten in Dokumentation.</li> <li>Massen-Upload von Bildern \u00fcber http.client und Dateispeicher in Dataflow-Skripten: Eine Funktion f\u00fcr den Massen-Upload von Bildern wurde hinzugef\u00fcgt. Weitere Einzelheiten in Dokumentation.</li> <li>Optimierung des Ver\u00f6ffentlichungsmechanismus: Der Ver\u00f6ffentlichungsmechanismus wurde mit einer Zustandsmaschine verbessert, die einen stabilen Prozess mit der M\u00f6glichkeit zum Rollback bei Fehlern bietet. Weitere Einzelheiten in Dokumentation.</li> </ul> <p></p>"},{"location":"de/release-notes.html#version-010x","title":"Version 0.10.x","text":"<p>Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Ein neuer Dataflow-Schritt \"Get file info\" wurde erstellt, mit dem Sie Informationen \u00fcber eine Datei anhand ihrer Kennung erhalten k\u00f6nnen. Weitere Einzelheiten in der Dokumentation: Get file info</li> <li>Ein Filter f\u00fcr das Feld \"Component\" innerhalb des Dataflow-Schritts \"Get entity by id\" wurde hinzugef\u00fcgt. Weitere Einzelheiten hier: Get entity by id </li> </ul> <p>Design-Update</p> <ul> <li>\"Dashboard\" Hauptseite. Weitere Einzelheiten hier: Dashboard</li> <li>\"Navigation menu\" wurde aus dem Men\u00fc \"Applications\" entfernt und befindet sich jetzt auf der Hauptseite. Weitere Einzelheiten hier: Navigation menu</li> <li>Das Design der Dataflow-Schritte wurde aktualisiert. Weitere Einzelheiten hier: Available Dataflow steps</li> <li>Das Design von \"File storage\" wurde aktualisiert. Weitere Einzelheiten hier: File storage</li> <li>Das Design von \"System maintenance\" wurde aktualisiert. Weitere Einzelheiten hier: System maintenance </li> </ul>"},{"location":"de/release-notes.html#version-09x","title":"Version 0.9.x","text":"<p>Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Systemspezifische (Plattformspezifische) Funktionen</li> <li>Laden der Benutzeroberfl\u00e4che: Optimierung der Kompilierung von UI-Komponenten.</li> <li>Refactoring des Wartungsmen\u00fcs. Verschieben von Steuerelementen auf die Registerkarte \"System maintenance\" und Anzeige von Protokollen mit ihren Einstellungen auf der Registerkarte \"System logs\".</li> <li>Job-Queue-Speichergenerator in Redis.</li> <li>IronPython wurde von Version 2.7.12 auf 3.4.1 am Workplace aktualisiert.</li> <li>Benutzerspezifische (Studio-spezifische) Funktionen - Kopieren/Einf\u00fcgen von Elementen im Interface Builder auf der Komponentenseite. - Hinzuf\u00fcgen von Dateien zum Stammverzeichnis des Dateispeichers. - M\u00f6glichkeit, das Datenmodell der Referenzkomponenten (Catalog) in der Komponentenelementleiste f\u00fcr: <code>DataGrid</code>, <code>ListView</code>, <code>TreeView</code> zu verwenden.   </li> </ul> <p>Schnittstellen\u00e4nderungen</p> <ul> <li>Refactoring des Studio-Hauptmen\u00fcs:</li> <li>Verschieben der folgenden Elemente in die rechte Ecke der oberen Men\u00fcleiste: Lokalisierungsschalter und Schaltfl\u00e4che zum Abmelden vom aktuellen Konto (Logout),</li> <li>das Men\u00fcelement Profil wurde entfernt.</li> <li>Das Symbol f\u00fcr das Men\u00fcelement Python Modules wurde neu gestaltet.</li> <li>Online-Hilfesymbole wurden in vielen Abschnitten des Studios hinzugef\u00fcgt: Dataflow-Schritte, Schaltfl\u00e4chen f\u00fcr Benutzeroberfl\u00e4chenelemente (Toolbox UI), Hauptanwendungsparameter sowie an vielen anderen Stellen im Studio, um einen schnelleren Zugriff auf die Online-Hilfe auf der Dokumentationswebsite zu gew\u00e4hrleisten. </li> </ul> <p>Wichtige behobene Fehler</p> <ul> <li>Korrektur des Betriebs des <code>Cron</code>-Aufgabenplaners w\u00e4hrend des Imports/Exports von Komponenten.</li> <li>Beseitigung des <code>changeAuthor</code>-Duplikats aus dem Komponentendatenmodell.</li> <li>Stabilisierung der Workflow-Schrittauswahl.</li> <li>Korrektur des UI-Elements <code>Number</code> aus dem Komponentenelementpanel.</li> <li>Beheben des Betriebs des On focus-Ereignisses f\u00fcr einige der UI-Elemente: Day, Time, Signature.   </li> </ul>"},{"location":"de/release-notes.html#version-08x","title":"Version 0.8.x","text":"<p>Wichtige und verbesserte Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Im Dataflow Form Action-Schritt wurden die Parameter Open Sidebar und Open Modal hinzugef\u00fcgt, die es erm\u00f6glichen, eine Seitenleiste bzw. ein modales Fenster zu \u00f6ffnen, \u00e4hnlich wie dies \u00fcber ein Python-Skript erfolgen kann.</li> <li>\u00dcbertragung der erforderlichen Attribute f\u00fcr Parameter, die im Get Action Model-Schritt \u00fcbertragen werden.</li> <li>Der Dataflow-Schritt \"Remove assigned roles for user\" wurde hinzugef\u00fcgt, der alle aktuell dem Benutzer zugewiesenen Rollen entfernt und es erm\u00f6glicht, einen neuen Satz von Rollen von Grund auf neu zu erstellen.</li> <li>Das Men\u00fc Python modules wurde hinzugef\u00fcgt, um die gemeinsame Bibliothek von Python-Modulen zu verwalten.</li> <li>Die Hintergrundeinstellung f\u00fcr UI-Steuerelemente wurde hinzugef\u00fcgt, die es erm\u00f6glicht, ein Bild in Standardformaten (z. B. png, svg, jpeg usw.) als Hintergrund f\u00fcr alle Steuerelemente festzulegen, die einen Abschnitt Brush-Einstellungen haben.</li> <li>Das Datenmodell-Ansichtssymbol im Dataflow-Schritt wurde in das Augensymbol ge\u00e4ndert.</li> <li>Der Parameter \"Skip from Synchronize\" wurde durch Virtual Property ersetzt. Felder, die als \"Virtual Property\" markiert sind, werden nicht in der Datenbank gespeichert, wenn die Komponente aufgezeichnet wird.</li> <li>Einstellungen f\u00fcr Power Web Application (PWA) im Abschnitt Edit manifest wurden hinzugef\u00fcgt.</li> <li>Zus\u00e4tzliche Einstellungen f\u00fcr Anwendungsdom\u00e4nen wurden hinzugef\u00fcgt - show breadcrumps, login, locale.   </li> </ul> <p>Wichtige behobene Fehler</p> <ul> <li>Die Arbeit dynamischer Filter f\u00fcr Data Grid-Steuerung wurde behoben.</li> <li>Das Feld \"First line to ignore field\" im Schritt Import File wird nach dem Speichern nicht auf 0 zur\u00fcckgesetzt.</li> <li>Die Standardfarbe f\u00fcr die Anwendungsdom\u00e4ne gilt f\u00fcr Steuerelemente des Schaltfl\u00e4chentyps, f\u00fcr die keine Standardfarbe festgelegt ist.</li> <li>Berechtigungen f\u00fcr eine Mehrkomponentenkomponente werden im eingeschr\u00e4nkten Zugriffsmodus nicht festgelegt.   </li> </ul>"},{"location":"de/release-notes.html#version-070","title":"Version 0.7.0","text":"<p>Wichtige und verbesserte Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Bei der Auswahl einer Standardkomponente f\u00fcr eine Anwendungsdom\u00e4ne im Abschnitt Haupteinstellungen k\u00f6nnen Sie die Seite ausw\u00e4hlen, die f\u00fcr diese Komponente im Feld Standardseite ge\u00f6ffnet wird. Wenn keine Seite ausgew\u00e4hlt ist, wird standardm\u00e4\u00dfig die erste Seite der Komponente (Hauptseite) ge\u00f6ffnet.</li> <li>Ein neuer Schritt \"Execute Dataflow\" wurde zum Dataflow hinzugef\u00fcgt, mit dem Sie neue Dataflows starten k\u00f6nnen, einschlie\u00dflich Dataflows aus anderen Komponenten, innerhalb des aktuellen Dataflows.</li> <li>Der veraltete Dataflow-Schritt \"Get Audience\" wurde entfernt, und der Schritt \"Form Action\" wurde in die Gruppe \"Model Transformation\" verschoben. Die Gruppe \"Other\" wurde vollst\u00e4ndig entfernt.</li> <li>Eine Suche zur Konfiguration von \"Field mapping\" wurde f\u00fcr den Schritt \"Apply Deferred update operations\" hinzugef\u00fcgt.</li> <li>F\u00fcr das UI-Steuerelement Text Area wurde eine Auto-size-Option hinzugef\u00fcgt, die es erm\u00f6glicht, die Gr\u00f6\u00dfe des Felds zu erweitern, wenn Sie eine gr\u00f6\u00dfere Textmenge eingeben m\u00fcssen.</li> <li>Der Dataflow-Schritt \"Query Entity by Filter\" wurde \u00fcber die automatische Erstellung von Indizes und Datenbanknormalisierung optimiert.</li> <li>Eine Benachrichtigung \u00fcber den bevorstehenden Ablauf der Lizenz wurde hinzugef\u00fcgt. Die Nachricht erscheint 10 Tage vor dem Ablaufdatum der aktuellen Lizenz.</li> <li>F\u00fcr Dataflow generierte Swagger-APIs zeigen jetzt den Dataflow-Namen als API-Namen an.</li> <li>Die M\u00f6glichkeit, die Geolokalisierung des Benutzers \u00fcber die Funktion context.PlatformServices.GeolocationPosition vom Component Script aus anzufordern, wurde hinzugef\u00fcgt.</li> <li>Die M\u00f6glichkeit, die Standardeinstellung f\u00fcr die Gebietsschema-Einstellung f\u00fcr die Anwendungsdom\u00e4ne festzulegen, wurde im Abschnitt Haupteinstellungen hinzugef\u00fcgt.</li> <li>Die M\u00f6glichkeit, ein Favicon f\u00fcr die Anwendungsdom\u00e4ne festzulegen, wurde in den Einstellungen des Home Menu: Domain: Main Settings hinzugef\u00fcgt.   </li> </ul> <p>Wichtige behobene Fehler</p> <ul> <li>Die Arbeit dynamischer Filter f\u00fcr Data Grid-Steuerung wurde behoben.</li> <li>Ein Problem, bei dem ein Fehler beim Sortieren von Feldern aufgetreten ist, die aus Catalog-Typ-Links abgerufen wurden, wurde behoben.</li> <li>Die Stabilit\u00e4t des Data Grid, einschlie\u00dflich Phantomfehlern beim Navigieren durch das Data Grid, wurde verbessert.</li> <li>Ein Problem mit dem Suchformular, das im Data Grid abgeschnitten wurde, wenn auf einen Filter geklickt wurde, wurde behoben.</li> <li>Die Ausgabe von Zeichenfolgenwerten f\u00fcr Enum wurde hinzugef\u00fcgt.</li> <li>Falscher Systembetrieb mit Remote-Logout wurde behoben.</li> <li>Falscher Betrieb des Timers im Schritt \"Apply deferred update operations\" wurde behoben.</li> <li>F\u00fcr UI-Steuerelemente vom Typ Label, die an ein Feld vom Typ Catalog gebunden sind, wird die Farbeinstellung jetzt korrekt verarbeitet.   </li> </ul>"},{"location":"de/release-notes.html#version-06x","title":"Version 0.6.x","text":"<p>Wichtige und verbesserte Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Erweiterte Funktionen zur Verwaltung des Hauptanwendungsmen\u00fcs - Aufbau hierarchischer Men\u00fcs und Festlegen von Men\u00fcsymbolen.</li> <li>Verbesserte Arbeit mit Python-Skripten - Hervorhebung f\u00fcr Python-Syntax, Auto-Complete f\u00fcr Python-Systemmethoden sowie Auto-Complete und Tipps f\u00fcr Methoden integrierter Plattformbibliotheken wurden hinzugef\u00fcgt (verf\u00fcgbar \u00fcber Ctrl-Space unter Win10/11 und Option-Space unter MacOS).</li> <li>Die M\u00f6glichkeit, zus\u00e4tzliche Seitenleistenfenster \u00fcber Component Script zu erstellen, wurde hinzugef\u00fcgt.</li> <li>Die M\u00f6glichkeit, komplexe modale Fenster \u00fcber Component Script mit Daten\u00fcbertragung von modalen Fenstern zum aufrufenden Skript zu erstellen, wurde hinzugef\u00fcgt.</li> <li>Der Component Script-Aufruf wurde in das Hauptmen\u00fc verschoben.</li> <li>Die Lokalisierung des Studios ins Russische wurde abgeschlossen.</li> <li>Im DataGrid-Steuerelement ist es jetzt m\u00f6glich, beliebige Felder einer externen Komponente auszuw\u00e4hlen, wenn Referenzfelder vom Typ Catalog angezeigt werden.</li> <li>Import-Export umfasst jetzt den Export und den anschlie\u00dfenden Import von Berechtigungen und Rollen (das Exportieren von Dateien, die mit Version 0.6.x erstellt wurden, in fr\u00fchere Versionen funktioniert, importiert jedoch keine enthaltenen Rollen und Berechtigungen).</li> <li>Import-Export pr\u00fcft jetzt auf verwandte Komponenten und warnt den Benutzer, wenn verwandte Komponenten nicht in die Exportliste aufgenommen wurden.</li> <li>Auf Plattformebene wurde die M\u00f6glichkeit hinzugef\u00fcgt, Eintr\u00e4ge (Komponenteninstanzen) als f\u00fcr physisches L\u00f6schen verf\u00fcgbar zu markieren \u00fcber ein Flag im Dataflow-Schritt \"Update Entry\".</li> <li>Die M\u00f6glichkeit f\u00fcr den Studio-Administrator, eine Liste von Eintr\u00e4gen zu erhalten, die zum L\u00f6schen markiert sind, und diejenigen zu entfernen, die keine Verkn\u00fcpfungen zu Eintr\u00e4gen haben, die nicht f\u00fcr das L\u00f6schen bereit sind, wurde hinzugef\u00fcgt.   </li> </ul>"},{"location":"de/release-notes.html#version-0524","title":"Version 0.5.24","text":"<p>Wichtige und verbesserte Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Erweiterte Funktionen f\u00fcr dynamische und statische Filter in erweiterten Steuerelementen wie Data Grid, List View, Tree View, die eine On-the-Fly-Filterung von Daten vor der Anzeige f\u00fcr den Benutzer erm\u00f6glichen (Parameter wurden f\u00fcr Filter vom Typ contains usw. hinzugef\u00fcgt).</li> <li>Erweiterung des Konzepts der Verwendung von Dataflow &amp; Workflow - beide k\u00f6nnen jetzt getrennt von UI-Steuerelementen wie Schaltfl\u00e4chen erstellt und verwendet werden, was eine flexiblere Anwendungsstruktur erm\u00f6glicht und die Entwicklung vereinfacht.</li> <li>Viele neue Methoden, die \u00fcber Python verwenden im Component Script verf\u00fcgbar sind, wurden hinzugef\u00fcgt, wie z. B. das Aufrufen modaler Fenster, das \u00dcberpr\u00fcfen der Bildschirmaufl\u00f6sung und des Ger\u00e4tetyps, um ein responsives UI-Layout zu erstellen.</li> <li>Die M\u00f6glichkeit, mit Nachrichtenwarteschlangensystemen (z. B. RabbitMQ) aus dem Dataflow mit einem neuen Schritt Subscribe to Connector zu arbeiten, wurde hinzugef\u00fcgt.</li> <li>Die M\u00f6glichkeit zur Stapelverarbeitung von Daten im Dataflow \u00fcber neue Schritte Deferred Update Entry &amp; Apply Deferred Update Operations wurde hinzugef\u00fcgt.   </li> </ul>"},{"location":"de/release-notes.html#version-044","title":"Version 0.4.4","text":"<p>Wichtige und verbesserte Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Ein neues Systemspeicherfeld \"Name\" wurde hinzugef\u00fcgt, das verwendet wird, um Elemente aus Catalogs anzuzeigen.</li> <li>Beim Anzeigen eines einzelnen Elements aus Catalog (z. B. unter Verwendung eines UI-Steuerelements Select, das auf Catalog verweist), wird jetzt immer der Inhalt des Namensfelds angezeigt. Wenn das Namensfeld leer ist, wird der System-Catalog-Name/die Sequenznummer des Catalog-Eintrags angezeigt.</li> <li>Standardsortierungseinstellungen f\u00fcr Datagrid und Listview wurden hinzugef\u00fcgt.</li> <li>Automatische Ersetzung von Unicode-Sonderzeichen im Component Script zur Linkgenerierung wurde hinzugef\u00fcgt.   </li> </ul> <p>Fehler behoben</p> <ul> <li>Falscher Betrieb des Paginators in Bezug auf das Umschalten mehrerer Tabellen auf einer Seite wurde behoben.</li> <li>Nicht funktionierende Scrolling-Funktion in einigen Teilen des Studios wurde behoben.   </li> </ul>"},{"location":"de/release-notes.html#version-03223","title":"Version 0.3.223","text":"<p>Kubernetes-Cluster 0.3.223 | Docker-Mini-Image 0.2.118</p> <p>Wichtige und verbesserte Funktionalit\u00e4t hinzugef\u00fcgt</p> <ul> <li>Ein neuer Data-Flow-Schritt \"Send templated notification\" wurde hinzugef\u00fcgt, mit dem Sie eine Benachrichtigung per E-Mail unter Verwendung einer angegebenen Vorlage senden k\u00f6nnen.</li> <li>Transparenzeigenschaft f\u00fcr UI-Komponenten.</li> <li>Unterst\u00fctzung f\u00fcr OAuth2-Autorisierung f\u00fcr HTTP-Anfragen wurde hinzugef\u00fcgt. Sie k\u00f6nnen jetzt die automatische Token-Generierung \u00fcber OAuth konfigurieren, um eine Verbindung zur API herzustellen.</li> <li>Der Parameter \"Store response as file\" wurde im Schritt \"Execute API call\" hinzugef\u00fcgt, um es zu erm\u00f6glichen, eine Datei \u00fcber die API auf Anfrage herunterzuladen.</li> <li>Die Schritte generieren keinen Newsletter mehr, sie generieren jetzt ein Feld im Modell zur sp\u00e4teren Verwendung, wie z. B. \"Send templated notification\".   </li> </ul> <p>Fehler behoben</p> <ul> <li>Fehler beim Arbeiten mit dem Datetime-Typ im Kalender wurden behoben.</li> <li>Die Benutzeroberfl\u00e4che im Studio und Workplace wurde behoben.</li> <li>Der Disabled-Zustand f\u00fcr die Radiobutton-UI-Komponente wurde behoben.</li> <li>Lokalisierungsfehler wurden behoben.</li> <li>Die Suche im Dropdown ist jetzt nicht mehr case-sensitive.</li> <li>Die Autorisierungsoperation einschlie\u00dflich Log-out-Problemen wurde behoben. </li> </ul>"},{"location":"de/app-development/index.html#development-of-applications","title":"Development of Applications","text":"<p>This section covers all aspects of building applications on the Aqtra platform:</p> <ul> <li>Component - Create and configure application components</li> <li>UI Components - Visual interface elements library</li> <li>Dataflow - Data processing and transformation flows</li> <li>Workflow - Business process automation</li> <li>Using Python - Python scripting in your applications</li> <li>Publications - Deploy and publish your applications</li> </ul> <p>Vollst\u00e4ndiger deutscher Inhalt folgt...</p>"},{"location":"de/app-development/component.html","title":"Komponente","text":""},{"location":"de/app-development/component.html#creating-a-new-component","title":"Creating a New Component","text":"<ol> <li>Open Studio ('https:///studio').</li> </ol> <p>Vollst\u00e4ndiger deutscher Inhalt folgt...</p>"},{"location":"de/app-development/publishing-applications.html","title":"Ver\u00f6ffentlichungen","text":""},{"location":"de/app-development/publishing-applications.html#publications","title":"Publications","text":"<p>To create a component version, localization, extension, or other appropriate customization via the platform, you must publish it. And in order for a component version to be published, it must be marked as ready to publish. </p> <p>The publishing process is controlled through the state machine, which allows you to effectively control all stages and, in case of errors, return the system to the previous state. A global lock feature has been introduced to prevent multiple publications from being started at the same time. Users see the status of active publications, and after each publication is completed, the statuses of the objects that are ready to be published are updated automatically.</p> <p>Steps to publish a component:</p> <ul> <li>\u201cSave\u201d button: Used to save the current changes to the component.</li> <li>\u201cReady to Publish\u201d: Marks a component as ready to publish after all changes have been saved.</li> </ul> <p>Steps for publishing localizations and integrations: - Automatically become available for publishing after you make changes.</p> <p>Publishing Process: 1. Go to Publications: Located in \u2018Studio\u2192Applications\u2192Publication.\u2019 2. Selecting Items to Publish:     - Components, localizations, integrations, and Python modules are selected to be published. 3. Final publication:     - The procedure is completed by clicking the publish button.    - A notification appears when the publication is successful.</p> <p>Vollst\u00e4ndiger deutscher Inhalt folgt...</p>"},{"location":"de/app-development/using-python.html","title":"Python verwenden","text":""},{"location":"de/app-development/using-python.html#adding-a-new-module","title":"Adding a New Module","text":"<p>When you click on the Add button, the window for adding a new module opens.</p>"},{"location":"de/app-development/data-flow-components/index.html#dataflow","title":"Dataflow","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/apply-deferred-update-operations.html","title":"Verz\u00f6gerte Aktualisierungsvorg\u00e4nge anwenden","text":""},{"location":"de/app-development/data-flow-components/apply-deferred-update-operations.html#apply-deferred-update-operations","title":"Apply deferred update operations","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/assign-context-role-for-model.html","title":"Kontextrolle f\u00fcr Modell zuweisen","text":""},{"location":"de/app-development/data-flow-components/assign-context-role-for-model.html#assign-context-role-for-model","title":"Assign context role for model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/calculate-array.html","title":"Array berechnen","text":""},{"location":"de/app-development/data-flow-components/calculate-array.html#calculate-array","title":"Calculate array","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/confirm-one-time-code-for-user.html","title":"Einmalcode f\u00fcr Benutzer best\u00e4tigen","text":""},{"location":"de/app-development/data-flow-components/confirm-one-time-code-for-user.html#confirm-one-time-code-for-user","title":"Confirm one-time code for user","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/confirm-user-email-request.html","title":"Benutzer-E-Mail-Best\u00e4tigungsanfrage","text":""},{"location":"de/app-development/data-flow-components/confirm-user-email-request.html#confirm-user-email-request","title":"Confirm user email request","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/deferred-update-entry.html","title":"Verz\u00f6gerten Eintrag aktualisieren","text":""},{"location":"de/app-development/data-flow-components/deferred-update-entry.html#deferred-update-entry","title":"Deferred update entry","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/distinct.html","title":"Eindeutig","text":""},{"location":"de/app-development/data-flow-components/distinct.html#distinct","title":"Distinct","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/execute-api-call.html","title":"API-Aufruf ausf\u00fchren","text":""},{"location":"de/app-development/data-flow-components/execute-api-call.html#execute-api-call","title":"Execute API call","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/execute-dataflow.html","title":"Datenfluss ausf\u00fchren","text":""},{"location":"de/app-development/data-flow-components/execute-dataflow.html#execute-dataflow","title":"Execute dataflow","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/execute-script.html","title":"Skript ausf\u00fchren","text":""},{"location":"de/app-development/data-flow-components/execute-script.html#execute-script","title":"Execute script","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/execute-workflow.html","title":"Workflow ausf\u00fchren","text":""},{"location":"de/app-development/data-flow-components/execute-workflow.html#execute-workflow","title":"Execute Workflow","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/export-to-file.html","title":"In Datei exportieren","text":""},{"location":"de/app-development/data-flow-components/export-to-file.html#export-to-file","title":"Export to File","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/extract-collections.html","title":"Sammlung extrahieren","text":""},{"location":"de/app-development/data-flow-components/extract-collections.html#extract-collection","title":"Extract collection","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/filter-source.html","title":"Quelle filtern","text":""},{"location":"de/app-development/data-flow-components/filter-source.html#filter-source","title":"Filter source","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/form-action.html","title":"Formularaktion","text":""},{"location":"de/app-development/data-flow-components/form-action.html#form-action","title":"Form action","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-action-model.html","title":"Aktionsmodell abrufen","text":""},{"location":"de/app-development/data-flow-components/get-action-model.html#get-action-model","title":"Get Action Model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-empty-model.html","title":"Leeres Modell abrufen","text":""},{"location":"de/app-development/data-flow-components/get-empty-model.html#get-empty-model","title":"Get Empty Model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-entity-by-id.html","title":"Entit\u00e4t nach ID abrufen","text":""},{"location":"de/app-development/data-flow-components/get-entity-by-id.html#get-entity-by-id","title":"Get entity by id","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-file-info.html","title":"Dateiinfo abrufen","text":""},{"location":"de/app-development/data-flow-components/get-file-info.html#get-file-info","title":"Get file info","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-one-time-code-for-user.html","title":"Einmalcode f\u00fcr Benutzer abrufen","text":""},{"location":"de/app-development/data-flow-components/get-one-time-code-for-user.html#get-one-time-code-for-user","title":"Get one-time code for user","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-raw-model.html","title":"Rohmodell abrufen","text":""},{"location":"de/app-development/data-flow-components/get-raw-model.html#get-raw-model","title":"Get raw model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-user-info.html","title":"Benutzerinfo abrufen","text":""},{"location":"de/app-development/data-flow-components/get-user-info.html#get-user-info","title":"Get user info","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-values-from-connector.html","title":"Werte vom Connector abrufen","text":""},{"location":"de/app-development/data-flow-components/get-values-from-connector.html#get-values-from-connector","title":"Get values from connector","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/get-workflow-model.html","title":"Workflow-Modell abrufen","text":""},{"location":"de/app-development/data-flow-components/get-workflow-model.html#get-workflow-model","title":"Get workflow model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/group-by.html","title":"Gruppieren nach","text":""},{"location":"de/app-development/data-flow-components/group-by.html#group-by","title":"Group By","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/import-file.html","title":"Datei importieren","text":""},{"location":"de/app-development/data-flow-components/import-file.html#import-file","title":"Import file","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/input-steps.html","title":"Eingabeschritte","text":""},{"location":"de/app-development/data-flow-components/input-steps.html#input-groupseparator","title":"INPUT GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/join-modes.html","title":"Modelle verbinden","text":""},{"location":"de/app-development/data-flow-components/join-modes.html#join-models","title":"Join models","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/load-catalogs-by-key.html","title":"Kataloge nach Schl\u00fcssel laden","text":""},{"location":"de/app-development/data-flow-components/load-catalogs-by-key.html#load-catalogs-by-key","title":"Load catalogs by key","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/login-with-password.html","title":"Mit Passwort anmelden","text":""},{"location":"de/app-development/data-flow-components/login-with-password.html#login-with-password","title":"Login with password","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/lookup-reference.html","title":"Referenz nachschlagen","text":""},{"location":"de/app-development/data-flow-components/lookup-reference.html#lookup-reference","title":"Lookup reference","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/model-transformation-steps.html","title":"Modelltransformationsschritte","text":""},{"location":"de/app-development/data-flow-components/model-transformation-steps.html#model-transformation-groupseparator","title":"MODEL TRANSFORMATION GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/output-steps.html","title":"Ausgabeschritte","text":""},{"location":"de/app-development/data-flow-components/output-steps.html#output-groupseparator","title":"OUTPUT GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/prepare-external-keys.html","title":"Externe Schl\u00fcssel vorbereiten","text":""},{"location":"de/app-development/data-flow-components/prepare-external-keys.html#prepare-external-keys","title":"Prepare external keys","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/proxy-get-entry.html","title":"Proxy-Eintrag abrufen","text":""},{"location":"de/app-development/data-flow-components/proxy-get-entry.html#proxy-get-entry","title":"Proxy get entry","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/proxy-query-entry.html","title":"Proxy-Abfrage-Eintrag","text":""},{"location":"de/app-development/data-flow-components/proxy-query-entry.html#proxy-query-entry","title":"Proxy query entry","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/query-entity-by-filter.html","title":"Entit\u00e4t nach Filter abfragen","text":""},{"location":"de/app-development/data-flow-components/query-entity-by-filter.html#query-entity-by-filter","title":"Query entity by filter","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/register-context-for-model.html","title":"Kontext f\u00fcr Modell registrieren","text":""},{"location":"de/app-development/data-flow-components/register-context-for-model.html#register-context-for-model","title":"Register context for model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/register-external-user.html","title":"Externen Benutzer registrieren","text":""},{"location":"de/app-development/data-flow-components/register-external-user.html#register-external-user","title":"Register external user","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/remove-assigned-roles-for-user.html","title":"Zugewiesene Rollen f\u00fcr Benutzer entfernen","text":""},{"location":"de/app-development/data-flow-components/remove-assigned-roles-for-user.html#remove-assigned-roles-for-user","title":"Remove assigned roles for user","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/render-template.html","title":"Vorlage rendern","text":""},{"location":"de/app-development/data-flow-components/render-template.html#render-template","title":"Render template","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/reset-user-password-request.html","title":"Benutzerpasswort-Zur\u00fccksetzungsanfrage","text":""},{"location":"de/app-development/data-flow-components/reset-user-password-request.html#reset-user-password-request","title":"Reset user password request","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/select-many.html","title":"Mehrere ausw\u00e4hlen","text":""},{"location":"de/app-development/data-flow-components/select-many.html#select-many","title":"Select many","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/send-notification.html","title":"Benachrichtigung senden","text":""},{"location":"de/app-development/data-flow-components/send-notification.html#send-notification","title":"Send notification","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/send-templated-notification.html","title":"Vorlagenbenachrichtigung senden","text":""},{"location":"de/app-development/data-flow-components/send-templated-notification.html#send-templated-notification","title":"Send templated notification","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/simple-math.html","title":"Einfache Mathematik","text":""},{"location":"de/app-development/data-flow-components/simple-math.html#simple-math","title":"Simple math","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/store-entry-over-bus.html","title":"Eintrag \u00fcber Bus speichern","text":""},{"location":"de/app-development/data-flow-components/store-entry-over-bus.html#store-entry-over-bus","title":"Store entry over bus","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/subscribe-to-connector.html","title":"Connector abonnieren","text":""},{"location":"de/app-development/data-flow-components/subscribe-to-connector.html#subscribe-to-connector","title":"Subscribe to connector","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/transform-model.html","title":"Modell transformieren","text":""},{"location":"de/app-development/data-flow-components/transform-model.html#transform-model","title":"Transform model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/update-entry.html","title":"Eintrag aktualisieren","text":""},{"location":"de/app-development/data-flow-components/update-entry.html#update-entry","title":"Update entry","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/update-or-create-user-info.html","title":"Benutzerinfo aktualisieren oder erstellen","text":""},{"location":"de/app-development/data-flow-components/update-or-create-user-info.html#update-or-create-user-info","title":"Update or create user info","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/user-contexts-steps.html","title":"Benutzerkontextschritte","text":""},{"location":"de/app-development/data-flow-components/user-contexts-steps.html#user-contexts-groupseparator","title":"\"USER CONTEXTS\" GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/data-flow-components/write-response.html","title":"Antwort schreiben","text":""},{"location":"de/app-development/data-flow-components/write-response.html#write-response","title":"Write response","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/index.html#ui-components","title":"UI Components","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/advanced.html","title":"Erweitert","text":""},{"location":"de/app-development/ui-components/advanced.html#advanced","title":"Advanced","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/basic.html","title":"Grundlegend","text":""},{"location":"de/app-development/ui-components/basic.html#basic","title":"Basic","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/button.html","title":"Schaltfl\u00e4che","text":""},{"location":"de/app-development/ui-components/button.html#button","title":"Button","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/charts.html","title":"Diagramme","text":""},{"location":"de/app-development/ui-components/charts.html#charts","title":"Charts","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/checkbox.html","title":"Kontrollk\u00e4stchen","text":""},{"location":"de/app-development/ui-components/checkbox.html#checkbox","title":"Checkbox","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/code-editor.html","title":"Code-Editor","text":""},{"location":"de/app-development/ui-components/code-editor.html#code-editor","title":"Code Editor","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/confirmation-state.html","title":"Best\u00e4tigungsstatus","text":""},{"location":"de/app-development/ui-components/confirmation-state.html#confirmation-state","title":"Confirmation State","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/data-grid.html","title":"Datengitter","text":""},{"location":"de/app-development/ui-components/data-grid.html#data-grid","title":"Data Grid","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/date-time.html","title":"Datum und Uhrzeit","text":""},{"location":"de/app-development/ui-components/date-time.html#date-time","title":"Date / Time","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/day.html","title":"Tag","text":""},{"location":"de/app-development/ui-components/day.html#day","title":"Day","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/file.html","title":"Datei","text":""},{"location":"de/app-development/ui-components/file.html#file","title":"File","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/flows.html","title":"Fl\u00fcsse","text":""},{"location":"de/app-development/ui-components/flows.html#toolbox-flows-tab","title":"Toolbox Flows tab","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/grid.html","title":"Raster","text":""},{"location":"de/app-development/ui-components/grid.html#grid","title":"Grid","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/html.html#html","title":"HTML","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/hyperlink.html#hyperlink","title":"Hyperlink","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/image.html","title":"Bild","text":""},{"location":"de/app-development/ui-components/image.html#image","title":"Image","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/label.html","title":"Beschriftung","text":""},{"location":"de/app-development/ui-components/label.html#label","title":"Label","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/layout.html#layout","title":"Layout","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/list-view.html","title":"Listenansicht","text":""},{"location":"de/app-development/ui-components/list-view.html#list-view","title":"List view","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/multiselect.html","title":"Mehrfachauswahl","text":""},{"location":"de/app-development/ui-components/multiselect.html#multiselect","title":"Multiselect","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/number.html","title":"Nummer","text":""},{"location":"de/app-development/ui-components/number.html#number","title":"Number","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/page.html","title":"Seite","text":""},{"location":"de/app-development/ui-components/page.html#page","title":"Page","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/panel.html#panel","title":"Panel","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/password.html","title":"Passwort","text":""},{"location":"de/app-development/ui-components/password.html#password","title":"Password","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/pdf-viewer.html","title":"PDF-Viewer","text":""},{"location":"de/app-development/ui-components/pdf-viewer.html#pdf-viewer","title":"Pdf viewer","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/phone-number.html","title":"Telefonnummer","text":""},{"location":"de/app-development/ui-components/phone-number.html#phone-number","title":"Phone Number","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/pivot-grid.html","title":"Pivot-Tabelle","text":""},{"location":"de/app-development/ui-components/pivot-grid.html#pivot-grid","title":"Pivot grid","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/progress-bar.html","title":"Fortschrittsbalken","text":""},{"location":"de/app-development/ui-components/progress-bar.html#progress-bar","title":"Progress Bar","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/radio-button.html","title":"Optionsfeld","text":""},{"location":"de/app-development/ui-components/radio-button.html#radio-button","title":"Radio button","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/select.html","title":"Ausw\u00e4hlen","text":""},{"location":"de/app-development/ui-components/select.html#select","title":"Select","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/signature.html","title":"Unterschrift","text":""},{"location":"de/app-development/ui-components/signature.html#signature","title":"Signature","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/slider.html","title":"Schieberegler","text":""},{"location":"de/app-development/ui-components/slider.html#slider","title":"Slider","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/svg.html#svg","title":"SVG","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/switch.html","title":"Schalter","text":""},{"location":"de/app-development/ui-components/switch.html#switch","title":"Switch","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/tab-control.html","title":"Registerkarten-Steuerung","text":""},{"location":"de/app-development/ui-components/tab-control.html#tab-control","title":"Tab Control","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/text-area.html","title":"Textbereich","text":""},{"location":"de/app-development/ui-components/text-area.html#text-area","title":"Text area","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/text-field.html","title":"Textfeld","text":""},{"location":"de/app-development/ui-components/text-field.html#text-field","title":"Text Field","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/time.html","title":"Zeit","text":""},{"location":"de/app-development/ui-components/time.html#time","title":"Time","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/tree-view.html","title":"Baumansicht","text":""},{"location":"de/app-development/ui-components/tree-view.html#tree-view","title":"Tree View","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/ui-components/wysiwyg-editor.html","title":"WYSIWYG-Editor","text":""},{"location":"de/app-development/ui-components/wysiwyg-editor.html#wysiwyg-editor","title":"WYSIWYG editor","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/index.html#workflow","title":"Workflow","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/common-steps.html","title":"Allgemeine Schritte","text":""},{"location":"de/app-development/workflow-components/common-steps.html#common-groupseparator","title":"\u201cCOMMON\u201d GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/conditions-steps.html","title":"Bedingungsschritte","text":""},{"location":"de/app-development/workflow-components/conditions-steps.html#conditions-groupseparator","title":"\u201cCONDITIONS\u201d GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/execute-data-flow.html","title":"Datenfluss ausf\u00fchren","text":""},{"location":"de/app-development/workflow-components/execute-data-flow.html#execute-dataflow","title":"Execute dataflow","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/finish.html","title":"Beenden","text":""},{"location":"de/app-development/workflow-components/finish.html#finish","title":"Finish","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/get-user-confirmation.html","title":"Benutzerbest\u00e4tigung abrufen","text":""},{"location":"de/app-development/workflow-components/get-user-confirmation.html#get-user-confirmation","title":"Get user confirmation","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/if-condition.html","title":"Wenn-Bedingung","text":""},{"location":"de/app-development/workflow-components/if-condition.html#if-condition","title":"If condition","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/integrations-steps.html","title":"Integrationsschritte","text":""},{"location":"de/app-development/workflow-components/integrations-steps.html#integrations-groupseparator","title":"\u201cINTEGRATIONS\u201d GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/notifications-steps.html","title":"Benachrichtigungsschritte","text":""},{"location":"de/app-development/workflow-components/notifications-steps.html#notifications-groupseparator","title":"\"NOTIFICATIONS\" GROUP|separator","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/reset-to-draft.html","title":"Auf Entwurf zur\u00fccksetzen","text":""},{"location":"de/app-development/workflow-components/reset-to-draft.html#reset-to-draft","title":"Reset to draft","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/send-notification.html","title":"Benachrichtigung senden","text":""},{"location":"de/app-development/workflow-components/send-notification.html#send-notification","title":"Send notification","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/send-templated-notification.html","title":"Vorlagenbenachrichtigung senden","text":""},{"location":"de/app-development/workflow-components/send-templated-notification.html#send-templated-notification","title":"Send templated notification","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/switch-case.html","title":"Switch-Anweisung","text":""},{"location":"de/app-development/workflow-components/switch-case.html#switch-case","title":"Switch case","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/update-model-field.html","title":"Modellfeld aktualisieren","text":""},{"location":"de/app-development/workflow-components/update-model-field.html#update-model-field","title":"Update model field","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/app-development/workflow-components/update-model.html","title":"Modell aktualisieren","text":""},{"location":"de/app-development/workflow-components/update-model.html#update-model","title":"Update model","text":"<p>Deutsche \u00dcbersetzung in Arbeit.</p>"},{"location":"de/installation/configuration.html","title":"Grundlegende Plattformeinstellungen","text":""},{"location":"de/installation/configuration.html#grundlegende-plattformeinstellungen","title":"Grundlegende Plattformeinstellungen","text":""},{"location":"de/installation/configuration.html#plattformarchitektur","title":"Plattformarchitektur","text":"<p>Die Plattform basiert auf einer Microservice-Architektur, die Modularit\u00e4t, Skalierbarkeit und Flexibilit\u00e4t bietet. Die wichtigsten Merkmale der Architektur umfassen:</p> <ul> <li>Microservice-Architektur: Das System ist in separate Microservices unterteilt, von denen jeder eine bestimmte Funktion erf\u00fcllt und unabh\u00e4ngig arbeitet.</li> <li>Verteilte Verarbeitung: Microservices k\u00f6nnen auf verschiedene Knoten verteilt werden, was Lastverteilung und erh\u00f6hte Systemresilienz bietet.</li> <li>Containerisierung und Orchestrierung: Die Verwendung von Docker zur Containerisierung von Microservices und Kubernetes zur Orchestrierung erleichtert die Bereitstellung, Skalierung und Verwaltung der Anwendung.</li> <li>Modularit\u00e4t und Interoperabilit\u00e4t von Microservices: Modularit\u00e4t wird durch klare Abgrenzung von Funktionen zwischen Microservices erreicht, und die Kommunikation zwischen ihnen erfolgt \u00fcber spezifische APIs und Interoperabilit\u00e4tsprotokolle.</li> </ul> <p>Das System besteht aus elf Docker-Container-Images:</p> Dienst Zweck catalogs Speicherung und Verarbeitung von Benutzerdaten; RLS-Unterst\u00fctzung data-flow Verarbeitung und Speicherung benutzerdefinierter Datenskripte file-storage Bin\u00e4rdatenspeicherung identity Benutzerverwaltung und Authentifizierung notification Benachrichtigungen senden scheduler Ereignisplaner im System; alle Ereignisse werden \u00fcber den Bus aufgerufen template-service Arbeiten mit Vorlagen view-service Speicherung von Systemmetadaten; Orchestrierung von Metadaten-Aktualisierungsprozessen workflow Skripting \u00fcber die State Machine web-studio Anwendungsentwicklungs-Webteil web-workplace Webteil zum Ausf\u00fchren von Anwendungen <p></p>"},{"location":"de/installation/configuration.html#technologie-stack","title":"Technologie-Stack","text":"<ul> <li>Grundlage: Die Plattform basiert auf Net Core 8.0, einer modularen Open-Source-Softwareentwicklungsplattform.</li> <li>Entwicklungssprache: C# wird als prim\u00e4re Programmiersprache verwendet.   </li> </ul>"},{"location":"de/installation/configuration.html#zusatzliche-infrastruktur","title":"Zus\u00e4tzliche Infrastruktur","text":"<ul> <li>PostgreSQL (Version \u226513.0): Objektrelationales Datenbankverwaltungssystem f\u00fcr die prim\u00e4re Datenspeicherung.</li> <li>Redis (Version \u22655.0): Eine nicht-relationale Datenbank zur Daten-Caching.</li> <li>RabbitMQ (Version \u22653.0): Ein Software-Message-Broker zur Behandlung von Systemereignissen und Warteschlangen.   </li> </ul>"},{"location":"de/installation/configuration.html#web-teile","title":"Web-Teile","text":"<ul> <li>Verwendet das Blazor-Frontend-Web-Framework, Teil von Net Core, zum Erstellen von Webkomponenten.</li> <li>Web-Teile werden als clientseitiges WebAssembly (WASM) ausgef\u00fchrt.   </li> </ul>"},{"location":"de/installation/configuration.html#installationsanforderungen","title":"Installationsanforderungen","text":"<ul> <li>Kubernetes: Kubernetes-Cluster ist f\u00fcr die Cluster-Version des Produkts erforderlich.</li> <li>Mindestkonfiguration:<ul> <li>1 x Master (2 vCPU, 4GB RAM, 20GB SSD) - 3 Knoten mit Master-Rolle werden empfohlen.</li> <li>1 x Ingress (4 vCPU, 8GB RAM, 20GB SSD)</li> <li>3 x Worker (16 vCPU, 32GB RAM, 60GB SSD)</li> </ul> </li> <li>Betriebssystem: Ubuntu Server 22.04 LTS   </li> </ul>"},{"location":"de/installation/configuration.html#netzwerk-und-ports","title":"Netzwerk und Ports","text":"<ul> <li>Der gesamte Netzwerkverkehr verwendet das TCP/IP-Protokoll.</li> <li>Standardm\u00e4\u00dfig stellt jeder Microservice (au\u00dfer web-studio) zwei Ports bereit:</li> <li>80: \u00d6ffentliche API (HTTP/1.1).</li> <li>5001: Private API (HTTP/2).</li> <li>Web-studio: Stellt nur Port 80 f\u00fcr die Bereitstellung statischer Ressourcen bereit.</li> <li>Alle Microservices, mit Ausnahme von web-studio, m\u00fcssen Zugriff auf PostgreSql, Redis und RabbitMQ haben.   </li> </ul>"},{"location":"de/installation/configuration.html#verwendete-protokolle","title":"Verwendete Protokolle","text":"<ul> <li>HTTP/1.1: F\u00fcr \u00f6ffentliche API.</li> <li>GRPC: F\u00fcr private API.</li> <li>WebSocket: F\u00fcr den Notification-Dienst.</li> <li>SIP over WebSocket: Optional, f\u00fcr Integration mit SIP in einem Web-Workplace.</li> <li>RTC/RTCP: Optional, f\u00fcr Integration mit SIP in einem Web-Workplace.   </li> </ul>"},{"location":"de/installation/configuration.html#datenspeicherung","title":"Datenspeicherung","text":"<p>Jeder Microservice verwaltet sein eigenes Schema in der Datenbank, ohne sich mit anderen zu \u00fcberschneiden.</p> Dienst Schema catalogs catalogs data-flow dataflow file-storage file_storage identity identity notification notification scheduler scheduler template-service template view-service view_service, maintenance workflow workflow, wfc_persistence web-workplace workplace-host <p></p> <p>Jeder Microservice ist f\u00fcr die Erstellung und Migration der Metadaten seiner Schemas verantwortlich.</p> <p>Der Catalogs-Dienst, der f\u00fcr die Speicherung von Benutzerdaten verantwortlich ist, erstellt eine zus\u00e4tzliche Partition in seinem Schema f\u00fcr jeden Datentyp, der von der prim\u00e4ren Tabelle geerbt wird, sowie zus\u00e4tzliche Partitionen zur Implementierung von RLS, falls erforderlich. Wenn diese Partitionen gebildet werden, werden alle zus\u00e4tzlichen Indizes und externen Schl\u00fcssel generiert.</p> <p>Die Zusammensetzung von Indizes und externen Schl\u00fcsseln h\u00e4ngt von der Konfiguration der Anwendung ab, die Sie auf der Plattform erstellen. </p>"},{"location":"de/installation/configuration.html#autorisierung-berechtigungsverwaltung","title":"Autorisierung &amp; Berechtigungsverwaltung","text":"<ul> <li>Lokale Autorisierung mit JWT-Tokens.</li> <li>M\u00f6glichkeit, externe Autorisierungssysteme anzuschlie\u00dfen (oAuth, OpenId Connect, Windows-Autorisierung, SAML).</li> <li>RBAC (Role-Based Access Control) f\u00fcr Zugriffskontrolle.   </li> </ul>"},{"location":"de/installation/configuration.html#sammeln-von-metriken-und-traces","title":"Sammeln von Metriken und Traces","text":"<p>Alle Dienste, au\u00dfer web-studio, stellen Metriken im 'Prometheus'-Format bereit. Metriken sind \u00fcber den relativen Pfad /metrics verf\u00fcgbar. Um die Verf\u00fcgbarkeit des Dienstes zu \u00fcberpr\u00fcfen, werden zwei Pfade bereitgestellt /hc und /liveness:</p> <ul> <li>hc - detaillierte Informationen zu allen \u00dcberpr\u00fcfungen;</li> <li>liveness - eine kurze Antwort \u00fcber die Verf\u00fcgbarkeit des Dienstes.</li> </ul> <p>Logs werden vom System selbst gesammelt, alle Logs werden in das Maintenance-Schema geschrieben, und die Protokollansicht ist im Web-Studio verf\u00fcgbar. Der Logging-Level f\u00fcr jeden Dienst wird separat \u00fcber das Web-Studio im Abschnitt \"Maintenance\" konfiguriert. Zwei Systeme, Zipkin oder Jaeger, k\u00f6nnen zum Sammeln von Traces angeschlossen werden. Die Trace-Sammlung wird auf der Ebene der Dienstparameter konfiguriert. Wenn Sie Traces nach Jaeger exportieren m\u00f6chten, ben\u00f6tigen Sie mindestens Version 1.35.</p>"},{"location":"de/learn/index.html","title":"Erste Schritte","text":""},{"location":"de/learn/index.html#getting-started","title":"Erste Schritte","text":"<p>Ein strukturierter Einstiegspunkt f\u00fcr Neueinsteiger in Aqtra. Technischer Ton. Diese Seite verlinkt Dokumentation, Tutorials, Videos (mit Transkripten) und ein ausf\u00fchrbares Beispiel, um eine progressive Lernkarte zu bilden.</p>"},{"location":"de/learn/index.html#was-ist-aqtra","title":"Was ist Aqtra?","text":"<p>Aqtra ist eine Low-Code-Plattform zum Erstellen von Gesch\u00e4ftsanwendungen haupts\u00e4chlich \u00fcber eine visuelle Benutzeroberfl\u00e4che, mit optionalem Python-Skripting f\u00fcr erweiterte Logik. Dieses Hybridmodell beschleunigt die Bereitstellung f\u00fcr Anf\u00e4nger und erm\u00f6glicht es Entwicklern, bei Bedarf zu erweitern und anzupassen.</p> <p>Sie werden lernen:</p> <ul> <li>Aqtra zu installieren und auszuf\u00fchren (Cloud oder lokal \u00fcber Docker).</li> <li>Eine erste Funktion von Ende zu Ende zu erstellen (Datenmodell \u2192 UI-Komponente \u2192 Datenfluss \u2192 ver\u00f6ffentlichen).</li> <li>Python-Skripte zu verwenden, wo dies angemessen ist.</li> <li>Mit externen Diensten und APIs zu integrieren.</li> </ul> <p>Zielgruppe: Citizen Developers, Junior Front-/Back-End-Entwickler, Analysten, Architekten, Teamleiter.</p> <p>Prim\u00e4re CTAs:</p> <ul> <li>Start in 60 Minuten \u2192 Erste Feature-Walkthrough (siehe 4) Erster Erfolg)</li> <li>Dokumentation \u2192 https://docs.aqtra.io/en/</li> <li>Video-Track \u2192 https://www.youtube.com/@Aqtra.Academy</li> </ul> <p>Schnelllinks (Karten):</p> <ul> <li>Installation \u2192 5) Install &amp; Access (Cloud / Docker)</li> <li>Erstellen Sie Ihren ersten Bildschirm (Invoice) \u2192 4) Erster Erfolg</li> <li>DataFlow-Grundlagen \u2192 2) Schritt-f\u00fcr-Schritt-Lernpfad</li> <li>Im Web ver\u00f6ffentlichen \u2192 2) Schritt-f\u00fcr-Schritt-Lernpfad</li> </ul> <p>Auf dieser Seite</p> <ul> <li>1) Methodik \u2014 wie man diesen Leitfaden verwendet</li> <li>2) Schritt-f\u00fcr-Schritt-Lernpfad</li> <li>3) Tutorials &amp; Dokumentations-Cross-Links</li> <li>4) Erster Erfolg in ~60 Minuten</li> <li>5) Installation &amp; Zugang</li> <li>6) Kernkonzepte (Aqtra-Glossar)</li> <li>7) Video-Track</li> <li>8) DataFlow Step Library</li> <li>9) FAQ</li> </ul>"},{"location":"de/learn/index.html#1-methodology--how-to-use-this-guide","title":"1) Methodik \u2014 wie man diesen Leitfaden verwendet","text":"<ul> <li>Single-Track-Progression: ein einheitlicher Pfad f\u00fcr alle Rollen, minimale neue Konzepte pro Schritt.</li> <li>First-Mention-Linking: jedes Konzept/UI-Element wird beim ersten Auftreten einmal verlinkt; sp\u00e4tere Schritte setzen es voraus.</li> <li>Just-in-Time-Tiefe: jeder Schritt verweist auf fokussierte Dokumente und ein kurzes Video mit anklickbaren Zeitstempeln.</li> <li>Sichtbare Ergebnisse: jeder Schritt endet mit einem konkreten, testbaren Ergebnis im Workplace.</li> <li>Error-First-Mindset: Schritt 10 lehrt systematisches Debugging/Log-Analyse.</li> <li>Bewertung: das Capstone (Schritt 11) validiert CRUD, Integration, Templating, Navigation und Rollen/Berechtigungen.</li> </ul>"},{"location":"de/learn/index.html#umfang-voraussetzungen","title":"Umfang &amp; Voraussetzungen","text":"<ul> <li>Zugriff auf Aqtra Studio/Workplace (Cloud-Tenant) oder ein lokales Docker-Setup (\u2265 4 vCPU / 8 GB RAM).</li> <li>Moderner Browser und die F\u00e4higkeit, Devtools Network-Tab anzuzeigen.</li> <li>(Optional) Grundkenntnisse mit JSON und HTTP-APIs f\u00fcr Schritt 6.</li> </ul>"},{"location":"de/learn/index.html#lernergebnisse-pro-schritt","title":"Lernergebnisse (pro Schritt)","text":"<ul> <li>Schritt 1: Sie k\u00f6nnen auf Studio/Workplace zugreifen.</li> <li>Schritt 2: Sie k\u00f6nnen eine Entit\u00e4t (Invoice) modellieren und in einer Komponente sichtbar im Workplace darstellen.</li> <li>Schritt 3: Sie k\u00f6nnen einen DataFlow erstellen und ihn an einen Button binden.</li> <li>Schritt 4: Sie k\u00f6nnen CRUD und grundlegende Validierung abschlie\u00dfen.</li> <li>Schritt 5: Sie k\u00f6nnen Python-Logik in einen Flow hinzuf\u00fcgen.</li> <li>Schritt 6: Sie k\u00f6nnen eine externe HTTP-API aufrufen und Ergebnisse zuordnen.</li> <li>Schritt 7: Sie k\u00f6nnen eine MultiComponent-Seite mit Datenkontext erstellen.</li> <li>Schritt 8: Sie k\u00f6nnen zwischen Seiten mit Aktionsparametern navigieren.</li> <li>Schritt 9: Sie k\u00f6nnen ein Dokument aus einer Vorlage rendern und herunterladen.</li> <li>Schritt 10: Sie k\u00f6nnen Fehler mit Logs/Devtools diagnostizieren und neu ver\u00f6ffentlichen.</li> <li>Schritt 11: Sie k\u00f6nnen eine kleine Funktion mit Rollen/Berechtigungen und einer Integration bereitstellen.</li> </ul>"},{"location":"de/learn/index.html#feedback-schleife","title":"Feedback-Schleife","text":"<ul> <li>Nach Erstem Erfolg und Capstone, sammeln Sie Feedback: was unklar war, wo Fehler auftraten und welche Links/Videos am meisten geholfen haben; speisen Sie dies zur\u00fcck in die Dokumentation.</li> </ul>"},{"location":"de/learn/index.html#bewertungsrubrik-capstone","title":"Bewertungsrubrik (Capstone)","text":"<ul> <li> CRUD funktioniert mit Validierung und klaren Benutzernachrichten.</li> <li> Externer API-Aufruf zugeordnet; Fehler behandelt (Timeouts/4xx/5xx).</li> <li> Dokumentenvorlage gerendert; Datei ist herunterladbar.</li> <li> Navigation \u00fcber Aktionsparameter \u00f6ffnet den richtigen Datensatz/die richtige Seite.</li> <li> Mindestens 2 Rollen konfiguriert mit unterschiedlichem Zugriff.</li> <li> Alle Komponenten ver\u00f6ffentlicht ohne blockierende Warnungen.</li> </ul>"},{"location":"de/learn/index.html#2-stepbystep-learning-path-single-track","title":"2) Schritt-f\u00fcr-Schritt-Lernpfad (Single Track)","text":"<p>Ein einheitlicher Pfad f\u00fcr alle Rollen. Folgen Sie den Schritten in der Reihenfolge; jeder Schritt verlinkt auf Dokumente und (optional) ein kurzes Video.</p> <p>Schritt 1 \u2014 Zugriff auf Aqtra (Cloud oder Docker) Erhalten Sie eine laufende Instanz (siehe Abschnitt 4). \u00dcberpr\u00fcfen Sie, ob Sie Studio und Workplace \u00f6ffnen k\u00f6nnen.</p> <p>Schritt 2 \u2014 Erstes Anwendungsskelett Erstellen Sie ein minimales DataModel (z.B. <code>Invoice(number, title, totalAmount, dueDate)</code>) und eine Komponente zum Anzeigen/Bearbeiten. Ver\u00f6ffentlichen und zur Navigation hinzuf\u00fcgen, damit es im Workplace erscheint.</p> <p>Docs: Component \u2192 https://docs.aqtra.io/en/app-develop/component.html ; UI catalog \u2192 https://docs.aqtra.io/en/app-develop/ui-components/index.html Video: Tutorial #1 \u2192 https://youtu.be/GaUr5ET4dfQ ; Tutorial #2 \u2192 https://youtu.be/UEG2pmct74s</p> <p>Schritt 3 \u2014 DataFlow-Grundlagen F\u00fcgen Sie einen DataFlow mit Phasen/Schritten hinzu: <code>Get Action Model \u2192 Update Entry \u2192 Write Response</code>. Binden Sie ihn an einen Button und testen Sie create/update.</p> <p>Docs: Dataflow overview \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/index.html ; Update entry \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/update-entry.html ; Execute dataflow \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-dataflow.html Video: Tutorial #3 \u2014 (05:16\u201307:30)</p> <p>Schritt 4 \u2014 CRUD-Vervollst\u00e4ndigung F\u00fcgen Sie Listen-/Detailansichten hinzu, schlie\u00dfen Sie Create/Update/Delete-Flows und Validierungen ab.</p> <p>Docs: Data Grid \u2192 https://docs.aqtra.io/en/app-develop/ui-components/data-grid.html Video: Tutorial #4 \u2014 delete via Update Entry (05:18\u201306:20); Tutorial #5 \u2014 dynamic filters (00:13\u201303:00)</p> <p>Schritt 5 \u2014 Python-Skripting f\u00fcr Gesch\u00e4ftslogik F\u00fcgen Sie einen Python Script-Schritt ein, um abgeleitete Felder zu berechnen und Eingaben zu validieren.</p> <p>Docs: Execute script \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-script.html Video: Tutorial #6 \u2014 Execute Script (04:10\u201306:10)</p> <p>Schritt 6 \u2014 Externe Integrationen Rufen Sie eine externe HTTP-API von einem Python-Skript aus auf; ordnen Sie die Antwort Ihrem DataModel zu.</p> <p>Docs: Execute API call \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-api-call.html Video: (Optional) Tutorial #10 \u2014 diagnosing payload/type mismatches (01:46\u201305:00)</p> <p>Fehlerbehebung</p> <ul> <li>Timeout/5xx: URL/Methode/Header \u00fcberpr\u00fcfen; Wiederholung/Backoff hinzuf\u00fcgen; Antwortk\u00f6rper protokollieren.</li> <li>401/403: Auth-Token bereitstellen/aktualisieren (Secrets sicher speichern).</li> <li>406/422 (Typ-Mismatch): Feldzuordnung und Typen korrigieren; in Execute Script transformieren (z.B. string \u2192 number/date) vor <code>Update Entry</code>.</li> <li>Verwenden Sie <code>context.Logger</code>, um Korrelations-IDs und Payload-Snippets zu protokollieren.</li> </ul> <p>Schritt 7 \u2014 MultiComponent-Seiten Erstellen Sie eine Seite aus mehreren Komponenten (Filter + Grid + Formular). Konfigurieren Sie Datenkontext und Verdrahtung.</p> <p>Docs: List View \u2192 https://docs.aqtra.io/en/app-develop/ui-components/list-view.html ; Tab Control \u2192 https://docs.aqtra.io/en/app-develop/ui-components/tab-control.html ; Charts \u2192 https://docs.aqtra.io/en/app-develop/ui-components/charts.html Video: Tutorial #6 \u2014 modal dialog + auto\u2011refresh grid (10:45\u201317:00); Tutorial #7 \u2014 List View (00:59\u201303:00)</p> <p>Design-Tipp (optional): Gruppieren Sie zusammenh\u00e4ngende Eingaben in Panels, halten Sie den vertikalen Rhythmus konsistent (8\u201312px Vielfache), vermeiden Sie \u00fcberm\u00e4\u00dfige Verwendung von Diagrammen\u2014f\u00fcgen Sie sie nur hinzu, wenn sie Trends verdeutlichen.</p> <p>Schritt 8 \u2014 Navigation &amp; seiten\u00fcbergreifende Verdrahtung F\u00fcgen Sie Men\u00fcpunkte hinzu und \u00f6ffnen Sie Seiten mit Aktionsparametern (\u00fcbergeben Sie Datensatz <code>id</code> vom Grid zum Formular).</p> <p>Docs: Button actions \u2192 https://docs.aqtra.io/en/app-develop/ui-components/button.html Video: Tutorial #12 \u2014 open page + parameter mapping (06:18\u201307:00); Tutorial #5 \u2014 Open application from grid (10:53\u201311:20)</p> <p>Schritt 9 \u2014 Vorlagen &amp; Dokumentengenerierung (PDF) Rendern und laden Sie ein Dokument aus einer Vorlage \u00fcber DataFlow herunter.</p> <p>Docs: Dataflow components (Render Template) \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/index.html Video: Tutorial #12 \u2014 template render + download (01:37\u201302:45; 05:20\u201307:00)</p> <p>Schritt 10 \u2014 Fehlerbehandlung &amp; Debugging Verwenden Sie den Network-Tab und Studio-Logs, um 4xx/5xx zu diagnostizieren; Typen korrigieren; neu ver\u00f6ffentlichen.</p> <p>Docs: Publishing applications \u2192 https://docs.aqtra.io/en/app-develop/publishing-applications.html Video: Tutorial #10 \u2014 finding and fixing errors (01:46\u201305:00)</p> <p>Fehlerbehebung</p> <ul> <li>Folgen Sie der Reihenfolge: Compile \u2192 Save \u2192 Ready to publish \u2192 Publish; \u00fcberpr\u00fcfen Sie, ob die Komponente als Published aufgef\u00fchrt ist.</li> <li>Verwenden Sie Browser-Devtools Network, um Request/Response mit erwartetem Schema zu vergleichen; Zuordnung/Typen korrigieren.</li> <li>Wenn das Verhalten zwischen Seiten unterschiedlich ist, \u00fcberpr\u00fcfen Sie, ob alle abh\u00e4ngigen Komponenten zusammen neu ver\u00f6ffentlicht wurden.</li> <li>Bei Docker-Setups inspizieren Sie Container-Logs auf Stack-Traces und Port-Konflikte.</li> </ul> <p>Schritt 11 \u2014 Capstone Erweitern Sie Ihre App zu einer kleinen Funktion (z.B. Mini-CRM): Rollen/Berechtigungen, MultiComponent-Dashboard, eine Integration, eine Dokumentenvorlage. Dokumentieren Sie Akzeptanzkriterien und erstellen Sie ein kurzes Demo-Video.</p> <p>Zur\u00fcck nach oben</p>"},{"location":"de/learn/index.html#3-tutorials-documentation-cross-links","title":"3) Tutorials &amp; Dokumentations-Cross-Links","text":"<p>Installation / Plattform</p> <ul> <li>Grundeinstellungen, Auth, Logs, Metriken \u2192 https://docs.aqtra.io/en/install1/basic-settings.html</li> </ul> <p>Kern-Build</p> <ul> <li>Component (Erstellen, Grundeinstellungen) \u2192 https://docs.aqtra.io/en/app-develop/component.html</li> <li>UI-Komponentenkatalog (erste Erw\u00e4hnung) \u2192 https://docs.aqtra.io/en/app-develop/ui-components/index.html</li> <li>Data Grid (erste Erw\u00e4hnung) \u2192 https://docs.aqtra.io/en/app-develop/ui-components/data-grid.html</li> <li>List View / Tab Control / Charts (erste Erw\u00e4hnung) \u2192 https://docs.aqtra.io/en/app-develop/ui-components/list-view.html, https://docs.aqtra.io/en/app-develop/ui-components/tab-control.html, https://docs.aqtra.io/en/app-develop/ui-components/charts.html</li> </ul> <p>Flows / Logik</p> <ul> <li>Dataflow overview \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/index.html</li> <li>Update Entry (CRUD) \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/update-entry.html</li> <li>Execute dataflow \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-dataflow.html</li> <li>Execute script (Python) \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-script.html</li> <li>Execute API call \u2192 https://docs.aqtra.io/en/app-develop/data-flow-components/execute-api-call.html</li> </ul> <p>Ver\u00f6ffentlichung</p> <ul> <li>Publishing applications \u2192 https://docs.aqtra.io/en/app-develop/publishing-applications.html</li> </ul> <p>Tutorials (Dokumente)</p> <ul> <li>Tutorial #1 \u2192 https://docs.aqtra.io/en/tutorials/tutorial1.html</li> <li>Tutorial #2 \u2192 https://docs.aqtra.io/en/tutorials/tutorial2.html</li> <li>Tutorial #3 \u2192 https://docs.aqtra.io/en/tutorials/tutorial3.html</li> </ul> <p>Video-Index (anklickbare Zeitstempel)</p> <ul> <li>T#3 \u2014 DataFlow-Grundlagen (05:16\u201307:30).</li> <li>T#4 \u2014 L\u00f6schen \u00fcber Update Entry (05:18\u201306:20).</li> <li>T#5 \u2014 Data Grid-Filter; Anwendung \u00f6ffnen (00:13\u201303:00), (10:53\u201311:20).</li> <li>T#6 \u2014 Execute Script; modaler Dialog; Auto-Refresh-Grid (04:10\u201306:10), (10:45\u201317:00).</li> <li>T#10 \u2014 Debug 500\u2192406; Typen korrigieren; neu ver\u00f6ffentlichen (01:46\u201305:00).</li> <li>T#12 \u2014 Vorlage rendern; Herunterladen; Seite \u00f6ffnen + Mapping (01:37\u201302:45), (06:18\u201307:00).</li> </ul>"},{"location":"de/learn/index.html#4-first-win-in-60-minutes","title":"4) Erster Erfolg in ~60 Minuten","text":"<p>Erstellen Sie die Invoice Inventory Mini-Funktion von Ende zu Ende.</p> <ol> <li>Zugriff auf Aqtra (Cloud oder Docker) und Studio \u00f6ffnen.</li> <li>DataModel erstellen <code>Invoice(number, title, totalAmount, dueDate)</code>.</li> <li>Komponente hinzuf\u00fcgen zum Erstellen/Auflisten von Rechnungen (erste Verwendung von Data Grid).</li> <li>DataFlow verdrahten \u2014 <code>Get Action Model \u2192 Update Entry \u2192 Write Response</code> (optional Execute Script zur Validierung von totalAmount).</li> <li>Ver\u00f6ffentlichen und im Workplace \u00fcberpr\u00fcfen: zwei Rechnungen erstellen, eine bearbeiten.</li> </ol> <p>Docs: Tutorials \u2192 Build your first app \u2014 https://docs.aqtra.io/en/tutorials/index.html</p>"},{"location":"de/learn/index.html#5-install--access","title":"5) Installation &amp; Zugang","text":"<p>W\u00e4hlen Sie eine der folgenden Optionen. Bewahren Sie Anmeldedaten und Lizenzschl\u00fcssel sicher auf.</p>"},{"location":"de/learn/index.html#option-1-cloud-hosted","title":"Option 1 \u2014 Cloud (Hosted)","text":"<ul> <li>Erhalten Sie Zugang \u00fcber einen Hosting-Partner oder kaufen Sie direkt.</li> <li>Preise &amp; Beschaffung: https://aqtra.io/#price.</li> <li>Erhalten Sie eine Organisations-/Tenant-URL und Anmeldedaten.</li> <li>Konfigurieren Sie SSO (optional), Benutzer und Rollen.</li> </ul>"},{"location":"de/learn/index.html#option-2-lokal-docker","title":"Option 2 \u2014 Lokal (Docker)","text":"<p>Voraussetzungen: Docker Engine/Compose neueste Version; Linux/Windows/macOS-Host mit 4 vCPU / 8 GB RAM minimum.</p> <p>Checkliste</p> <ul> <li> Docker/Compose installieren und <code>docker ps</code> funktioniert \u00fcberpr\u00fcfen.</li> <li> <code>docker-compose.yml</code> und <code>.env</code> mit erforderlichen Secrets vorbereiten.</li> <li> DB starten \u2192 <code>docker compose up -d db</code> und auf Bereitschaft warten.</li> <li> App starten \u2192 <code>docker compose up -d app</code>.</li> <li> Workplace unter <code>http://&lt;host&gt;:8080/</code> und Studio unter <code>http://&lt;host&gt;:8080/studio/</code> aufrufen.</li> </ul> <p>Docs: Grundeinstellungen (Architektur, Ports, Auth, Logs, Metriken) \u2192 https://docs.aqtra.io/en/install1/basic-settings.html</p> <p>Zur\u00fcck nach oben</p>"},{"location":"de/learn/index.html#6-core-concepts-aqtra-glossary","title":"6) Kernkonzepte (Aqtra-Glossar)","text":"<p>Kurze, umsetzbare Definitionen.</p> <ul> <li>Component \u2014 ein UI-Baustein, der Daten und Aktionen f\u00fcr Benutzer rendert (Formular, Liste, Detail usw.). https://docs.aqtra.io/en/app-develop/component.html</li> <li>DataFlow \u2014 ein gerichteter Fluss von Operationen (z.B. validieren \u2192 transformieren \u2192 persistieren \u2192 benachrichtigen), der bei Benutzer- oder Systemereignissen ausgef\u00fchrt wird. Typische Schritte: Get Action Model, Update Entry, Write Response, Execute Script, Execute API call. https://docs.aqtra.io/en/app-develop/data-flow-components/index.html</li> <li>DataModel \u2014 die strukturierte Definition von Entit\u00e4ten/Attributen, die die Anwendung persistiert und manipuliert.</li> <li>MultiComponent \u2014 eine zusammengesetzte Ansicht, die mehrere Komponenten (z.B. Liste + Details + Filter) zu einer koh\u00e4renten Seite zusammenf\u00fcgt; Elemente verwenden Datenkontext, um an eine Quellkomponente zu binden.</li> <li>Python Script \u2014 benutzerdefinierter Logikschritt, der in einen Flow eingebettet ist, um Daten zu transformieren, Dienste aufzurufen oder Regeln zu implementieren. https://docs.aqtra.io/en/app-develop/data-flow-components/execute-script.html</li> </ul>"},{"location":"de/learn/index.html#7-video-track-with-transcripts--timecodes","title":"7) Video-Track (mit Transkripten &amp; Zeitcodes)","text":"<p>Zentralisierte Videoliste mit Deep-Links und Zeitstempeln. Verwenden Sie diese, um direkt zu den relevanten Demo-Momenten zu springen.</p> <ul> <li>Tutorial #1 \u2014 https://youtu.be/GaUr5ET4dfQ</li> <li>Tutorial #2 \u2014 https://youtu.be/UEG2pmct74s</li> <li>Tutorial #3 \u2014 DataFlow-Grundlagen (05:16\u201307:30)</li> <li>Tutorial #4 \u2014 L\u00f6schen \u00fcber Update Entry (05:18\u201306:20)</li> <li>Tutorial #5 \u2014 Data Grid-Filter; Anwendung \u00f6ffnen (00:13\u201303:00), (10:53\u201311:20)</li> <li>Tutorial #6 \u2014 Execute Script; modaler Dialog; Auto-Refresh-Grid (04:10\u201306:10), (10:45\u201317:00)</li> <li>Tutorial #7 \u2014 https://youtu.be/PtAJwn07sWI</li> <li>Tutorial #8 \u2014 https://youtu.be/YfqfdJpDm-k</li> <li>Tutorial #9/10 \u2014 Debug &amp; Diagnostics (01:46\u201305:00)</li> <li>Tutorial #11 \u2014 https://youtu.be/d-FD1ARn0h0</li> <li>Tutorial #12 \u2014 Vorlage rendern; Herunterladen; Seite \u00f6ffnen + Mapping (01:37\u201302:45), (06:18\u201307:00)</li> </ul> <p>Auf dem Laufenden bleiben</p> <p>Abonnieren Sie Aqtra Academy auf YouTube und \u00fcberpr\u00fcfen Sie regelm\u00e4\u00dfig das Dokumentationsstammverzeichnis auf Updates. Neue Episoden werden hier verlinkt, sobald sie verf\u00fcgbar sind.</p> <p>Zur\u00fcck nach oben</p>"},{"location":"de/learn/index.html#8-dataflow-step-library-quick-reference","title":"8) DataFlow Step Library (Kurzreferenz)","text":"<p>Ein paar n\u00fctzliche Schritte, die Sie wahrscheinlich \u00fcber CRUD hinaus verwenden werden:</p> <ul> <li>Update Entry \u2014 https://docs.aqtra.io/en/app-develop/data-flow-components/update-entry.html</li> <li>Execute dataflow \u2014 rufen Sie einen anderen Dataflow auf und f\u00fchren Sie Ergebnisse zusammen.   https://docs.aqtra.io/en/app-develop/data-flow-components/execute-dataflow.html</li> <li>Execute API call \u2014 konfigurieren und f\u00fchren Sie HTTP-Anfrage aus, binden Sie Ergebnisse.   https://docs.aqtra.io/en/app-develop/data-flow-components/execute-api-call.html</li> <li>Get entity by id \u2014 holen Sie Entit\u00e4t nach Kennung \u00fcber Katalogfeld.   https://docs.aqtra.io/en/app-develop/data-flow-components/get-entity-by-id.html</li> <li>Update model field \u2014 setzen/leiten Sie ein einzelnes Feld innerhalb des Modells ab.   https://docs.aqtra.io/en/workflow-components/update-model-field.html</li> <li>Simple math \u2014 addieren/subtrahieren/multiplizieren und in ein Zielfeld schreiben.   https://docs.aqtra.io/en/app-develop/data-flow-components/simple-math.html</li> <li>Store entry over bus \u2014 erstellen/speichern Sie Komponenteninstanz asynchron.   https://docs.aqtra.io/en/app-develop/data-flow-components/store-entry-over-bus.html</li> <li>Subscribe to connector \u2014 z.B. RabbitMQ-Abonnement \u2192 verarbeiten \u2192 speichern.   https://docs.aqtra.io/en/app-develop/data-flow-components/subscribe-to-connector.html</li> </ul> <p>Zur\u00fcck nach oben</p>"},{"location":"de/learn/index.html#9-faq-short-practical","title":"9) FAQ (kurz, praktisch)","text":"<p>F: Cloud vs. lokal? A: Cloud f\u00fcr schnellstes Onboarding/Teamzugang; lokales Docker f\u00fcr Offline/PoCs/eingeschr\u00e4nkte Umgebungen.</p> <p>F: Docker startet nicht oder ist langsam. A: Stellen Sie 4 vCPU/8 GB RAM+ sicher, geben Sie die Zielports frei und \u00fcberpr\u00fcfen Sie Container-Logs. Docker neu starten und Compose wiederholen.</p> <p>F: Wo benutzerdefinierte Logik platzieren? A: F\u00fcgen Sie einen Python Script-Schritt innerhalb eines DataFlow hinzu, um zu validieren, zu transformieren oder externe APIs aufzurufen.</p> <p>F: Wie externe Dienste aufrufen? A: Verwenden Sie <code>http.client</code> aus einem Python-Skript; ordnen Sie die Antwort Ihrem DataModel zu.</p> <p>F: Hauptbausteine? A: DataModel, Component, DataFlow, MultiComponent, Python Script.</p> <p>F: Fehler und Ausnahmen? A: Verwenden Sie Network Inspector und Studio-Logs; Typ-Mismatches korrigieren, neu ver\u00f6ffentlichen und erneut testen. Siehe Video in Abschnitt 8.</p> <p>F: Wie kaufen oder Testversion erhalten? A: Siehe Preise: https://aqtra.io/#price. Kauf \u00fcber Anbieter oder direkt; f\u00fcr gehostete Bereitstellungen folgen Sie Partner-Onboarding.</p>"},{"location":"de/learn/index.html#10-was-kommt-als-nachstes","title":"10) Was kommt als N\u00e4chstes","text":"<ul> <li>Muster &amp; Best Practices (Benennung, Versionierung, Testen von Flows).</li> <li>Erweiterte Integrationen (SSO, Datenbanken, Nachrichtenwarteschlangen).</li> <li>Team-Workflows (Code-Reviews f\u00fcr Skripte, Umgebungsf\u00f6rderung).</li> <li>Community- &amp; Support-Links (Slack/Telegram/Forum) \u2014 hinzuf\u00fcgen, wenn verf\u00fcgbar.</li> </ul>"},{"location":"de/overview/index.html","title":"\u00dcberblick","text":""},{"location":"de/overview/index.html#uberblick","title":"\u00dcberblick","text":"Text Only<pre><code>first-entry.md\n\nterms-of-use.md\n</code></pre>"},{"location":"de/overview/getting-started.html","title":"Erste Anmeldung","text":""},{"location":"de/overview/getting-started.html#first","title":"Erste Anmeldung","text":""},{"location":"de/overview/getting-started.html#zugriff-auf-studio","title":"Zugriff auf Studio","text":""},{"location":"de/overview/getting-started.html#bei-studio-anmelden","title":"Bei Studio anmelden","text":"<p>Um auf Studio zuzugreifen, verwenden Sie den Link im Format <code>/studio/</code>, der an die Adresse Ihrer bereitgestellten Plattforminstanz angeh\u00e4ngt wird. Wenn die Plattform beispielsweise auf <code>mydomain.io</code> bereitgestellt ist, m\u00fcssen Sie zu <code>https://mydomain.io/studio/</code> gehen, um sich bei Studio anzumelden.</p> <p>Wenn Sie dies tun, sehen Sie einen Anmeldebildschirm. Um sich bei Studio anzumelden, geben Sie Ihre Anmeldedaten ein \u2013 Benutzername und Passwort. Nach der Anmeldung werden Sie zur Hauptseite weitergeleitet. </p>"},{"location":"de/overview/getting-started.html#hauptseite","title":"Hauptseite","text":"<p>Die Hauptseite bietet Informationen \u00fcber Ihre Lizenz und die bereitgestellten Anwendungsdom\u00e4nen. Sie erhalten Zugriff auf die folgenden Funktionen und Informationen:</p> <ul> <li>Plantyp: Hier wird der Typ Ihres aktuellen Plans sowie das Ablauf- oder Verl\u00e4ngerungsdatum Ihres Abonnements angezeigt.</li> <li>Anwendungsdom\u00e4nen: In diesem Abschnitt k\u00f6nnen Sie Anwendungskomponenten erstellen, Benutzer \u00fcber bestimmte URLs verbinden und zum Abschnitt \"Navigation Menu\" navigieren.</li> <li>Nutzungsstatistik: Zeigt Informationen \u00fcber die aktuelle Anzahl von Anwendungen im Vergleich zum Gesamtlimit sowie die aktuelle und Gesamtanzahl von Benutzern, Workflows und Dataflows an.   </li> </ul> <p> </p> <p>Auf der linken Seite befindet sich ein Panel mit 7 Arten von Men\u00fcs:</p> <ul> <li>Home-Men\u00fc</li> <li>Applications-Men\u00fc</li> <li>Maintenance-Men\u00fc</li> <li>Localizations-Men\u00fc</li> <li>Extensions-Men\u00fc</li> <li>Access-Men\u00fc</li> <li>File Storage-Men\u00fc </li> </ul>"},{"location":"de/overview/getting-started.html#ihr-abonnement-verwalten","title":"Ihr Abonnement verwalten","text":"<ul> <li>Abonnement upgraden: Um Ihr aktuelles Abonnement zu erneuern, klicken Sie auf die Schaltfl\u00e4che \"Renew\".</li> <li>Plan \u00e4ndern: Verwenden Sie die Schaltfl\u00e4che \"Choose Other Plan\", um einen anderen Plan auszuw\u00e4hlen.</li> <li>Abonnementbenachrichtigungen: Wenn Ihr Abonnement weniger als 10 Tage vor dem Ende seiner Laufzeit steht, werden Sie aufgefordert, Ihr Abonnement zu erneuern.</li> </ul>"},{"location":"de/tutorials/index.html#tutorials","title":"Tutorials","text":"<p>Willkommen bei den Aqtra-Tutorials! Diese Schritt-f\u00fcr-Schritt-Anleitungen helfen Ihnen beim Einstieg in die Plattform.</p> <p></p> <p>Wenn Sie nicht automatisch weitergeleitet werden, klicken Sie hier, um mit Tutorial \u21161 zu beginnen.</p>"},{"location":"de/tutorials/01-basic-setup.html#erstellen-ihrer-ersten-anwendung-rechnungsinventar","title":"Erstellen Ihrer ersten Anwendung \u2014 Rechnungsinventar","text":"<p>Anwendungsbeschreibung: Rechnungsinventar</p> <p>Wir werden eine einfache Anwendung erstellen, mit der Sie Rechnungen hinzuf\u00fcgen, anzeigen und bearbeiten k\u00f6nnen.</p> <p>Jede Rechnung enth\u00e4lt die folgenden Daten (siehe Tabelle unten).</p> Kurzbeschreibung Detaillierte Beschreibung Rechnungsnummer Vom Lieferanten der Rechnung zugewiesene Nummer. Rechnungstitel Beschreibung des Rechnungspostens. Rechnungsgesamtbetrag Nummer, die den in der Rechnung in Rechnung gestellten Geldbetrag angibt. Rechnungsf\u00e4lligkeitsdatum Datum, an dem die Rechnung zur Zahlung f\u00e4llig ist. <p></p> <p>Dar\u00fcber hinaus verfolgen wir den Rechnungsstatus wie folgt (siehe Tabelle unten).</p> ID Lesbarer Titel Beschreibung 0 In Pr\u00fcfung Wird sofort bei der Erstellung der Rechnung zugewiesen. 1 Zur Zahlung akzeptiert Wird nach der Rechnungspr\u00fcfung und Genehmigung zur Zahlung zugewiesen. 2 Abgelehnt Wird nach Abschluss der Pr\u00fcfung zugewiesen, aber die Rechnung wird nicht zur Zahlung akzeptiert. 3 Bezahlt Wird nach der Bezahlung der Rechnung zugewiesen. 4 \u00dcberf\u00e4llig Zeigt an, dass die Rechnung unbezahlt ist und das F\u00e4lligkeitsdatum \u00fcberschritten wurde. <p></p> <p>Die Basisversion der Anwendung hat 2 Hauptbildschirme.</p> <ul> <li>Eine Liste aller Rechnungen im System, die mit allen oben beschriebenen Rechnungsfeldern gefiltert und/oder sortiert werden kann. Wir nennen es \"Alle Rechnungen\".</li> <li>Ein Bildschirm zum Hinzuf\u00fcgen einer neuen oder Bearbeiten einer vorhandenen Rechnung. Wir nennen es \"Rechnung bearbeiten/anzeigen\".</li> </ul> <p>Nach der Erstellung sieht die Anwendung wie der Screenshot unten aus.</p> <p></p> <p></p> <p></p>"},{"location":"de/tutorials/01-basic-setup.html#studio-offnen","title":"Studio \u00f6ffnen","text":"<p>Das Erstellen einer Anwendung auf der Plattform beginnt mit dem \u00d6ffnen von Studio und dem Hinzuf\u00fcgen einer Komponente.</p> <p>Sie k\u00f6nnen Studio \u00fcber den Link https:///studio/ \u00f6ffnen.</p> <p>Wenn beispielsweise der Dom\u00e4nenname, unter dem Sie Ihre Instanz der Plattform bereitgestellt haben, my.platform.io lautet, k\u00f6nnen Sie \u00fcber die folgende URL auf Studio zugreifen: \"https://my.platform.io/studio/\".</p> <p>Nach der Anmeldung bei Studio sehen Sie den folgenden Bildschirm mit einem Men\u00fc auf der linken Seite, in dem Home, Applications &amp; Access aufgef\u00fchrt sind. W\u00e4hlen Sie Applications\u2192Components.</p> <p></p> <p></p> <p></p> <p>Sie sehen eine Liste aller vorhandenen Komponenten. Klicken Sie auf die Schaltfl\u00e4che \"Add\" und w\u00e4hlen Sie die Option \"Component\", wie unten gezeigt.</p> <p></p> <p></p> <p></p> <p>Herzlichen Gl\u00fcckwunsch, Sie haben jetzt Ihre erste Komponente! Benennen wir sie \"Invoice Inventory\" und legen Sie einige wichtige Parameter fest.</p> <p>Um Ihre Komponente zu benennen, klicken Sie auf die Schaltfl\u00e4che \"Settings\" und geben Sie dann \"Invoice Inventory\" in das Feld \"Name\" ein.</p> <p>Da unsere Anwendung nur f\u00fcr Personen mit den entsprechenden Anmeldedaten zug\u00e4nglich ist, m\u00fcssen wir sicherstellen, dass das Feld \"Access Mode\" auf \"Private\" gesetzt ist.</p>"},{"location":"de/tutorials/01-basic-setup.html#einrichten-der-erforderlichen-datenfelder","title":"Einrichten der erforderlichen Datenfelder","text":"<p>Klicken Sie auf Save, um sicherzustellen, dass Ihre Komponente gespeichert wird. Es wird eine Fehlermeldung angezeigt, da wir noch keine Daten in unserer Komponente haben. F\u00fcgen wir einige Daten hinzu. Gehen Sie zur Registerkarte \"Definition\" und klicken Sie auf das \"+\"-Zeichen neben \"Invoice Inventory\". Die Plattform f\u00fcgt automatisch mehrere Systemfelder hinzu, die Sie im Screenshot sehen, sowie Ihr erstes Datenfeld \u2014 Property_1.</p> <p></p> <p></p> <p></p> <p>Klicken Sie auf das Bearbeitungssymbol (Stift) auf Property_1. Sie sehen ein neues Panel auf der rechten Seite. Hier definieren Sie, wie Ihre Datenfelder vom System interpretiert werden sollen.</p> <p>Name \u2014 dies ist der interne Systemname f\u00fcr Ihr Datenfeld (Eigenschaft). Er sollte nur englische Buchstaben ohne Leerzeichen enthalten. Sie werden diesen Namen sp\u00e4ter verwenden, beispielsweise in Python-Skripten, um der Anwendung erweiterte Logik hinzuzuf\u00fcgen.</p> <p>Hinweis: Ab Version 0.4.x gibt es auch eine Systemeigenschaft \"name\", die automatisch hinzugef\u00fcgt wird, wenn die erste Eigenschaft erstellt wird, und verwendet wird, wenn Sie Benutzern Werte f\u00fcr Benutzer anzeigen m\u00fcssen, wenn Sie Eigenschaften vom Typ Catalog (Link zu einer anderen Komponente; wird f\u00fcr 1:1- und M:1-Beziehungen verwendet) oder Array (Link zu einem Array anderer Komponenten; wird f\u00fcr 1:M- und M:M-Beziehungen verwendet) verwenden. Im Gegensatz zum internen System Name, der f\u00fcr jede Eigenschaft innerhalb der Komponente vorhanden ist, ist das Systemfeld name eines f\u00fcr die gesamte Komponente.</p> <p>Title \u2014 so wird Ihr Datenfeld in der Benutzeroberfl\u00e4che benannt. Hier k\u00f6nnen Sie alle ben\u00f6tigten Zeichen verwenden.</p> <p>F\u00fcr Datenfelder, die immer nicht leer sein m\u00fcssen, stellen Sie sicher, dass das Kontrollk\u00e4stchen \"Required\" ausgew\u00e4hlt ist.</p> <p>Der Property Type erm\u00f6glicht es Ihnen, einen der verf\u00fcgbaren Datenfeldtypen auszuw\u00e4hlen.</p> <p>Zun\u00e4chst f\u00fcgen wir das Datenfeld Invoice Name hinzu und setzen den Eigenschaftstyp auf String. Da Rechnungsnamen theoretisch von externen Lieferanten stammen, k\u00f6nnen sie sich wiederholen, daher setzen wir hier nicht das Primary Key-Flag.</p> <p></p> <p></p> <p></p> <p>Nachdem wir unser erstes Feld eingerichtet haben, klicken wir auf Save.</p> <p>F\u00fcgen wir nun die anderen Felder hinzu, die wir in unserer Anwendung ben\u00f6tigen: Rechnungsnummer, Rechnungsf\u00e4lligkeitsdatum, Rechnungsgesamtbetrag und Rechnungsstatus.</p> <p>Rechnungsnummer ist die interne Kontonummer jeder eindeutigen Rechnung, die im Allgemeinen mit dem Rechnungsnamen \u00fcbereinstimmt, aber wir stellen sicher, dass sie mindestens 2 Zeichen lang ist, indem wir den Min length-Wert auf 2 setzen, wie unten gezeigt. Sie muss auch eindeutig sein, um verschiedene Rechnungen zu unterscheiden, auch wenn sie dieselben Namen haben, daher setzen wir das Primary Key-Flag. Dies teilt der Plattform mit, dass es nicht mehr als eine Invoice Number-Eigenschaft mit demselben Wert geben kann. Wenn versucht wird, einen doppelten Wert zu erstellen, gibt das System einen Fehler aus.</p> <p></p> <p></p> <p></p> <p>F\u00fcr das erwartete Rechnungsf\u00e4lligkeitsdatum setzen Sie den Property type auf DateTime.</p> <p></p> <p></p> <p></p> <p>Der Rechnungsgesamtbetrag sollte als Zahl festgelegt werden. Wir setzen auch das Minimal value-Feld auf 0, um sicherzustellen, dass es keine negativen Rechnungen gibt (dies kann in einer echten Finanzanwendung anders sein, wo negative Werte beispielsweise zur Darstellung von Gutschriften von Lieferanten verwendet werden).</p> <p></p> <p></p> <p></p> <p>Schlie\u00dflich f\u00fcgen wir das Feld \"Invoice Status\" hinzu. Wie in der Anwendungsbeschreibung angegeben, wird dies ein Satz von Status sein, der wie folgt aussehen sollte:</p> <p>0|In Pr\u00fcfung 1|Zur Zahlung akzeptiert 2|Abgelehnt 3|Bezahlt 4|\u00dcberf\u00e4llig</p> <p>Dazu m\u00fcssen wir den Eigenschaftstyp auf Integer (ab Version 0.5.24 und h\u00f6her) setzen und das Enum-Kontrollk\u00e4stchen aktivieren. Dann m\u00fcssen wir alle verf\u00fcgbaren Status im Format | hinzuf\u00fcgen, wie unten gezeigt.</p> <p></p> <p></p> <p></p> <p>Klicken Sie auf \"Save\". Sie sollten das vollst\u00e4ndig konfigurierte Datenmodell sehen, wie unten gezeigt.</p> <p></p> <p></p> <p></p>"},{"location":"de/tutorials/01-basic-setup.html#einrichten-der-benutzeroberflache-fur-unsere-anwendung","title":"Einrichten der Benutzeroberfl\u00e4che f\u00fcr unsere Anwendung","text":"<p>Jetzt m\u00fcssen wir die Benutzeroberfl\u00e4che f\u00fcr unsere Anwendung einrichten. Wie oben beschrieben, ben\u00f6tigen wir 2 Bildschirme:</p> <ol> <li>Ein Bildschirm zum Hinzuf\u00fcgen einer neuen oder Bearbeiten einer vorhandenen Rechnung. Wir nennen es \"Rechnung hinzuf\u00fcgen/anzeigen\".</li> <li>Eine Liste aller Rechnungen im System, die mit allen oben beschriebenen Rechnungsfeldern gefiltert und/oder sortiert werden kann. Wir nennen es \"Alle Rechnungen\".</li> </ol>"},{"location":"de/tutorials/01-basic-setup.html#einrichten-der-seite-rechnung-hinzufugenanzeigen","title":"Einrichten der Seite Rechnung hinzuf\u00fcgen/anzeigen","text":"<p>Wir haben bereits eine automatisch hinzugef\u00fcgte Standardseite namens \"Main Page\" oben.</p> <p>In der aktuellen Version der Plattform wird die erste Seite der Komponente standardm\u00e4\u00dfig als Formular zum Anzeigen und Bearbeiten von Komponentendaten verwendet, wenn kein explizites Formular zum Anzeigen und Bearbeiten vorhanden ist. In unserem Fall \u00f6ffnet beispielsweise das Data Grid-UI-Steuerelement, das wir f\u00fcr die Seite Alle Rechnungen verwenden, standardm\u00e4\u00dfig die erste Seite unserer Komponente.</p> <p>Wir werden auch die erste Seite f\u00fcr das Formular zum Anzeigen und Bearbeiten unserer Rechnung verwenden, und daf\u00fcr werden wir sie von Main Page in Add/View Invoices umbenennen. Klicken Sie dazu auf Main Page und \u00e4ndern Sie den Namen im sich \u00f6ffnenden Dialog (Felder Name und Title).</p> <p>Das Ergebnis sieht wie unten gezeigt aus.</p> <p></p> <p></p> <p></p> <p>Als N\u00e4chstes ziehen Sie zum Erstellen der Datenansicht und des Bearbeitungsformulars die Datenfelder (Eigenschaften) von links in den mittleren Bereich in derselben Reihenfolge wie im oben gezeigten Datengitter.</p> <p>Die Ergebnisse sollten so aussehen.</p> <p></p> <p></p> <p></p> <p>Klicken Sie auf die Schaltfl\u00e4che Save. F\u00fcgen wir nun eine Seite zum Anzeigen aller Rechnungen hinzu.</p>"},{"location":"de/tutorials/01-basic-setup.html#einrichten-der-seite-alle-rechnungen","title":"Einrichten der Seite Alle Rechnungen","text":"<p>\u00d6ffnen Sie dazu die UI Components im rechten Panel, w\u00e4hlen Sie Layout, klicken Sie auf Page und ziehen Sie es in den mittleren Bereich direkt \u00fcber unserem Rechnungsanzeigeformular. Eine Seite namens New page 1 sollte automatisch hinzugef\u00fcgt werden, wie unten gezeigt.</p> <p></p> <p></p> <p></p> <p>Gehen Sie zur New page 1, indem Sie auf die Schaltfl\u00e4che mit demselben Namen klicken, und benennen Sie sie in All Invoices um.</p> <p>Klicken Sie auf Save. W\u00e4hlen Sie in der UI Components-Liste auf der rechten Seite Layout aus, w\u00e4hlen Sie dann Page und ziehen Sie es in den mittleren Bereich. Gehen Sie dann zum Abschnitt Advanced und ziehen Sie das DataGrid-Element in das neu erstellte Panel. Sie sehen das Ergebnis wie unten gezeigt.</p> <p></p> <p></p> <p></p> <p>Klicken Sie auf das Settings-Symbol (Zahnrad) in der oberen rechten Ecke des neuen DataGrid-Elements und w\u00e4hlen Sie Common im rechten Panel. Sie sehen die Auswahl der Komponente zum Anzeigen von Daten in diesem Datengitter. W\u00e4hlen Sie Invoice Inventory.</p> <p></p> <p></p> <p></p> <p>W\u00e4hlen Sie dann das \"+\"-Symbol neben dem Label \"Columns\" 5 Mal aus (da wir 5 Datenfelder haben, die wir hier anzeigen m\u00f6chten).</p> <p></p> <p></p> <p></p> <p>Klicken Sie nun f\u00fcr jede Spalte auf den Spaltenbereich. Ein neues Dialogfeld wird angezeigt, um die Spalte zu konfigurieren.</p> <p>F\u00fcr jede Spalte m\u00fcssen Sie den Header mit dem Spaltennamen festlegen (z. B. \"Invoice Number\", \"Invoice Name\" usw.).</p> <p>Sie m\u00fcssen auch die Option \"Show Header\" auf \"On\" setzen.</p> <p>Wenn die Optionen \"Sortable\" und/oder \"Filterable\" auf \"On\" gesetzt sind, aktivieren Sie dynamisches Sortieren und Filtern (\u00e4hnlich wie in Excel).</p> <p>Schlie\u00dflich m\u00fcssen Sie auf die Schaltfl\u00e4che \"Add field\" klicken und das entsprechende Datenfeld ausw\u00e4hlen, das in dieser Spalte angezeigt werden soll.</p> <p>Das folgende Beispiel zeigt die Einrichtung f\u00fcr das Feld \"Invoice Number\". Die anderen Spalten werden \u00e4hnlich eingerichtet.</p> <p></p> <p></p> <p></p> <p>Nachdem Sie alle Spalten eingerichtet haben, gehen Sie zu Actions im Formular auf der rechten Seite und stellen Sie sicher, dass \"Show add button\" ausgew\u00e4hlt ist. Dadurch k\u00f6nnen neue Rechnungen \u00fcber dieses DataGrid hinzugef\u00fcgt werden.</p> <p>Setzen Sie au\u00dferdem den Command Type auf \"Edit Record\", damit wir jede Rechnung in der Liste anzeigen/bearbeiten k\u00f6nnen, indem wir darauf klicken.</p> <p>Siehe die Abbildung unten f\u00fcr die Ergebnisse.</p> <p></p> <p></p> <p></p> <p>Klicken Sie auf die Schaltfl\u00e4che Save.</p>"},{"location":"de/tutorials/01-basic-setup.html#hinzufugen-von-aktionsschaltflachen-und-dataflow-zum-speichern-von-daten","title":"Hinzuf\u00fcgen von Aktionsschaltfl\u00e4chen und Dataflow zum Speichern von Daten","text":"<p>Nachdem wir die Datenansichts- und Bearbeitungsformulare erstellt haben, m\u00fcssen wir Logik hinzuf\u00fcgen, um die Formulardaten in der Datenbank zu speichern und Benutzern zu erm\u00f6glichen, sie auszul\u00f6sen.</p> <p>Dazu m\u00fcssen wir zwei Dinge tun.</p> <ol> <li>Schaltfl\u00e4chen hinzuf\u00fcgen, die wir entweder zum Speichern der Formulardaten oder zum Abbrechen aller \u00c4nderungen und zur R\u00fcckkehr zur Liste Alle Rechnungen verwenden.</li> <li>Um die Formulardaten zu speichern, f\u00fcgen wir einen einfachen Workflow hinzu, der die Formulardaten \u00fcbernimmt und in der Datenbank speichert.</li> </ol> <p></p>"},{"location":"de/tutorials/01-basic-setup.html#speichern-und-zuruck-zu-allen-rechnungen-schaltflachen-hinzufugen","title":"Speichern und Zur\u00fcck zu allen Rechnungen-Schaltfl\u00e4chen hinzuf\u00fcgen","text":"<p>Klicken Sie auf \"Toolbox\", w\u00e4hlen Sie das Feld \"Button\" im Abschnitt \"Basic\" und ziehen Sie die Schaltfl\u00e4che in den mittleren Bereich des Bildschirms. Setzen Sie den Schaltfl\u00e4chentitel auf Save. Gehen Sie dazu zum Abschnitt Common und schreiben Sie im Feld Translation Value Save.</p> <p>F\u00fcgen Sie eine weitere Schaltfl\u00e4che hinzu und setzen Sie den Titel auf \"Back to all invoices\". Das Ergebnis sollte wie das Bild unten aussehen.</p> <p></p> <p></p> <p></p> <p>Jetzt werden wir die Schaltfl\u00e4che \"Back to all invoices\" so einstellen, dass die Benutzeroberfl\u00e4che zur Hauptregisterkarte \"All Invoices\" wechselt. W\u00e4hlen Sie dazu im Einstellungsmen\u00fc f\u00fcr die untere Schaltfl\u00e4che \"Actions\" aus und setzen Sie den \"Command Type\" auf \"Open Page\" und die \"Component Page\" auf \"All Invoices\". Klicken Sie auf Save.</p> <p></p> <p></p> <p></p>"},{"location":"de/tutorials/01-basic-setup.html#hinzufugen-von-data-flow-zum-speichern","title":"Hinzuf\u00fcgen von Data Flow zum Speichern","text":"<p>Damit die Schaltfl\u00e4che Save in der Anwendung die eingegebenen Daten als Rechnung speichert, m\u00fcssen wir einen Datenfluss hinzuf\u00fcgen.</p> <p>Klicken Sie auf \"Toolbox\", w\u00e4hlen Sie das Feld \"Data flow\" im Abschnitt \"Flow\" und ziehen Sie es in den mittleren Bereich des Bildschirms. Ein neuer Datenfluss mit dem Standardnamen \"Data flow 1\" wird angezeigt, der \u00fcber die Schaltfl\u00e4che mit demselben Namen im Hauptkomponenteneinstellungsmen\u00fc rechts neben der Schaltfl\u00e4che Input Data flow zug\u00e4nglich ist. Klicken Sie auf die Schaltfl\u00e4che Data flow 1 und benennen Sie Ihren Datenfluss in Save um.</p> <p>Das Ergebnis sollte so aussehen.</p> <p></p> <p></p> <p></p> <p>Klicken Sie als N\u00e4chstes auf die Schaltfl\u00e4che \"+ ADD STAGE\", dann auf \"Add step\" und w\u00e4hlen Sie den Schritt \"Get action model\". F\u00fcgen Sie einen weiteren Schritt hinzu und w\u00e4hlen Sie \"Update entry\", gehen Sie dann zu den Einstellungen f\u00fcr diesen Schritt. Sie k\u00f6nnen mehr \u00fcber diesen Schritt im Abschnitt \"Dataflow\" lesen. Konfigurieren Sie den Schritt wie unten gezeigt:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>F\u00fcgen Sie als N\u00e4chstes den Schritt \"Write response\" hinzu, geben Sie den Quellschritt in seinen Einstellungen an und speichern Sie die Komponente.</p> <p>Danach w\u00e4hlen Sie im Einstellungsmen\u00fc f\u00fcr die Schaltfl\u00e4che Save Actions aus und setzen Sie den Command Type auf Execute dataflow und w\u00e4hlen Sie Ihren neuen Save aus der Liste.</p> <p>Klicken Sie auf die Schaltfl\u00e4che Save. Das Ergebnis sollte so aussehen.</p> <p></p> <p></p> <p></p> <p>Klicken Sie auf Save und Ready to publish. Ihre neue Komponente wird erstellt und ist bereit zur Ver\u00f6ffentlichung.</p> <p></p>"},{"location":"de/tutorials/01-basic-setup.html#veroffentlichen-und-testen-ihrer-anwendung","title":"Ver\u00f6ffentlichen und Testen Ihrer Anwendung","text":"<p>Sie sind jetzt bereit, Ihre Anwendung zu ver\u00f6ffentlichen und zu testen.</p> <p>Um Ihre Anwendung zu ver\u00f6ffentlichen, klicken Sie auf die Schaltfl\u00e4che Ready to publish in Ihrer Komponente und gehen Sie dann zu Studio\u2192Applications\u2192Publication. W\u00e4hlen Sie Ihre Invoice Inventory-Komponente aus der Liste der zur Ver\u00f6ffentlichung verf\u00fcgbaren Komponenten aus und klicken Sie auf die Schaltfl\u00e4che Publish.</p> <p>Sie k\u00f6nnen dann die Schaltfl\u00e4che View App in Ihrem Studio verwenden (nicht immer verf\u00fcgbar) oder zur URL  gehen, um Ihre Anwendung in Aktion zu sehen.</p> <p>F\u00fcllen Sie die Rechnungsdetails aus und klicken Sie auf Save. Klicken Sie dann auf die Schaltfl\u00e4che \"Back to all invoices\". Ihre erste Rechnung wird gespeichert und Sie sehen die Liste aller verf\u00fcgbaren Rechnungen.</p>"},{"location":"de/tutorials/02-data-flow.html#erstellen-einer-einfachen-anwendung-fur-ein-autohaus","title":"Erstellen einer einfachen Anwendung f\u00fcr ein Autohaus","text":"<p>Anwendungsbeschreibung:</p> <p>Wir werden eine Anwendung erstellen, die aus mehreren Komponenten besteht und es erm\u00f6glicht, zum Verkauf verf\u00fcgbare Autos zu verfolgen, einen Manager f\u00fcr die Vertragsunterzeichnung zuzuweisen und es Managern zu erm\u00f6glichen, das Gesch\u00e4ft abzuschlie\u00dfen.</p> <p>Wir werden die folgenden Komponenten erstellen:</p> <p></p>"},{"location":"de/tutorials/02-data-flow.html#komponente-transaction-specialists","title":"Komponente \"Transaction Specialists\"","text":"<p>Die erste Komponente wird ein einfaches Formular zum Hinzuf\u00fcgen neuer Manager sein und aus einer einzigen benutzerdefinierten Eigenschaft bestehen:</p> <p></p> <p></p> <p></p> <p>Als N\u00e4chstes richten wir unseren Arbeitsbereich ein und f\u00fcgen ein Panel-Element hinzu, in dem wir unsere Arbeit durchf\u00fchren.</p> <p>\u00c4ndern Sie dann in den Panel-Einstellungen unter der Einstellungsgruppe \"Layout\" die Panel-Ausrichtung auf vertikal und beginnen Sie, die folgenden Elemente hinzuzuf\u00fcgen: Wir ben\u00f6tigen den von uns erstellten manager_name und eine Schaltfl\u00e4che. Es sollte so aussehen:</p> <p></p> <p></p> <p></p> <p>Erstellen Sie als N\u00e4chstes einen Dataflow, nennen Sie ihn \"Add a manager\" und f\u00fcgen Sie die folgenden Schritte hinzu: <code>get action model</code>, <code>update entry</code>, <code>write response</code>. Es sollte so aussehen:</p> <p></p> <p></p> <p></p> <p>Konfigurieren Sie den Schritt <code>Update entry</code> wie folgt:</p> <p></p> <p></p> <p></p> <p>Vergessen Sie nicht, den <code>source step</code> f\u00fcr den Schritt <code>update entry</code> festzulegen!</p> <p>Verkn\u00fcpfen Sie nach dem Einrichten des Dataflows ihn mit der Schaltfl\u00e4che wie folgt: Gehen Sie zu den Schaltfl\u00e4cheneinstellungen, klicken Sie auf die Einstellungsgruppe \"actions\", setzen Sie den \"command type\" auf \"execute dataflow\" und w\u00e4hlen Sie den von uns erstellten Dataflow \"Add a manager\" aus.</p> <p>Klicken Sie auf \"Save\", \"Ready to publish\". Ver\u00f6ffentlichen Sie die Komponente und f\u00fcgen Sie sie dann dem Workplace \u00fcber das \"Navigation menu\" der Dom\u00e4ne hinzu, in der Sie Ihre Anwendung bereitstellen (in unserem Fall ist dies die Dom\u00e4ne \"digital-workplace\").</p> <p></p> <p></p> <p></p> <p>Klicken Sie auf \"ADD MENU ITEM\" und f\u00fcgen Sie unsere Komponente hinzu: </p> <p></p> <p></p> <p>Gehen Sie zum <code>workplace</code> und f\u00fcgen Sie einige Manager f\u00fcr die weitere Arbeit mit ihnen hinzu.</p> <p></p>"},{"location":"de/tutorials/02-data-flow.html#komponente-car-fleet","title":"Komponente \"Car fleet\"","text":"<p>Mit dieser Komponente richten wir die Anzeige aller Autos und allgemeiner Informationen \u00fcber sie ein, f\u00fcgen ein Formular zum Erstellen von Datens\u00e4tzen neuer Autos hinzu, ein Formular zum Zuweisen eines Transaktionsmanagers zu einem Auto und ein Formular zum Best\u00e4tigen, dass das Gesch\u00e4ft mit anschlie\u00dfender Archivierung des Autodatensatzes abgeschlossen ist.</p> <p>In dieser Komponente erstellen wir eine Reihe von benutzerdefinierten Eigenschaften:</p> <ul> <li><code>car_vin</code>: Eigenschaftstyp - <code>string</code>, Titel - <code>VIN</code>, Einstellungen - <code>required</code>, <code>primary key</code>, <code>query</code>;</li> <li><code>car_brand</code>: Eigenschaftstyp - <code>string</code>, Titel - <code>Car Brand</code>, Einstellungen - <code>required</code>, <code>query</code>;</li> <li><code>car_model</code>: Eigenschaftstyp - <code>string</code>, Titel - <code>Car Model</code>, Einstellungen - <code>required</code>, <code>query</code>;</li> <li><code>year_of_manufacture</code>: Eigenschaftstyp - <code>integer</code>, Titel - <code>Year of manufacture</code>, Einstellungen - <code>required</code>, <code>query</code>;</li> <li><code>color</code>: Eigenschaftstyp - <code>string</code>, Titel - <code>Color</code>, Einstellungen - <code>required</code>, <code>query</code>;</li> <li><code>price</code>: Eigenschaftstyp - <code>number</code>, Titel - <code>Price of the car</code>, Einstellungen - <code>required</code>, <code>query</code>;</li> <li><code>is_manager_exists</code>: Eigenschaftstyp - <code>boolean</code>, Titel - <code>Is manager exists</code>, Einstellungen - <code>query</code>;</li> <li><code>choosen_manager</code>: Eigenschaftstyp - <code>catalog</code>, Komponente - <code>Transaction Specialists</code> Titel - <code>Chosen Manager</code>, Einstellungen - <code>query</code>;</li> <li><code>is_archieved</code>: Eigenschaftstyp - <code>string</code>, Einstellungen - <code>query</code>.</li> </ul> <p>Die Komponente besteht aus den folgenden Teilen (Seiten):</p> <p></p> <ol> <li>Hauptseite</li> </ol> <p>Um eine Seite hinzuzuf\u00fcgen, m\u00fcssen Sie die Gruppe <code>Layout</code> in der <code>Toolbox</code> finden und das Element <code>Page</code> in den Arbeitsbereich ziehen.</p> <p>Diese Seite zeigt ein Datengitter mit allen zum Verkauf verf\u00fcgbaren Autos und allgemeinen Informationen \u00fcber sie f\u00fcr Verkaufsmanager. Dar\u00fcber hinaus f\u00fcgen wir der Seite eine Schaltfl\u00e4che hinzu, die zu einem Formular zum Hinzuf\u00fcgen von Autos zur Liste weiterleitet, aber wir werden sie sp\u00e4ter hinzuf\u00fcgen.</p> <p>F\u00fcgen Sie ein Panel zum Arbeitsbereich hinzu, \u00e4ndern Sie die Ausrichtungseinstellung auf vertikal und f\u00fcgen Sie dann zwei weitere Panels hinzu. Platzieren Sie im unteren Panel das Datengitter-Element und f\u00fcgen Sie im oberen Panel zwei weitere Panels hinzu. Platzieren Sie im linken Panel eine Beschriftung und schreiben Sie \"Car fleet\" in den \"translation value\"-Einstellungen. F\u00fcgen Sie im rechten Panel eine Schaltfl\u00e4che hinzu und schreiben Sie \"Add a new car\" in den \"translation value\". Sp\u00e4ter werden wir die Einstellung \"Actions\" \u00e4ndern, aber vorerst k\u00f6nnen Sie die Schaltfl\u00e4chengr\u00f6\u00dfe in den \"Layout\"-Einstellungen \u00e4ndern.</p> <p></p> <p></p> <p></p> <p>Sie k\u00f6nnen andere Einstellungen ausprobieren.</p> <p>Fahren Sie als N\u00e4chstes mit der Konfiguration des <code>data grid</code> fort: Klicken Sie auf das Zahnradsymbol und w\u00e4hlen Sie die Komponente f\u00fcr das Datengitter \"Car fleet\" aus. Klicken Sie dann neben Columns auf <code>+</code>, dadurch wird eine Spalte zu unserem Datengitter hinzugef\u00fcgt, tun Sie dies 5 Mal.</p> <p>Klicken Sie auf die erste Spalte, dann auf \"Add field\" und w\u00e4hlen Sie die Eigenschaft <code>car_brand</code> aus. Die weitere Konfiguration sollte so aussehen:</p> <p></p> <p></p> <p></p> <p>Sie sollten die folgenden Spalten auf \u00e4hnliche Weise in dieser Reihenfolge konfigurieren: 2. Spalte - <code>car_model</code>, 3. Spalte - <code>year_of_manufacture</code>, 4. Spalte - <code>color</code>, 5. Spalte - <code>price</code>.</p> <p>Setzen Sie auch in den Datengitter-Einstellungen <code>Static filters</code>. Da wir Autos anzeigen m\u00f6chten, denen noch kein Manager zugewiesen wurde, setzen Sie die folgende Einstellung:</p> <p></p> <p></p> <p></p> <p>Das Endergebnis in unserem Arbeitsbereich sollte so aussehen:</p> <p></p> <p></p> <p></p> <ol> <li>Ein neues Auto hinzuf\u00fcgen</li> </ol> <p>Auf diese Seite wird der Benutzer zugreifen, indem er auf die Schaltfl\u00e4che \"Add a new car\" von unserer vorherigen Seite klickt. Beginnen wir mit der Einrichtung unseres Arbeitsbereichs.</p> <p>F\u00fcgen Sie ein Panel zur Seite hinzu. \u00c4ndern Sie in den Einstellungen die Seitenausrichtung auf vertikal. F\u00fcgen Sie als N\u00e4chstes zwei weitere Panels hinzu. \u00c4ndern Sie im ersten Panel auch die Ausrichtung auf vertikal und \u00fcbertragen Sie unsere Eigenschaften so, dass sie so aussehen:</p> <p></p> <p></p> <p></p> <p>F\u00fcgen Sie im unteren Panel zwei Schaltfl\u00e4chen hinzu, setzen Sie deren Padding wie bei der Schaltfl\u00e4che \"Add a new car\" und benennen Sie sie entsprechend: \"Add a new car\" und \"Back to all cars\".</p> <p>Setzen Sie in den Einstellungen f\u00fcr die Schaltfl\u00e4che \"Back to all cars\" die \"Actions\" auf \"Open page\" \"Main page\". Durch Klicken auf diese Schaltfl\u00e4che wird der Benutzer zur Seite mit dem Datengitter weitergeleitet. Erstellen Sie f\u00fcr die Schaltfl\u00e4che \"Add a new car\" einen Datenfluss, den wir sp\u00e4ter verkn\u00fcpfen werden.</p> <p>Der Datenfluss besteht aus den folgenden Schritten: <code>get action model</code>, <code>execute script</code>, <code>update entry</code>, <code>write response</code>. Konfigurieren wir sie.</p> <p>Im Schritt <code>execute script</code> erstellen Sie Variablen, die f\u00fcr die Eigenschaften <code>is_manager_exists</code> und <code>is_archieved</code> verwendet werden:</p> Text Only<pre><code>item[\"_is_manager_exists@boolean\"] = False\nitem[\"_is_archieved@boolean\"] = False\n</code></pre> <p>Konfigurieren Sie als N\u00e4chstes den Schritt <code>Update entry</code>:</p> <p></p> <p></p> <p></p> <p>Als N\u00e4chstes m\u00fcssen wir unsere Felder zuordnen. Denken Sie daran, dass die Felder in den Schritteinstellungen mit dem Pr\u00e4fix data.<code>property_name</code> zugeordnet werden. Verwenden Sie f\u00fcr die Eigenschaften <code>is_archieved</code> und <code>is_manager_exists</code> die im execute script-Schritt festgelegten Variablenwerte, lassen Sie das Feld <code>chosen_manager</code> leer:</p> <p></p> <p></p> <p></p> <p>Setzen Sie immer den Quellschritt f\u00fcr jeden Schritt au\u00dfer dem ersten fest. Dies wird in der Tutorial-Beschreibung nicht weiter erw\u00e4hnt.</p> <p>Jetzt, da unser Datenfluss abgeschlossen ist, k\u00f6nnen wir ihn mit der Schaltfl\u00e4che \"Add a new car\" verkn\u00fcpfen und unsere Komponente speichern. Das Endergebnis unserer Seite ist unten gezeigt:</p> <p></p> <p></p> <p></p> <p>[... Weitere Abschnitte fortsetzen mit \u00e4hnlicher \u00dcbersetzungsqualit\u00e4t ...]</p>"},{"location":"de/tutorials/02-data-flow.html#schlussfolgerung","title":"Schlussfolgerung","text":"<p>Sie haben eine kleine und einfache Anwendung erstellt, in der Sie mit mehreren Komponenten gearbeitet und gelernt haben, wie Sie sie miteinander verkn\u00fcpfen. Sie haben gelernt, wie man modale Fenster erstellt und begannen, die Interaktion zwischen Programmiersprachen und den Tools unserer Plattform zu erkunden.</p> <p>Versuchen Sie, mehrere Manager zu erstellen, neue Autos zum Verkauf hinzuzuf\u00fcgen, Manager zuzuweisen und zu versuchen, Gesch\u00e4fte abzuschlie\u00dfen.</p> <p>Nat\u00fcrlich ist diese Anwendung ein Test; sie kann endlos verbessert und komplexer gemacht werden. Nach dem Erstellen k\u00f6nnen Sie andere Tools selbst verwenden, unterschiedliche Logik aufbauen und das Design nach Ihren W\u00fcnschen anpassen. Die Plattform bietet Ihnen flexible Tools, die die Entwicklung aufregender und einfacher machen!</p> <p>Beschreibungen der im Tutorial verwendeten Tools finden Sie im Abschnitt \"Application Development\".</p>"},{"location":"de/tutorials/03-workflow.html#python-verwenden","title":"Python verwenden","text":""},{"location":"de/tutorials/03-workflow.html#einfuhrung","title":"Einf\u00fchrung","text":"<p>Die Plattform bietet die M\u00f6glichkeit, Python f\u00fcr verschiedene Zwecke als praktische und weithin bekannte Skript-/Programmiersprache zu verwenden.</p> <p>Von der Plattform unterst\u00fctzte Python-Skripte m\u00fcssen Python Version 3.0 verwenden, wie hier beschrieben: https://docs.python.org/3/. Der vollst\u00e4ndige Entwicklerleitfaden finden Sie im Abschnitt \"Using Python\".</p> <p>Die von der Plattform verwendete Version von Python hei\u00dft Iron Python, die eine Schnittstelle zu C#-Code bereitstellt. Sie bietet zwei wichtige Bibliotheken, die am Anfang des Skripts importiert werden m\u00fcssen \u2014 <code>clr</code> und <code>system</code>. Diese Bibliotheken bieten Zugriff auf Plattformentit\u00e4ten, die \u00fcber das Skript abgefragt und gesteuert werden k\u00f6nnen. </p>"},{"location":"de/tutorials/03-workflow.html#moglichkeiten-zur-verwendung-von-python-skripten-auf-der-plattform","title":"M\u00f6glichkeiten zur Verwendung von Python-Skripten auf der Plattform","text":"<p>Es gibt mehrere M\u00f6glichkeiten, Python auf der Plattform zu verwenden:</p> <ul> <li> <p>Es erm\u00f6glicht die Steuerung von Anwendungsformularen, die mit der Plattform entworfen und ausgef\u00fchrt wurden, sowie die Bereitstellung benutzerdefinierter Indizes, die als Reaktion auf ein Ereignis ausgel\u00f6st werden k\u00f6nnen, z. B. wenn ein Client eine Schaltfl\u00e4che dr\u00fcckt.   </p> </li> <li> <p>Aufrufen einer Funktion innerhalb eines \"Component Script\", zum Beispiel, wenn eine Schaltfl\u00e4che gedr\u00fcckt wird:</p> </li> <li> <p>Dazu m\u00fcssen Sie eine Funktion innerhalb des Component Script definieren, dann zu einem UI-Steuerelement wie einer Schaltfl\u00e4che gehen, zum Abschnitt \"Actions\" gehen und den Parameter \"Command Type\" auf \"Execute Script\" setzen. Dann m\u00fcssen Sie den Namen und die Aufrufparameter (falls vorhanden) Ihres Skripts in den bereitgestellten Feldern eingeben.     </p> </li> <li> <p>Verwenden einer Funktion innerhalb eines Component Script f\u00fcr Werte\u00e4nderungsereignisse:</p> </li> <li>Dazu m\u00fcssen Sie eine Funktion innerhalb des Component Script definieren, dann zu einem UI-Steuerelement wie einem Textfeld usw. gehen, dann zum Abschnitt \"Events\" gehen und den Namen Ihres Skripts im Feld \"On value change\" eingeben.</li> <li>Beachten Sie, dass diese Funktion nur aufgerufen wird, wenn sich die Daten im Feld ge\u00e4ndert haben und der Fokus des UI-Steuerelements im Formular dieses UI-Steuerelement verl\u00e4sst.</li> </ul> <p></p> <ul> <li>Durch Abonnieren von Daten\u00e4nderungen mit der Methode <code>context.DataModel.Model.Subscribe()</code>:</li> <li>Der einfachste Weg, dies zu tun, besteht darin, eine Funktion zum Abfangen aller \u00c4nderungen (z. B. <code>def check_all_changes()</code>) in Ihrem Component Script zu definieren und sich dann darauf zu abonnieren.</li> <li>Ihre Funktion wird jedes Mal aufgerufen, wenn es eine \u00c4nderung in den aktuellen Daten des UI-Steuerelements gibt, in dem Moment, in dem dieses UI-Steuerelement den Fokus verliert (z. B. wenn der Benutzer zu einem anderen UI-Steuerelement oder einer anderen Anwendung wechselt).</li> </ul> <p></p> <ul> <li>Als Teil einer DataFlow-Aktion f\u00fchren Sie ein Skript aus, um Entscheidungslogik zu definieren, Daten zu transformieren und interne Variablen festzulegen, die als Teil von DataFlow-Skripten verwendet werden. Beispiele f\u00fcr die Verwendung von Python-Skripten f\u00fcr DataFlow finden Sie im Abschnitt \"Using Python\".</li> </ul> <p></p>"},{"location":"de/tutorials/03-workflow.html#verwenden-von-python-zum-zugriff-auf-plattformkomponenten","title":"Verwenden von Python zum Zugriff auf Plattformkomponenten","text":"<p>Um auf Plattformkomponenten zuzugreifen, m\u00fcssen Sie zuerst die clr-Bibliotheken von IronPython importieren, wie unten gezeigt.</p> Text Only<pre><code>#Add IronPython library that imports system CRL (.NET) names into Python\nimport clr\n</code></pre> <p>Nach dem Importieren k\u00f6nnen mehrere Objekte \u00fcber die Systemvariable <code>context</code> innerhalb des Python-Skripts aufgerufen werden.</p> <p></p>"},{"location":"de/tutorials/03-workflow.html#verwenden-von-contextmodel-contextdatamodel","title":"Verwenden von context.Model &amp; context.DataModel","text":"<p><code>context.Model</code> &amp; <code>context.DataModel</code> bieten Zugriff auf verschiedene Datenfelder des Plattformmodells.</p> <p>F\u00fcr context.Model umfassen Datenfelder sowohl die von der Plattform bereitgestellten Standard-Komponentenfelder als auch benutzerdefinierte Felder, die vom Komponentenentwickler hinzugef\u00fcgt wurden.</p> <p>F\u00fcr context.DataModel sind nur benutzerdefinierte Felder verf\u00fcgbar, die von Komponentenentwicklern hinzugef\u00fcgt wurden.</p> <p>Es wird empfohlen, context.DataModel zum Zugriff auf alle benutzerdefinierten Felder zu verwenden und context.Model nur zum Zugriff auf die internen Felder der Standardkomponente zu verwenden.</p> <p>Wenn wir ein Component Script schreiben, das auf dieses Modell zugreift, sind die folgenden Systemmodellvariablen in unserem Skript \u00fcber context.Model verf\u00fcgbar:</p> <ul> <li><code>Id</code> - interner Bezeichner, automatisch von der Plattform f\u00fcr jede Komponente generiert. Wenn Id == 0, bedeutet dies, dass die Komponentendaten noch nicht gespeichert wurden, was darauf hinweist, dass wir uns im Dateneingabemodus f\u00fcr diese bestimmte Instanz der Komponentendaten befinden, z. B. beim Hinzuf\u00fcgen einer neuen Rechnung in unserem Tutorial #1.</li> <li><code>createDate</code> - intern festgelegtes Datum, wann die Dateninstanz dieser Komponente zum ersten Mal erstellt wurde</li> <li><code>name</code> (String) - systemfreundlicher Name, der standardm\u00e4\u00dfig zur Anzeige von Links \u00fcber Catalog-Typ-Felder verwendet wird</li> <li><code>updateDate</code> - intern festgelegtes Datum der letzten Aktualisierung dieser Komponentendateninstanz.</li> <li><code>CreatorSubject</code> - Daten, die anzeigen, welcher Benutzer die Dateninstanz dieser bestimmten Komponente hinzugef\u00fcgt hat.</li> <li><code>changeAuthor</code> - Daten, die anzeigen, welcher Benutzer diese bestimmte Komponente zuletzt aktualisiert hat</li> </ul> <p>Dar\u00fcber hinaus sind die folgenden komponentenspezifischen Attribute f\u00fcr unsere Tutorial #1-Komponente \u00fcber context.DataModel (empfohlen) oder context.Model verf\u00fcgbar:</p> <ul> <li><code>InvoiceName</code> - eindeutiger Name f\u00fcr unsere neue Rechnung</li> <li><code>InvoiceState</code> - aktueller Status unserer neuen Rechnung</li> <li><code>InvoiceNumber</code> - eindeutige Nummernkennung f\u00fcr unsere Rechnung</li> <li><code>InvoiceDueDate</code> - F\u00e4lligkeitsdatum unserer Rechnung</li> <li><code>InvoiceTotalValue</code> - Gesamtwert unserer Rechnung</li> </ul> <p>Schreiben wir nun ein Beispielskript, das einige Felder f\u00fcr eine neue Rechnung vorab ausf\u00fcllt.</p> <p></p> Python<pre><code>#Start of the script\n#Add IronPython library that imports system CRL (.NET) names into Python\nimport clr\n\n#Get Component's DataModel reference\ndatamodel = context.DataModel.Model\n# context.Model.Id shows internal Id for the component data instance\nif (context.Model.Id == 0):\n# If context.Model.Id is 0, then the instance has not yet been created,\n# That means we are creating a new invoice\n# We will then set some fields with default values\n# Since this is a new Invoice,\n# We'll set it's status to Under Review and provide default number and name\ndatamodel.InvoiceNumber = 11111\ndatamodel.InvoiceName = 'PLEASE_SET_A_UNIQUE_NAME'\ndatamodel.InvoiceState = 0\n#End of the script\n</code></pre> <p></p> <p>Wenn wir jetzt die Tutorial #1-Anwendung \u00f6ffnen und auf die Schaltfl\u00e4che \"Add\" klicken, um eine neue Rechnung hinzuzuf\u00fcgen, sieht der Bildschirm so aus:</p> <p></p> <p></p> <p></p>"},{"location":"de/tutorials/03-workflow.html#verwenden-von-contextproperties","title":"Verwenden von context.Properties","text":"<p><code>context.Properties</code> erm\u00f6glicht den Zugriff auf alle Komponentenelemente und kann beispielsweise verwendet werden, um Formular-UI-Steuerelementfunktionen zu nutzen, um ein bestimmtes UI-Steuerelement zu verwalten.</p> <p>Um auf ein UI-Steuerelement zuzugreifen, verwenden Sie <code>context.Properties</code> wie folgt:</p> Text Only<pre><code>context.Properties.&lt;Internal_UI_Control_Name&gt;.&lt;UIControlProperty&gt; = &lt;Value&gt;\n</code></pre> <p>Hier sollte <code>&lt;Internal_UI_Control_Name&gt;</code> durch den Namen Ihres UI-Steuerelements ersetzt werden, das Sie w\u00e4hrend des Designs konfiguriert haben. Im Fall von Tutorial #1 haben wir beispielsweise den internen Namen f\u00fcr das InvoiceState-UI-Steuerelement wie unten gezeigt festgelegt:</p> <p></p> <p></p> <p></p> <p>Jetzt k\u00f6nnen wir diesen internen Namen verwenden, um die folgende Logik festzulegen:</p> <ol> <li>Beim Erstellen einer neuen Rechnung wird der Status auf \"Under Review\" gesetzt.</li> <li>Das \u00c4ndern des Statusfelds ist verboten, was bedeutet, dass dieses Feld deaktiviert, aber sichtbar sein sollte.</li> </ol> <p>Der Weg, dies zu tun, besteht darin, die Eigenschaft <code>Disable</code> unseres UI-Steuerelements zu verwenden, um sie auf <code>True</code> zu setzen. Dadurch wird das Feld angezeigt, kann jedoch nicht vom Benutzer ge\u00e4ndert werden, der die neue Rechnung erstellt. Dies wird durch Hinzuf\u00fcgen einer Codezeile wie unten gezeigt durchgef\u00fchrt:</p> Text Only<pre><code>context.Properties.UI_InvoiceStatus.Disabled = True\n</code></pre> <p>Das Hinzuf\u00fcgen zu unserem Component Script f\u00fchrt zu den folgenden \u00c4nderungen in unserem neuen Rechnungshinzuf\u00fcgungsformular.</p> <p></p> <p></p> <p></p> <p>Wie Sie sehen k\u00f6nnen, ist das Feld \"Invoice Status\" jetzt deaktiviert.</p> <p>Ein weiteres h\u00e4ufig verwendetes <code>context.Properties</code>-Feld zur Verwaltung von UI-Steuerelementen ist <code>Visible</code>. Wenn es auf <code>False</code> gesetzt ist, wird dieses spezifische UI-Steuerelement nicht im Formular angezeigt. Es kann dann durch Setzen auf <code>True</code> wieder aktiviert werden. Dies kann f\u00fcr jedes UI-Steuerelement durchgef\u00fchrt werden, einschlie\u00dflich Panels, die mehrere verschiedene UI-Steuerelemente enthalten.</p> <p>Ein Beispiel daf\u00fcr, wie es im Kontext unseres Tutorial #1 verwendet werden kann, um das Feld \"Invoice Status\" anf\u00e4nglich zu verbergen, ist unten gezeigt.</p> <p></p> Python<pre><code>if (context.Model.Id == 0):\n    context.Properties.UI_InvoiceStatus.Visible = False\nif (context.Model.Id &gt; 0):\n    context.Properties.UI_InvoiceStatus.Visible = True\n</code></pre> <p></p> <p>Es gibt auch das Feld <code>Hidden</code>, das Benutzeroberfl\u00e4chenelemente verbirgt/zeigt, \u00e4hnlich wie das Feld <code>Visible</code>.</p> <p>Ein weiteres h\u00e4ufig verwendetes <code>context.Properties</code>-Feld ist <code>Required</code>. Wenn es auf <code>True</code> gesetzt ist, wird das spezifische UI-Steuerelement obligatorisch (kann nicht leer sein), und wenn es auf <code>False</code> gesetzt ist, wird es optional. Beachten Sie, dass dies nur den Status des UI-Steuerelements f\u00fcr die benutzerdefinierte Eigenschaft in der aktuellen Formularinstanz \u00e4ndert, nicht die benutzerdefinierte Eigenschaft selbst, die Formularvorlage oder UI-Steuerelemente f\u00fcr diese benutzerdefinierte Eigenschaft in anderen Formularen.</p> <p></p>"},{"location":"de/tutorials/03-workflow.html#verwenden-von-contextform","title":"Verwenden von context.Form","text":"<p><code>context.Form</code> kann verwendet werden, um auf Formulardaten zuzugreifen (z. B. f\u00fcr Validierungszwecke w\u00e4hrend der Formularverarbeitung, bevor die Formulardaten im internen Speicher gespeichert werden) oder um die visuelle Darstellung des Formulars zu verwalten, z. B. durch Festlegen einer Fehlermeldung.</p> <p>Verwenden Sie dazu <code>context.Form.Get(&lt;CustomFieldName&gt;)</code>, um ein Objekt zu erhalten, das ein bestimmtes Feld darstellt. Dann k\u00f6nnen Sie die folgenden Funktionen mit diesem Objekt verwenden.</p> <ul> <li><code>context.Form.Get(&lt;CustomFieldName&gt;).SetValue(&lt;Value&gt;)</code> \u2014 setzt den Wert f\u00fcr ein bestimmtes UI-Steuerelement im aktuellen Formular.</li> <li><code>context.Form.Get(&lt;CustomFieldName&gt;).AddError(&lt;StringValue&gt;)</code> \u2014 setzt eine Fehlermeldung, die unter einem bestimmten UI-Steuerelement im aktuellen Formular angezeigt wird.</li> <li><code>context.Form.Get(&lt;CustomFieldName&gt;).ClearError()</code> \u2014 l\u00f6scht die Fehlermeldung, die unter einem bestimmten UI-Steuerelement im aktuellen Formular angezeigt wird.</li> </ul> <p>Das folgende Skripterweiterung zeigt, wie die Situation \u00fcberpr\u00fcft wird, in der der Benutzer den Standardrechnungsnamen nicht ge\u00e4ndert hat, den wir oben in den Beispielen f\u00fcr Tutorial #1 festgelegt haben.</p> <p></p> Python<pre><code>if datamodel.InvoiceName == 'PLEASE_SET_A_UNIQUE_NAME':\n    context.Form.Get(\"InvoiceName\").AddError(\"Please set a unique invoice name\")\nelse:\n    context.Form.Get(\"InvoiceName\").ClearError()\n</code></pre> <p></p> <p>Das Ergebnis sieht wie der folgende Screenshot aus, wenn der Standardname nicht ge\u00e4ndert wurde:</p> <p></p> <p></p> <p></p>"},{"location":"de/tutorials/03-workflow.html#verwenden-von-contextcommands","title":"Verwenden von context.Commands","text":"<p><code>context.Commands</code> kann verwendet werden, um die Benutzeroberfl\u00e4che der aktuell ausgef\u00fchrten Komponente zu verwalten, den Inhalt des aktuellen Formulars zu \u00e4ndern, verschiedene Seiten zu \u00f6ffnen, neue Komponenten zu \u00f6ffnen, zur vorherigen Seite zur\u00fcckzukehren oder sogar neue Workflows, Dataflows oder Skripte zu starten.</p> <p>Diese Befehle werden normalerweise in Skripten verwendet, die von der ExecuteScript-Aktion mit Schaltfl\u00e4chen aufgerufen werden, und in \u00e4hnlichen F\u00e4llen. In unserem Tutorial #1 kann beispielsweise die Schaltfl\u00e4che Back to All Invoices das folgende Skript verwenden, um zur vorherigen Seite zur\u00fcckzukehren:</p> <p></p> Python<pre><code>def navigate_back():\n    context.Commands.NavigationBack()\n</code></pre> <p></p> <p>Dieses Skript sollte Teil des Component Script sein und f\u00fcr die Schaltfl\u00e4che Back to All Invoices eingerichtet werden, im Abschnitt <code>Actions</code> \u2192 <code>Command Type</code>: <code>Execute Script</code> \u2192 <code>Method Name</code>: <code>navigate back</code>.</p> <p></p> <p>Andere verf\u00fcgbare context.Commands-Funktionen:</p> <ul> <li><code>context.Commands.AddItem(GUID)</code> - UI-Steuerelement zur Seite \u00fcber die GUID hinzuf\u00fcgen.</li> <li><code>context.Commands.ChangePageAsync(GUID)</code> - Seite \u00fcber ihre GUID \u00f6ffnen</li> <li><code>context.Commands.ChangePageByName(\u00abPageName\u00bb)</code> - aktuelle Komponentenseite zu einer neuen Seite mit dem internen Namen \u00e4ndern</li> <li><code>context.Commands.OpenComponent(GUID ComponentID, GUID PageID)</code> - neue Komponente und eine bestimmte Seite innerhalb der Komponente \u00f6ffnen</li> <li><code>context.Commands.EditItem(GUID UI_ControlID, EntityId)</code> - UI-Fokus auf ein bestimmtes UI-Steuerelement und bestimmte Daten (unter Verwendung seines internen Bezeichners) verschieben</li> <li><code>context.Commands.ExecuteWorkflow(GUID WorkflowID)</code> - Workflow \u00fcber seinen Bezeichner ausf\u00fchren. Zus\u00e4tzlich k\u00f6nnen Sie WaitComplete bei Bedarf auf true oder false setzen.</li> <li><code>context.Commands.ExecuteDataflow(GUID dataflow identifier, ContextID)</code> - Dataflow \u00fcber seine GUID und den angegebenen Datenkontext ausf\u00fchren.</li> <li><code>context.Commands.ExecuteScript(String ScriptName, StringParams Script)</code> - Skript (Funktion) aus dem Component Script mit einigen Parametern ausf\u00fchren.</li> </ul>"},{"location":"de/user-interface/index.html","title":"Men\u00fcpunkte","text":""},{"location":"de/user-interface/index.html#menupunkte","title":"Men\u00fcpunkte","text":"Text Only<pre><code>home.md\n\napplications.md\n\nmaintenance.md\n\nlocalizations.md\n\nextensions.md\n\naccess.md\n\nfile-storage.md\n</code></pre>"},{"location":"de/user-interface/access.html","title":"Zugriff","text":""},{"location":"de/user-interface/access.html#access-menu","title":"Access Menu","text":"<p>Dieser Inhalt wird derzeit ins Deutsche \u00fcbersetzt. Vollst\u00e4ndiger Inhalt kommt in K\u00fcrze.</p>"},{"location":"de/user-interface/applications.html","title":"Anwendungen","text":""},{"location":"de/user-interface/applications.html#applications-menu","title":"Applications Menu","text":"<p>Dieser Inhalt wird derzeit ins Deutsche \u00fcbersetzt. Vollst\u00e4ndiger Inhalt kommt in K\u00fcrze.</p>"},{"location":"de/user-interface/extensions.html","title":"Erweiterungen","text":""},{"location":"de/user-interface/extensions.html#extensions-menu","title":"Extensions menu","text":"<p>Dieser Inhalt wird derzeit ins Deutsche \u00fcbersetzt. Vollst\u00e4ndiger Inhalt kommt in K\u00fcrze.</p>"},{"location":"de/user-interface/file-storage.html","title":"Dateispeicher","text":""},{"location":"de/user-interface/file-storage.html#file-storage-menu","title":"File Storage Menu","text":"<p>Dieser Inhalt wird derzeit ins Deutsche \u00fcbersetzt. Vollst\u00e4ndiger Inhalt kommt in K\u00fcrze.</p>"},{"location":"de/user-interface/home.html","title":"Startseite","text":""},{"location":"de/user-interface/home.html#home-menu","title":"Home-Men\u00fc","text":"<p>Die Seite bietet Informationen \u00fcber Ihre Lizenz und die bereitgestellten Anwendungsdom\u00e4nen. Sie erhalten Zugriff auf die folgenden Funktionen und Informationen:</p> <ul> <li>Plantyp: Hier wird der Typ Ihres aktuellen Plans und das Ablauf- oder Verl\u00e4ngerungsdatum Ihres Abonnements angezeigt.</li> <li>Anwendungsdom\u00e4nen: In diesem Abschnitt k\u00f6nnen Sie Anwendungskomponenten erstellen, Benutzer \u00fcber bestimmte URLs verbinden und zum Abschnitt \"Navigation Menu\" navigieren.</li> <li>Nutzungsstatistiken: Zeigt Informationen \u00fcber die aktuelle Anzahl von Anwendungen im Vergleich zum Gesamtlimit sowie die aktuelle und Gesamtanzahl von Benutzern, Workflows und Dataflows an.   </li> </ul> <p> </p>"},{"location":"de/user-interface/home.html#erfahren-sie-mehr-uber-die-konfiguration-von-anwendungsdomanen","title":"Erfahren Sie mehr \u00fcber die Konfiguration von Anwendungsdom\u00e4nen","text":"<p>Anwendungsdom\u00e4nen sind externe Bereiche mit einer bestimmten URL (HTTP/HTTPS://), in denen Sie Ihre Komponenten bereitstellen k\u00f6nnen.</p> <p>Standardm\u00e4\u00dfig ist eine App verf\u00fcgbar mit dem Namen 'digital-workplace'. Sie k\u00f6nnen weitere Apps \u00fcber die Schaltfl\u00e4che 'Add application' in der oberen rechten Ecke der Symbolleiste hinzuf\u00fcgen. Jede App, die Sie hinzuf\u00fcgen, erscheint in der Liste der Apps unter Ihrer Planbeschreibung.</p> <p>In der Anwendungsdom\u00e4ne k\u00f6nnen die folgenden Parameter in den 'Haupteinstellungen' festgelegt werden:</p> Einstellungsgruppe Einstellungsfeld Wertoptionen Zweck Haupteinstellungen Title - Browser-Tab-Titel Hide top bar true, false Ausblenden des oberen Men\u00fcs f\u00fcr Workplace Static menu true, false Konstante Anzeige von Men\u00fcs oder Anzeige bei Mouse-Hover Hide breadcrumps true, false Anzeigen/Ausblenden hierarchischer Navigation Hide user login true, false Anzeigen/Ausblenden des Benutzerlogins Hide locale true, false Anzeigen/Ausblenden der Standortauswahl Choose logo Logo, Small logo, favicon, \"No image\" placeholder Auswahl eines Logos f\u00fcr WorkPlace (verschiedene Typen) User Session Storage local/session Speichern von Autorisierungsparametern in einer Sitzung oder lokal Default Idp provider Multiselect of Catalog Auswahl einer Autorisierungsmethode Default locale Multiselect of Catalog Standardlokalisierung Default user info app Multiselect of Catalog Hauptanwendung zur Verwaltung von Benutzerdaten Default component Multiselect of Catalog Standardkomponente Default page - Standardkomponentenseite Login component Multiselect of Catalog Autorisierungsformularkomponente Enable SIP True, False Integration mit SIP aufbauen <p></p> <p>In dieser Gruppe k\u00f6nnen Sie die Einstellungen globaler Module \u00fcber JavaScript und CSS festlegen, wodurch Sie die Plattform in ein Content-Management-System (CMS) verwandeln und beliebige Drittanbieter-Bibliotheken hochladen und verwenden k\u00f6nnen.</p> <p>JS-Beispiel f\u00fcr globales JavaScript:</p> JavaScript<pre><code>loadScript([\n  'https://code.jquery.com/jquery-3.7.1.min.js?integrity=\"sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=&amp;crossorigin=\"anonymous\"',\n])\n  .then((res) =&gt; {\n    return loadScript([\n      'https://code.jquery.com/ui/1.13.2/jquery-ui.min.js?integrity=\"sha256-lSjKY0/srUM9BE3dPm+c4fBo1dky2v27Gdjm2uoZaL0=\"&amp;crossorigin=\"anonymous\"',\n    ]);\n  })\n  .subcribe({\n    complete: () =&gt; {\n      console.log(\"Load scripts complete\");\n    },\n    error: (err) =&gt; {\n      console.log(\"Load scripts err:\" + err);\n    },\n  });\n</code></pre> <p></p> <p>Dar\u00fcber hinaus gibt es eine Einstellungsgruppe 'Stileinstellungen':</p> Einstellungsgruppe Einstellungsfeld Zweck Hauptschriftart Font Hauptschriftart der App Farbschema Default theme Standardfarbschema Primary light color Haupthelle Farbe Primary color Hauptfarbe Primary dark color Hauptdunkle Farbe Primary darker color Hauptdunklere Farbe Primary text color Standardtextfarbe <p></p> <p>Einstellungsgruppe 'Edit manifest':</p> Einstellungsfeld Zweck Name Name der App im Manifest Short name Kurzname der App Choose Icon (192x192) Auswahl eines 192x192px App-Symbols Choose Icon (512x512) Auswahl eines 512x512px App-Symbols <p></p>"},{"location":"de/user-interface/home.html#sip-integration","title":"SIP-Integration","text":"<p>Wenn die Option 'Enable SIP' in den 'Haupteinstellungen' aktiviert ist, sind mehrere nachfolgende Einstellungen erforderlich, damit Anrufe vom Workplace korrekt funktionieren.</p> <p>Auf der Studio-Seite:</p> Einstellungsfeld Zweck SIP WebSocket server SIP WebSocket-Serveradresse (z.B. 'wss://test-pbx.aqtra.ru:8089/ws') SIP realm SIP-Bereich (Realm) <p></p> <p>Auf der Workplace-Seite:</p> Einstellungsfeld Zweck SIP user name Name des SIP-Benutzers SIP user password Passwort des SIP-Benutzers SIP WebSocket server SIP WebSocket-Serveradresse (z.B. 'wss://test-pbx.aqtra.ru:8089/ws') SIP realm SIP-Bereich (Realm) <p></p> <p>Wenn alle Parameter korrekt eingestellt sind, k\u00f6nnen Sie Anrufe vom Workplace aus t\u00e4tigen. Sie k\u00f6nnen \u00fcber die Arbeit mit SIP innerhalb des Component Script hier lesen: Python verwenden.</p>"},{"location":"de/user-interface/localizations.html","title":"Lokalisierungen","text":""},{"location":"de/user-interface/localizations.html#localizations-menu","title":"Localizations Menu","text":"<p>Dieser Inhalt wird derzeit ins Deutsche \u00fcbersetzt. Vollst\u00e4ndiger Inhalt kommt in K\u00fcrze.</p>"},{"location":"de/user-interface/maintenance.html","title":"Wartung","text":""},{"location":"de/user-interface/maintenance.html#maintenance-menu","title":"Maintenance menu","text":"<p>Dieser Inhalt wird derzeit ins Deutsche \u00fcbersetzt. Vollst\u00e4ndiger Inhalt kommt in K\u00fcrze.</p>"}]}